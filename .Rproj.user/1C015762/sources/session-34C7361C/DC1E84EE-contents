options(
  stringsAsFactors = FALSE,
  dplyr.summarise.inform = FALSE,
  scipen = 7
)
library(tidyverse)
library(rvest)
library(ggthemes)
library(grid)
library(janitor)
library(extrafont)
library(googlesheets4)
library(googledrive)
library(scales)
library(gganimate)
library(transformr)
library(teamcolors)
library(httr)
library(ggh4x)
library(gghighlight)
library(ggtext)
library(DBI)
library(RSQLite)
library(lubridate)
library(utf8)
library(jsonlite)
library(forcats)
library(rtweet)
library(magick)
library(ggridges)
library(cfbfastR)
library(cfbplotR)
library(nflplotR)
library(nflfastR)
library(nflreadr)
library(gt)
library(bstfun)
library(patchwork)
library(fontawesome)
library(fuzzyjoin)
library(httr)
library(glue)
library(implied)
library(odds.converter)
library(tesseract)
library(httr2)
library(directlabels)
library(htm2txt)
library(tidytext)
library(webshot2)

gs4_auth("benj.robinson2@gmail.com")
drive_auth('benj.robinson2@gmail.com')

loadfonts(quiet = TRUE)

getText <- function(x) {
  gettxt(x, 'ASCII') %>%
    strsplit("\n") %>%
    unlist %>%
    str_squish %>%
    .[. != ''] %>%
    unique %>%
    iconv("latin1", "ASCII", sub = "") %>%
    gsub("[[:space:]]", " ", .) %>%
    sub("  ", ", ", .) %>%
    str_squish %>%
    gsub("[’]", "'", .)
}

all_squish <- function(x) {
  x %>%
    mutate(across(everything(), ~ str_squish(.)))
}

add_comma_pick <- function(x) {
  sub("([0-9][0-9]+)", "\\1,", x, perl = TRUE) %>%
    sub("([0-9]+)", "\\1,", ., perl = TRUE) %>%
    sub("[,][,]", ",", .)
}

remove_txt <- function(x, opt = 'period', opt_text = '') {
  if (opt == 'period') {
    sub("[.]", ",", x)
  } else if (opt == 'asterisk') {
    gsub("[*]", "", x)
  } else if (opt == 'colon') {
    gsub("[:]", ",", x)
  } else if (opt == 'emdash') {
    gsub(" \\p{Pd}", ",", x, perl = TRUE)
  } else if (opt == 'end_paren') {
    sub(")", "", sub(" \\(", ", ", x))
  } else if (opt == 'lowup') {
    gsub("(?<=([a-z]))(?=[A-Z]|[0-9]|\\()", ", ", x, perl = TRUE)
  } else if (opt == 'paren') {
    gsub(paste0("\\s*\\(", opt_text, "[^\\)]+\\)"), "", x)
  } else if (opt == 'weird') {
    gsub("â€™", "'", x) %>%
      gsub(' â€”', ",", .) %>%
      gsub("a€", "-", .) %>%
      gsub("Â", "", .) %>%
      gsub("[*]", "", .)
  }
}

remove_paren <- function(x, string = "") {
  gsub(paste0("\\s*\\(", string, "[^\\)]+\\)"), "", x)
}

remove_asterisk <- function(x) {
  gsub("[*]", "", x)
}

remove_end_paren <- function(x){
  sub(" \\(", ", ", x) %>%
    sub(")", "", .)
}

remove_emdash <- function(x) {
  gsub(" \\p{Pd}", ",", x, perl = TRUE)
}

remove_weird <- function(x){
  gsub("â€™", "'", x) %>%
    gsub(' â€”', ",", .) %>%
    gsub("a€", "-", .) %>%
    gsub("Â", "", .) %>%
    remove_asterisk
}

# remove_non_nbr <- function(x)

remove_colon <- function(x) {
  gsub("[:]", ",", x)
}

remove_semicolon <- function(x) {
  gsub("[;]", ",", x)
}

remove_period <- function(x) {
  sub("[.]", ",", x)
}

remove_non_alphanumeric <- function(string, words) {
  cleaned_string <-
    gsub(paste0(
      "[^[:alnum:]|[:space:]|\b",
      paste(words, collapse = "\b"),
      "\b]"
    ),
    "",
    string)
  return(cleaned_string)
}

remove_lowup <- function(x) {
  gsub("(?<=([a-z]))(?=[A-Z]|[0-9]|\\()", ", ", x, perl = TRUE)
}

detect_txt <- function(str, opt, opt_text = "[0-9][.] ") {
  if (opt == 'string') {
    return(str[grepl(opt_text, str)])
  } else if (opt == 'character') {
    str[nchar(str) <= opt_text]
  } else if (opt == 'number') {
    str[substring(str, 0, 1) %in% 1:9]
  }
}

detect_str <- function(str, patt = "[0-9][.] ") {
  str[grepl(patt, str)]
}

detect_chr <- function(str, n = 150) {
  str[nchar(str) <= n]
}

detect_nbr <- function(str) {
  str[substring(str, 0, 1) %in% 1:9]
}

df_plus_name <- function(x, nm = 'draft') {
  x %>%
    as.data.frame %>%
    setNames(nm)
}

df_separate <- function(x,
                        nm = 'draft',
                        sp = ', ',
                        it = c('pick',
                               'team',
                               'name',
                               'position',
                               'school')) {
  x %>%
    as.data.frame %>%
    setNames(nm) -> tmp
  
    separate(
      data = tmp,
      col = nm,
      sep = sp,
      into = it
    )
}

split_picks <- function(x, df = TRUE,
                        into = c('team', 'name', 'position', 'school')) {
    paste(x, collapse = ', ') %>%
      str_split("[0-9][0-9][0-9][.] ") %>%
      unlist %>%
      str_split("[0-9][0-9][.] ") %>%
      unlist %>%
      str_split("[0-9][.] ") %>%
      unlist %>%
      .[. != ''] %>%
      str_squish -> tmp
    
    if (df == TRUE) {
      return(
        df_separate(x = tmp, sp = ',', it = into) %>%
          mutate(across(everything(), ~ str_squish(.)),
                 pick = row_number())
      )
    } else {
      return(tmp)
    }
  }

copy_clipboard <- function(x) {
  write.table(
    x,
    "clipboard-20000",
    sep = "\t",
    row.names = FALSE,
    col.names = FALSE
  )
}

gtm_caption <- function() {
  paste0(
    "Chart: Benjamin Robinson (@benj_robinson) | ",
    "Data: 'Grinding the Mocks', ",
    format(Sys.Date(), "%Y"),
    "."
  )
}

astro_orange <- function() {
  '#EB6E1F'
}

gtm_gs <- function(year = 'All'){
  data.frame(
    draft_year = 2018:2024,
    gid = c(
      '1ok9OhEJfAWjjrrW58u9NtBD00U-ZG_aXAfpYSuaGNOM',
      '1f9WYqbCIy-NzbUGzAHSUqja2sJ2rnWuHzNciR_3Vk5E',
      '18OYRiItwOt4VjPBAmNEwx0z3GvKUi5Q0KheZF6qhXYM',
      '1-DL1REomq_GFHfgoWd4ZWW6-Xtc9ZikP393v0J1wA_E',
      '1zuS_jijyMeNmJhPJQYBvPUHAXeGU11ho1MzUoP1yV-4',
      '1Wn3IOHELqJv5XcrduOXyxAqZE_kn7GOhYT9gIawAynM',
      '1HQlLmZzdzpV2QlxulIR6Ua7dol8qgoc4VCVAgxtwqhM'
    )
  ) %>%
    {
      if (year == 'All'){
        subset(., TRUE, select = 'gid') %>%
          pull %>%
          structure(., names = 2018:2024)
      } else {
        subset(., draft_year %in% year, select = 'gid') %>%
          pull %>%
          structure(., names = year)
      }
    }
}

# all a part of `tidytext` now!
reorder_within <- function(x,
                           by,
                           within,
                           fun = mean,
                           sep = "___",
                           ...) {
  new_x <- paste(x, within, sep = sep)
  stats::reorder(new_x, by, FUN = fun)
}

scale_x_reordered <- function(..., sep = "___") {
  reg <- paste0(sep, ".+$")
  ggplot2::scale_x_discrete(
    labels = function(x)
      gsub(reg, "", x),
    ...
  )
}

scale_y_reordered <- function(..., sep = "___") {
  reg <- paste0(sep, ".+$")
  ggplot2::scale_y_discrete(
    labels = function(x)
      gsub(reg, "", x),
    ...
  )
}

name_fix <- function(x) {
  x %>%
    gsub(", Jr.", "", .) %>%
    gsub(", Jr", "", .) %>%
    gsub(", Sr.", "", .) %>%
    gsub(", Sr", "", .) %>%
    gsub(", JR.", "", .) %>%
    gsub(", SR.", "", .) %>%
    gsub(", Sr", "", .) %>%
    gsub(", jr.", "", .) %>%
    gsub(", sr.", "", .) %>%
    gsub(" Jr.", "", .) %>%
    gsub(" Jr", "", .) %>%
    gsub(" Sr.", "", .) %>%
    gsub(" Sr", "", .) %>%
    gsub(" JR.", "", .) %>%
    gsub(" SR.", "", .) %>%
    gsub(" JR", "", .) %>%
    gsub(" SR", "", .) %>%
    gsub(" Sr", "", .) %>%
    gsub(" jr.", "", .) %>%
    gsub(" sr.", "", .) %>%
    gsub(" IV", "", .) %>%
    gsub(" III", "", .) %>%
    gsub(" II", "", .) %>%
    gsub(" lll", "", .) %>%
    gsub(" ll", "", .) %>%
    gsub('\"', "", .) %>%
    sub("  ", " ", .) %>%
    gsub("’", "'", .) -> x
  
  return(
    case_when(
      substring(x, 1, 2) == 'AJ' ~ sub("AJ", "A.J.", x),
      substring(x, 1, 2) == 'AT' ~ sub("AT", "A.T.", x),
      substring(x, 1, 2) == 'BJ' ~ sub("BJ", "B.J.", x),
      substring(x, 1, 2) == 'CJ' ~ sub("CJ", "C.J.", x),
      substring(x, 1, 2) == 'DJ' ~ sub("DJ", "D.J.", x),
      substring(x, 1, 2) == 'EJ' ~ sub("EJ", "E.J.", x),
      substring(x, 1, 2) == 'KJ' ~ sub("KJ", "K.J.", x),
      substring(x, 1, 2) == 'MJ' ~ sub("MJ", "M.J.", x),
      substring(x, 1, 2) == 'PJ' ~ sub("PJ", "P.J.", x),
      substring(x, 1, 2) == 'RJ' ~ sub("RJ", "R.J.", x),
      substring(x, 1, 2) == 'TJ' ~ sub("TJ", "T.J.", x),
      substring(x, 1, 2) == 'Tj' ~ sub("Tj", "T.J.", x),
      substring(x, 1, 2) == 'JC' ~ sub("JC", "J.C.", x),
      substring(x, 1, 2) == 'JK' ~ sub("JK", "J.K.", x),
      substring(x, 1, 2) == 'JD' ~ sub("JD", "J.D.", x),
      substring(x, 1, 2) == 'JT' ~ sub("JT", "J.T.", x),
      substring(x, 1, 2) == 'Jt' ~ sub("Jt", "J.T.", x),
      substring(x, 1, 2) == 'JJ' ~ sub("JJ", "J.J.", x),
      substring(x, 1, 2) == 'Jj' ~ sub("Jj", "J.J.", x),
      substring(x, 1, 2) == 'JR' ~ sub("JR", "J.R.", x),
      substring(x, 1, 2) == 'JL' ~ sub("JL", "J.L.", x),
      substring(x, 1, 2) == 'LJ' ~ sub("LJ", "L.J.", x),
      substring(x, 1, 2) == 'KT' ~ sub("KT", "K.T.", x),
      substring(x, 1, 2) == 'TK' ~ sub("TK", "T.K.", x),
      TRUE ~ x
    )
  )
}

name_match <- function(x, year = 2024) {
  ifelse(
    year > getMaxDraftYear() | year < getMinDraftYear(),
    x,
    ifelse(
      year == 2024,
      case_when(
        x == 'Alfahiym Walcott' ~ 'Al Walcott',
        x %in% c('Quinton Mitchell') ~ 'Quinyon Mitchell',
        x %in% c('Eyabi Anoma', 'Eyabi Okie') ~ 'Eyabi Okie-Anoma',
        x == 'Blake Corrum' ~ 'Blake Corum',
        x == 'Beaux Limer' ~ 'Beaux Limmer',
        x == 'Christian Mahigany' ~ 'Christian Mahogany',
        x == 'Jamon Dumas-Johmson' ~ 'Jamon Dumas-Johnson',
        x %in% c(
          'Olu Fashanu',
          'Oli Fashanu',
          'Olu Fahanu',
          'Olumuyiwa Fahanu'
        ) ~ 'Olumuyiwa Fashanu',
        x == 'Braden Trice' ~ 'Bralen Trice',
        x == 'Cameron Little' ~ 'Cam Little',
        x == 'Jahdae Brown' ~ 'Jahdae Barron',
        x %in% c(
          'Callen Bullock',
          'Caden Bullock'
        ) ~ 'Calen Bullock',
        x == 'Cam Ward' ~ 'Cameron Ward',
        x == 'Connor Cloby' ~ 'Connor Colby',
        x == 'Cooper Bebee' ~ 'Cooper Beebe',
        x == 'Edgerinn Cooper' ~ 'Edgerrin Cooper',
        x %in% c('Patrick Peyton') ~ 'Patrick Payton',
        x == 'Javonte Jean-Baptiste' ~ 'Javontae Jean-Baptiste',
        x == 'John Alt' ~ 'Joe Alt',
        x %in% c(
          'Jc Latham',
          'C.J. Latham'
        ) ~ 'J.C. Latham',
        x %in% c('J.j. Mccarthy', "Jj Mccarthy", "J,J. McCarthy", 'J.U. McCarthy') ~ 'J.J. McCarthy',
        x %in% c('J.t. Tuimoloau', "J,T. Tuimoloau", "J.T. Tuimolau") ~ 'J.T. Tuimoloau',
        x == 'Dwight Mcglothern' ~ 'Dwight McGlothern',
        x == 'Ladd Mcconkey' ~ 'Ladd McConkey',
        x == 'Marshawn Lloyd' ~ 'MarShawn Lloyd',
        x == 'Jonathan Mendoze' ~ 'Jonathan Mendoza',
        x == 'Kiran Amegadije' ~ 'Kiran Amegadjie',
        x == 'Justin Ebogibe' ~ 'Justin Eboigbe',
        x == 'Derick McLendon' ~ 'Derrick McLendon',
        x == 'Tulu Griffin' ~ 'Lideatrick Griffin',
        x %in% c('Talise Fuaga',
                 'Taliese Guaga',
                 'Tailese Fuaga') ~ 'Taliese Fuaga',
        x == "D,J. James" ~ "D.J. James",
        x == 'Deontre Prince' ~ 'Deantre Prince',
        x == 'Donovan Greene' ~ 'Donavon Greene',
        x %in% c(
          'JaTavion Sanders',
          'J.T. Sanders',
          'Jatavion Sanders',
          "Ja’tavion Sanders",
          "Ja’Tavion Sanders",
          "Ja'tavion Sanders",
          "Jatavian Sanders",
          "Ja’Tavion Sanders"
        ) ~ "Ja'Tavion Sanders",
        x == 'Jalen McMillian' ~ 'Jalen McMillan',
        x == 'Cooper Dejean' ~ 'Cooper DeJean',
        x == 'Tyler Nubine' ~ 'Tyler Nubin',
        x == 'Corey Foreman' ~ 'Korey Foreman',
        x == 'Dante Cephus' ~ 'Dante Cephas',
        x == 'Jonah Ellis' ~ 'Jonah Elliss',
        x %in% c('Troy Fauntanu', 'Troy Fantanu') ~ 'Troy Fautanu',
        x %in% c('Laitu Latu', 'Laitau Latu') ~ 'Laiatu Latu',
        x %in% 'Brandon Fiske' ~ 'Braden Fiske',
        x %in% c(
          'Jerzhan Newton',
          'Johnny Newton',
          'JerZhan Newton',
          'Jer Zhan Newton',
          'JerZahan Newton',
          "Jer’zhan Newton",
          "Jer'zhan Newton",
          "Jer’Zahn Newton"
        ) ~ "Jer'Zhan Newton",
        x == 'Juice Wells' ~ 'Antwane Wells',
        x == 'Kamarri Lassiter' ~ 'Kamari Lassiter',
        x %in% c(
          'Kingsley Suamatia',
          'Kinsley Suamataia',
          'Kingley Suamataia',
          "Kingsley Suamatiaia"
        ) ~ 'Kingsley Suamataia',
        x %in% c("JhaQuan Jackson") ~ "Jha'Quan Jackson",
        x == 'Jaden Sundell' ~ 'Jalen Sundell',
        x == 'Kam Butler' ~ "Kameron Butler",
        x %in% c("Kamren Kinchins", "Kamren Kitchens", "Kam Kinchens", "Kamren Kitchens") ~ "Kamren Kinchens",
        x == 'Keon Johnson' ~ 'Keon Coleman',
        x == 'Kris Abrams Draine' ~ 'Kris Abrams-Draine',
        x == 'J. Michael Sturdivant' ~ 'J.Michael Sturdivant',
        x %in% c('Ruke Ornhorhoro',
                 'Ruke Orhohoro') ~ 'Ruke Orhorhoro',
        x == 'Mike Barrett' ~ 'Michael Barrett',
        x %in% c('Drake May', 'Draft Maye') ~ 'Drake Maye',
        x == 'Zack Zinter' ~ 'Zak Zinter',
        x == 'Uch Ndukwe' ~ 'Uche Ndukwe',
        x == 'Garrett Greenfield' ~ 'Garret Greenfield',
        x == 'Nook Bradford' ~ 'Millard Bradford',
        x == 'Jaylon Ford' ~ 'Jaylan Ford',
        x == 'Jojo Earle' ~ 'JoJo Earle',
        x == 'Tyler Grable' ~ 'Tylan Grable',
        x == 'Demeer Blankumsee' ~ 'DeMeer Blankumsee',
        x == 'Mike Sainristill' ~ 'Mike Sainristil',
        x == 'Marcelles Dial' ~ 'Marcellas Dial',
        x %in% c('Tez Walker') ~ 'Devontez Walker',
        x %in% c(
          'Mckinnley Jackson',
          'McKinley Jackson'
        ) ~ 'McKinnley Jackson',
        x %in% c(
          'Kool-Aid Mckinstry',
          'Kool Aid McKinstry',
          'Kool-aid McKinstry',
          "Ga'Quincy McKinstry",
          "GaQuincy McKinstry",
          "Ga'quincy Mckinstry"
        ) ~ 'Kool-Aid McKinstry',
        x == 'Marvin Harrision' ~ 'Marvin Harrison',
        x %in% c('Mason Smith', 'Amazon Smith', 'Maasen Smith') ~ 'Maason Smith',
        x %in% c('Jaquan Sheppard', 'JaQuan Sheppard', "Ja'quan Sheppard") ~ "Ja'Quan Sheppard",
        x == 'Matthew Lee' ~ "Matt Lee",
        x == 'Mike Hall' ~ 'Michael Hall',
        x == 'Montell Johnson' ~ 'Montrell Johnson',
        x == 'Orande Gadsden' ~ 'Oronde Gadsden',
        x %in% c('Andrew Mukaba') ~ 'Andrew Mukuba',
        x == 'Tyliek Williams' ~ 'Tyleik Williams',
        x %in% c('Dadrian Taylor-Demerson') ~ 'Dadrion Taylor-Demerson',
        x %in% c(
          'Raheim Rocket Sanders',
          'Rocket Sanders'
        ) ~ 'Raheim Sanders',
        x == 'Audric Estim' ~ 'Audric Estime',
        x %in% c('JaLynn Polk',
                 "Ja’Lynn Polk") ~ "Ja'Lynn Polk",
        x %in% c('Joquavious Marks', 'JoQuavious Marks', "Jo'quavious Marks") ~ "Jo'Quavious Marks",
        x == 'Fabian Lovett' ~ 'Fabien Lovett',
        x %in% c(
          'Rome Odunz',
          'Romeo Odunze',
          'Rome Odunza'
        ) ~ 'Rome Odunze',
        x == 'Tanner Koizol' ~ 'Tanner Koziol',
        x %in% c('Xavier Leggette') ~ 'Xavier Legette',
        x %in% c('Adonai Ad Mitchell',
                 'AD Mitchell') ~ "Adonai Mitchell",
        x %in% c('Sedrick Van Pran Granger',
                 'Sedrick Van Pran-Granger',
                 'Sedrick Van') ~ 'Sedrick Van Pran',
        x == 'Shadeur Sanders' ~ 'Shedeur Sanders',
        x %in% c(
          'Treyveon Henderson',
          'Treveyon Henderson'
        ) ~ 'TreVeyon Henderson',
        x %in% c('TVondre Sweat', "T’Vondre Sweat", "T’Vondre Sweat") ~ "T'Vondre Sweat",
        x == 'Xavier Worth' ~ 'Xavier Worthy',
        x %in% c(
          "JaCorey Brooks",
          "Jacorey Boroks",
          "Ja’Corey Brooks"
        ) ~ "Ja'Corey Brooks",
        x == "James Marshall" ~ 'Jason Marshall',
        x %in% c("Johnathon Brooks") ~ 'Johnathon Brooks',
        x == 'Rahseen Ali' ~ 'Rasheen Ali',
        x == 'Tony Franklin' ~ 'Troy Franklin',
        x %in% c('Demeioun Robinson',
                 'Demeioun Chop Robinson') ~ 'Chop Robinson',
        x == "Emecka Egbuka" ~ "Emeka Egbuka",
        x == 'Calean Carson' ~ 'Caelen Carson',
        x == "Tre'mon Morris-Brash" ~ "Tre'Mon Morris-Brash",
        x %in% c('Duce marksnut', "Darian Chetnut") ~ 'Darian Chestnut',
        x %in% c('Tyrone Hopper', 'TyRon Hopper') ~ "Ty'Ron Hopper",
        x == "DeCorian Clark" ~ "De'Corian Clark",
        x %in% c("Isaiah Davi") ~ "Isaiah Davis",
        x == "Mar'Keise Irving" ~ "Bucky Irving",
        x == 'Kitan Oladpo' ~ 'Kitan Oladapo',
        x %in% c('Ladarius Henderson') ~ 'LaDarius Henderson',
        x %in% c('Graham Burton') ~ 'Graham Barton',
        TRUE ~ x
      ),
      ifelse(
        year == 2023,
        case_when(
          x == 'Jalen Raymond' ~ 'Jalen Redmond',
          x == 'Kayshoun Boutte' ~ 'Kayshon Boutte',
          x == 'Peter Skorosnki' ~ 'Peter Skoronski',
          x == 'AT Perry' ~ 'A.T. Perry',
          x == 'Adetomiwa Adabawore' ~ 'Adetomiwa Adebawore',
          x == 'D.j. Turner' ~ 'D.J. Turner',
          x == 'Caleb Simpson' ~ 'Caleb Sampson',
          x == 'T.J. Coleman' ~ 'D.J. Coleman',
          x == 'Cody Macuh' ~ 'Cody Mauch',
          x == 'Zach Charbonne' ~ 'Zach Charbonnet',
          x == "Tre'Vius Tomlinson" ~ "Tre'Vius Hodges-Tomlinson",
          x == 'Marte Marpu' ~ 'Marte Mapu',
          x == 'Ali Gaye.' ~ 'Ali Gaye',
          x == 'Antonio Mafi' ~ 'Atonio Mafi',
          x == 'Troy Doege' ~ 'Jarret Doege',
          x == 'TK McLendon' ~ 'T.K. McLendon',
          x == 'Warren McLendon' ~ 'Warren McClendon',
          x == 'Luke Shoonmaker' ~ 'Luke Schoonmaker',
          x == 'Jordan Addizon' ~ 'Jordan Addison',
          x == 'Jake Andrew' ~ 'Jake Andrews',
          x == 'Israel Abinakanda' ~ 'Israel Abanikanda',
          x == 'Deionte Banks' ~ 'Deonte Banks',
          x == 'Marte Marpu' ~ 'Marte Mapu',
          x == 'Cameron McDonald' ~ 'Camren McDonald',
          x == 'Dayain Henley' ~ 'Daiyan Henley',
          x == 'Roschon Johnon' ~ 'Roschon Johnson',
          x == 'Nolan Smth' ~ 'Nolan Smith',
          x == 'Calijah Klancy' ~ 'Calijah Kancey',
          x == "Ja'Ayir Brown" ~ "Ji'Ayir Brown",
          x == 'Byrce Young' ~ 'Bryce Young',
          x == 'Isaiah Mcguire' ~ 'Isaiah McGuire',
          x == 'Will Mcdonald' ~ 'Will McDonald',
          x == 'Wil Mcdonald' ~ 'Will McDonald',
          x == 'Wil McDonald' ~ 'Will McDonald',
          x == 'Dee Winter' ~ 'Dee Winters',
          x == 'Quinton Johnson' ~ 'Quintin Johnston',
          x == 'Jaxson Smith-Njigba' ~ 'Jaxon Smith-Njigba',
          x == 'Bijan Robinsin' ~ 'Bijan Robinson',
          x == 'AT Perry' ~ 'A.T. Perry',
          x == 'Rejzhon Wright' ~ 'Rejzohn Wright',
          x == 'Sala Aumavae-Laulu' ~ 'Malaesala Aumavae-Laulu',
          x == 'Blake Whitehart' ~ 'Blake Whiteheart',
          x == "Tre Tomlinson" ~ "Tre'Vius Hodges-Tomlinson",
          x == 'Nathanial Dell' ~ 'Nathaniel Dell',
          x == 'Antonio Mafi' ~ 'Atonio Mafi',
          x == 'Moro Ojmo' ~ 'Moro Ojomo',
          x == 'Tuli Tuipultou' ~ 'Tuli Tuipulotu',
          x == 'Devonta Banks' ~ 'Deonte Banks',
          x == 'Christian Conzalez' ~ 'Christian Gonzalez',
          x == 'John Gaines' ~ 'Jon Gaines',
          x == 'Puka Nakua' ~ 'Puka Nacua',
          x == 'Yassir Abdullah' ~ 'Yasir Abdullah',
          x == 'Israel Ibanikanda' ~ 'Israel Abanikanda',
          x == 'Xaver Hutchinson' ~ 'Xavier Hutchinson',
          x == 'Jalon Jones' ~ 'Jaylon Jones',
          x == 'Charles Jones' ~ 'Charlie Jones',
          x == 'Deonta Banks' ~ 'Deonte Banks',
          x == 'Bryan Beese' ~ 'Bryan Bresee',
          x == 'Anthony Richardon' ~ 'Anthony Richardson',
          x == 'Andrew Vorhes' ~ 'Andrew Vorhees',
          x == "Tre'Vius Hidges Tomlinson"  ~ "Tre'Vius Hodges-Tomlinson",
          x == 'Kalee Ringo' ~ 'Kelee Ringo',
          x == 'Sam LePorta' ~ 'Sam LaPorta',
          x == 'Corey Trice' ~ 'Cory Trice',
          x == "Michael Owuwu" ~ "Michael Owusu",
          x == "O'Cyrus Torrencw" ~ "O'Cyrus Torrence",
          x == 'TreVius Hodgles-Tomlinson' ~ "Tre'Vius Hodges-Tomlinson",
          x == 'Jake Anderws' ~ 'Jake Andrews',
          x == 'Makhi Blackmon' ~ 'Mekhi Blackmon',
          x == 'Clark Philips' ~ 'Clark Phillips',
          x == 'Caljiah Kancey' ~ 'Calijah Kancey',
          x == "O'Cyrus Torrance" ~ "O'Cyrus Torrence",
          x == 'Tyreke Stevenson' ~ 'Tyrique Stevenson',
          x == 'Tryee Wilson' ~ 'Tyree Wilson',
          x == 'Travis Vokolex' ~ 'Travis Vokolek',
          x == 'Marte Mafu' ~ 'Marte Mapu',
          x == 'Jartavious Martin' ~ 'Jartavius Martin',
          x == 'Jalen Moreno' ~ 'Jalen Cropper',
          x == 'Jakorrian Bennett' ~ 'Jakorian Bennett',
          x == 'Dontavion Wicks' ~ 'Dontayvion Wicks',
          x == 'Devon Archane' ~ 'Devon Achane',
          x == 'Braedon Daniels' ~ 'Braeden Daniels',
          x == 'Aedetomia Adebawore' ~ 'Adetomiwa Adebawore',
          x == 'Andrei Iosvias' ~ 'Andrei Iosivas',
          x == 'McClendon Curtiis' ~ 'McClendon Curtis',
          x == 'Marvin Mins' ~ 'Marvin Mims',
          x == 'Sidney Brown' ~ 'Sydney Brown',
          x == 'VanDarius Cowan' ~ 'Vandarius Cowan',
          x == 'VanDarius Cowen' ~ 'Vandarius Cowan',
          x == 'Ronnie Phelps' ~ 'Lonnie Phelps',
          x == 'Mitch Tinsley' ~ 'Mitchell Tinsley',
          x == 'Kendre MIller' ~ 'Kendre Miller',
          x == 'Warren McLendon' ~ 'Warren McClendon',
          x == 'Tuli Tuipuloto' ~ 'Tuli Tuipulotu',
          x == 'Tuli Tulipulotu' ~ 'Tuli Tuipulotu',
          x == 'Tanner McAllister' ~ 'Tanner McCalister',
          x == 'Richard Gouriaige' ~ 'Richard Gouraige',
          x == 'Lonnie Phillips' ~ 'Lonnie Phelps',
          x == "Ken'Trel Clark" ~ "Kei'Trel Clark",
          x == 'Keannu Benton' ~ 'Keeanu Benton',
          x == 'Jaden Hazelwood' ~ 'Jadon Haselwood',
          x == 'Isiah Land' ~ 'Isaiah Land',
          x == 'Henery Baiivalu' ~ 'Henry Bainivalu',
          x == 'Dorian Wiliams' ~ 'Dorian Williams',
          x == 'Dontavyion Wicks' ~ 'Dontayvion Wicks',
          x == 'DeMarvion Overshow' ~ 'DeMarvion Overshown',
          x == 'Chandler Zavara' ~ 'Chandler Zavala',
          x == 'Jartavis Martin' ~ 'Jartavius Martin',
          x == 'Brodic Martin' ~ 'Brodric Martin',
          x == 'Braden Daniels' ~ 'Braeden Daniels',
          x == "TreVius Hodges-Tomlinson" ~ "Tre'Vius Hodges-Tomlinson",
          x == "Trevius Hodges-Tomlinson" ~ "Tre'Vius Hodges-Tomlinson",
          x == 'Olusegun Olawatimi' ~ 'Olusegun Oluwatimi',
          x == 'Chandler Savala' ~ 'Chandler Zavala',
          x == 'will Mcdonald' ~ 'Will McDonald',
          x == 'Isaiah Mcguire' ~ 'Isaiah McGuire',
          x == 'Kaevon Meriweather' ~ 'Kaevon Merriweather',
          x == 'Nik Broeker' ~ 'Nick Broeker',
          x == 'Warren McClendn' ~ 'Warren McClendon',
          x == 'Jaxon Smith-Njgiba' ~ 'Jaxon Smith-Njigba',
          x == 'Bryce Ford' ~ 'Bryce Ford-Wheaton',
          x == 'Zack Evans' ~ 'Zach Evans',
          x == 'Tyreke Stevenson' ~ 'Tyrique Stevenson',
          x == 'Mekhi Blackman' ~ 'Mekhi Blackmon',
          x == 'Keenau Benton' ~ 'Keeanu Benton',
          x == "Ji' Ayir" ~ "Ji'Ayir Brown",
          x == 'Sirvocea Dennis' ~ 'SirVocea Dennis',
          x == 'C J Stroud' ~ 'C.J. Stroud',
          x == 'Felix Anduke-Uzomah' ~ 'Felix Anudike-Uzomah',
          x == 'Cody Mouch' ~ 'Cody Mauch',
          x == 'Jacquelin Roy' ~ 'Jaquelin Roy',
          x == 'Steve Avilia' ~ 'Steve Avila',
          x == 'Deontae Banks' ~ 'Deonte Banks',
          x == 'Quentin Johnson' ~ 'Quentin Johnston',
          x == 'Jaxon-Smith Njigba' ~ 'Jaxon Smith-Njigba',
          x == 'Jaxon-Smith Njigba' ~ 'Jaxon Smith-Njigba',
          x == 'Jaxson Smith-Njigba' ~ 'Jaxon Smith-Njigba',
          x == 'Tanner Mc' ~ 'Tanner McKee',
          x == 'Warren Mc' ~ 'Warren McClendon',
          x == 'Jaxon Smith-Nijigba' ~ 'Jaxon Smith-Njigba',
          x == 'Caljah Kancey' ~ 'Calijah Kancey',
          x == 'Myles Nurphy' ~ 'Myles Murphy',
          x == 'Karlo Brooks' ~ 'Karl Brooks',
          x == 'Grant Maag' ~ 'Garett Maag',
          x == 'Tyree Wison' ~ 'Tyree Wilson',
          x == 'Paris Johnston' ~ 'Paris Johnson',
          x == 'Peter Skoronwski' ~ 'Peter Skoronski',
          x == 'Peter Skoronoski' ~ 'Peter Skoronski',
          x == 'Mathew Bergeron' ~ 'Matthew Bergeron',
          x == 'Luke Wyppler' ~ 'Luke Wypler',
          x == 'C.J.Stroud' ~ 'C.J. Stroud',
          x == 'Deon Banks' ~ 'Deonte Banks',
          x == 'Brian Breese' ~ 'Bryan Bresee',
          x == 'Bryan Breesee' ~ 'Bryan Bresee',
          x == 'Jalen Moreno-Cooper' ~ 'Jalen Cropper',
          x == "Tre'vius Tomlinson" ~ "Tre'Vius Hodges-Tomlinson",
          x == 'Adetomiba Adebawore' ~ 'Adetomiwa Adebawore',
          x == 'Adetomiwa Adeboware' ~ 'Adetomiwa Adebawore',
          x == 'Adetomiwa Adebowore' ~ 'Adetomiwa Adebawore',
          x == 'Coby Wooden' ~ 'Colby Wooden',
          x == 'Wil Levis' ~ 'Will Levis',
          x == 'Terrell Smith' ~ 'Terell Smith',
          x == 'SirVocea Denis' ~ 'SirVocea Dennis',
          x == 'Shaq Davis' ~ 'Shaquan Davis',
          x == 'P.JMustipher' ~ 'P.J. Mustipher',
          x == 'Malike Knowles' ~ 'Malik Knowles',
          x == 'KeiTrel Clark' ~ "Kei'Trel Clark",
          x == 'K.JHenry' ~ 'K.J. Henry',
          x == 'J.LSkinner' ~ 'J.L. Skinner',
          x == 'D.JJohnson' ~ 'D.J. Johnson',
          x == 'D.JTurner' ~ 'D.J. Turner',
          x == 'D.JDale' ~ 'D.J. Dale',
          x == 'C.JStroud' ~ 'C.J. Stroud',
          x == 'C.JJohnson' ~ 'C.J. Johnson',
          x == 'B.JOjulari' ~ 'B.J. Ojulari',
          x == 'B.JThompson' ~ 'B.J. Thompson',
          x == 'A.JFinley' ~ 'A.J. Finley',
          x == 'A.TPerry' ~ 'A.T. Perry',
          x == 'Henry TooToo' ~ "Henry To'o To'o",
          x == 'Noah Grindoff' ~ 'Noah Gindorff',
          x == 'Lukas VanNess' ~ 'Lukas Van Ness',
          x == 'TreVius Hodges Tomlinson' ~ "Tre'Vius Hodges-Tomlinson",
          x == 'D. Thompson-Robinson' ~ 'Dorian Thompson-Robinson',
          x == 'Tanner Mc' ~ 'Tanner McKee',
          x == 'Felix Anudike-Uzomoah' ~ 'Felix Anudike-Uzomah',
          x == 'Will Mc' ~ 'Will McDonald',
          x == 'B.J. Olujari' ~ 'B.J. Ojulari',
          x == 'Brett Laing' ~ 'Brent Laing',
          x == "Henry To'o'To'o" ~ "Henry To'o To'o",
          x == "DeWayne Bride" ~ "DeWayne McBride",
          x == "Emmanel Forbes" ~ "Emmanuel Forbes",
          x == "Keenan Burton" ~ "Keeanu Benton",
          x == "Ji Ayir" ~ "Ji'Ayir Brown",
          x == "Ji'ayir Brown" ~ "Ji'Ayir Brown",
          x == "Israel Abanikanoa" ~ "Israel Abanikanda",
          x == "Jarren Hall" ~ "Jaren Hall",
          x == "DeMarco Hellams" ~ "DeMarcco Hellams",
          x == "Tuli Tuipolotu" ~ "Tuli Tuipulotu",
          x == 'Dj Turner' ~ 'D.J. Turner',
          x == 'Daiyon Henley' ~ 'Daiyan Henley',
          x == 'Daiyan Hanley' ~ 'Daiyan Henley',
          x == 'Parris Johnson' ~ 'Paris Johnson',
          x == 'Quintin Johnston' ~ 'Quentin Johnston',
          x == 'Lukas Vann Ness' ~ 'Lukas Van Ness',
          x == 'Dalton Kincaide' ~ 'Dalton Kincaid',
          x == 'Mohamoud Diabete' ~ 'Mohamoud Diabate',
          x == 'Jalen Hyatt' ~ 'Jalin Hyatt',
          x == 'Calijah Klancey' ~ 'Calijah Kancey',
          x == "O'cyrus Torrence" ~ "O'Cyrus Torrence",
          x == 'Kalijah Kancey' ~ 'Calijah Kancey',
          x == 'Jarren Hall' ~ 'Jaren Hall',
          x == 'Sam La' ~ 'Sam LaPorta',
          x == 'Christain Gonzalez' ~ 'Christian Gonzalez',
          x == 'Demarcco Hellams' ~ 'DeMarcco Hellams',
          x == 'Richard Gouriage' ~ 'Richard Gouraige',
          x == 'Jaiden Woodberry' ~ 'Jaiden Woodbey',
          x == 'Cody Mach' ~ 'Cody Mauch',
          x == 'Bryce Barringer' ~ 'Bryce Baringer',
          x == 'Drew Saunders' ~ 'Drew Sanders',
          x == 'Luka Van Ness' ~ 'Lukas Van Ness',
          x == 'Dawan Jones' ~ 'Dawand Jones',
          x == 'Jackson Smith-Njigba' ~ 'Jaxon Smith-Njigba',
          x == 'Snacks Coburn' ~ 'Keondre Coburn',
          x == 'Jon Michael Schmitz' ~ 'John Michael Schmitz',
          x == 'Devin Achane' ~ 'Devon Achane',
          x == 'Mohamoud Diabete' ~ 'Mohamoud Diabate',
          x == 'Tuli Tuioulotu' ~ 'Tuli Tuipulotu',
          x == 'Olusegun Oluwaitimi' ~ 'Olusegun Oluwatimi',
          x == 'Luke Whypler' ~ 'Luke Wypler',
          x == 'John Michael Scmitz' ~ 'John Michael Schmitz',
          x == 'Isreal Abinkanda' ~ 'Israel Abanikanda',
          x == 'Derick Brown' ~ 'Derick Hall',
          x == 'Curtis McClendon' ~ 'McClendon Curtis',
          x == 'Bryan Breece' ~ 'Bryan Bresee',
          x == 'Brodrick Jones' ~ 'Broderick Jones',
          x == 'Sam Laporta' ~ 'Sam LaPorta',
          x == 'Calijah Kansey' ~ 'Calijah Kancey',
          x == 'Tank Bigsy' ~ 'Tank Bigsby',
          x == 'Jaxon Smith-Ngijba' ~ 'Jaxon Smith-Njigba',
          x == "Henry To'otto'o" ~ "Henry To'o To'o",
          x == 'Antoine Johnson' ~ 'Antonio Johnson',
          x == 'Tuli Tuipilotu' ~ 'Tuli Tuipulotu',
          x == 'JiAyir Brown' ~ "Ji'Ayir Brown",
          x == 'Bryan Young' ~ 'Byron Young',
          x == 'Ade Adebawore' ~ 'Adetomiwa Adebawore',
          x == 'Jeff Gunter' ~ 'Jeffrey Gunter',
          x == 'Daiyon Henley' ~ 'Daiyan Henley',
          x == 'Nick Hamtpon' ~ 'Nick Hampton',
          x == 'Dalton Kinkaid' ~ 'Dalton Kincaid',
          x == 'Keylee Ringo' ~ 'Kelee Ringo',
          x == 'Jaxon Smith-Injigba' ~ 'Jaxon Smith-Njigba',
          x == 'Bijan Johnson' ~ 'Bijan Robinson',
          x == 'OL North' ~ 'Cody Mauch',
          x == 'Devon Weatherspoon' ~ 'Devon Witherspoon',
          x == 'Brain Branch' ~ 'Brian Branch',
          x == 'Blu Kelly' ~ 'Kyu Blu Kelly',
          x == 'Bryce Barringer' ~ 'Bryce Baringer',
          x == 'Jarren Hall' ~ 'Jaren Hall',
          x == 'John-Michael Schmitz' ~ 'John Michael Schmitz',
          x == 'Xaavian Valladay' ~ 'Xazavian Valladay',
          x == 'Sam La' ~ 'Sam LaPorta',
          x == 'Josh Wylie' ~ 'Josh Whyle',
          x == 'Saiki Ika' ~ 'Siaki Ika',
          x == 'Laitu Latu' ~ 'Laiatu Latu',
          # x == 'Daniel Wright' ~ 'Darnell Wright',
          x == 'Lucas Van Ness' ~ 'Lukas Van Ness',
          x == 'Emanuel Forbes' ~ 'Emmanuel Forbes',
          x == 'Anthon Harrison' ~ 'Anton Harrison',
          x == 'Tyler Van Ness' ~ 'Lukas Van Ness',
          x == 'OL Cody' ~ 'Cody Mauch',
          x == 'Tim Demorat' ~ 'Tim DeMorat',
          x == 'Sedrick VanPran' ~ 'Sedrick Van Pran',
          x == 'Luke Musgrove' ~ 'Luke Musgrave',
          x == 'Lucas VanNess' ~ 'Lukas Van Ness',
          x == 'Kyu Blue Kelly' ~ 'Kyu Blu Kelly',
          x == 'Jason Njigba-Smith' ~ 'Jaxon Smith-Njigba',
          x == 'Zack Kunts' ~ 'Zack Kuntz',
          x == 'Devon Weatherpoon' ~ 'Devon Witherspoon',
          x == 'Peter Skronski' ~ 'Peter Skoronski',
          x == 'Peter Skoronksi' ~ 'Peter Skoronski',
          x == 'Siaka Ika' ~ 'Siaki Ika',
          x == 'Trevor Trevor Reid' ~ 'Trevor Reid',
          x == 'OCyrus Torrence' ~ "O'Cyrus Torrence",
          x == 'Jaxon Smith Njigba' ~ 'Jaxon Smith-Njigba',
          x == 'Jaxon SmithNjigba' ~ 'Jaxon Smith-Njigba',
          x == 'Puke Nacua' ~ 'Puka Nacua',
          x == "Ke'Trel Clark" ~ "Kei'Trel Clark",
          x == "Tre'Vius Hodges" ~ "Tre'Vius Hodges-Tomlinson",
          x == 'Darnell Washingon' ~ 'Darnell Washington',
          x == 'Rasheed Rice' ~ 'Rashee Rice',
          x == 'Rayshee Rice' ~ 'Rashee Rice',
          x == 'Andrew Voerhees' ~ 'Andrew Vorhees',
          x == 'Gervon Dixon' ~ 'Gervon Dexter',
          x == 'Jaxon Smith-' ~ 'Jaxon Smith-Njigba',
          x == 'Christian Gonzales' ~ 'Christian Gonzalez',
          x == 'Micahel Mayer' ~ 'Michael Mayer',
          x == 'Keele Ringo' ~ 'Kelee Ringo',
          x == 'Bryan Breese' ~ 'Bryan Bresee',
          x == 'Brian Bresee' ~ 'Bryan Bresee',
          x == 'John Michael-Schmitz' ~ 'John Michael Schmitz',
          x == 'Felix Anudike' ~ 'Felix Anudike-Uzomah',
          x == 'Jaelin Hyatt' ~ 'Jalin Hyatt',
          x == 'Cedrick Tillman' ~ 'Cedric Tillman',
          x == 'Peter Skorinski' ~ 'Peter Skoronski',
          x == 'Jory Porter' ~ 'Joey Porter',
          x == 'Jayin Hyatt' ~ 'Jalin Hyatt',
          x == 'Cristian Gonzalez' ~ 'Christian Gonzalez',
          x == 'Tuli Tuipulota' ~ 'Tuli Tuipulotu',
          x == 'Tuli Tuipolatu' ~ 'Tuli Tuipulotu',
          x == 'Matt Jones' ~ 'Matthew Jones',
          x == 'Matt Bergeron' ~ 'Matthew Bergeron',
          x == 'Emmanual Forbes' ~ 'Emmanuel Forbes',
          x == 'A.T. A.T. Perry' ~ 'A.T. Perry',
          x == 'Starling Thomas V' ~ 'Starling Thomas',
          x == 'Jalen Monroe-Cropper' ~ 'Jalen Cropper',
          x == 'Conner Galvin' ~ 'Connor Galvin',
          x == 'Ahkeem Mesidor' ~ 'Akheem Mesidor',
          x == 'Kelly Ringo' ~ 'Kelee Ringo',
          x == 'Tank Bigbsy' ~ 'Tank Bigsby',
          x == 'Calijah Kacey' ~ 'Calijah Kancey',
          x == 'Olu Oluwatimi' ~ 'Olusegun Oluwatimi',
          x == 'Wayna Morris' ~ 'Wanya Morris',
          x == 'Tavian Thomas' ~ 'Tavion Thomas',
          x == 'SirVoccea Dennis' ~ 'SirVocea Dennis',
          x == 'Mo Ibrahim' ~ 'Mohamed Ibrahim',
          x == 'Malachai Moore' ~ 'Malachi Moore',
          x == 'Luke Van Ness' ~ 'Lukas Van Ness',
          x == 'Kendrick Duncan' ~ 'Kenderick Duncan',
          # x == 'Jaylon Johnson' ~ 'Jaylon Jones',
          x == 'Jakorion Bennett' ~ 'Jakorian Bennett',
          x == "J'Ayir Brown" ~ "Ji'Ayir Brown",
          x == 'DeMarrco Hellams' ~ 'DeMarcco Hellams',
          x == 'Dalton Rising' ~ 'Cameron Rising',
          x == 'Andre Iosivas' ~ 'Andrei Iosivas',
          x == 'Corey Durden' ~ 'Cory Durden',
          x == 'Balke Corum' ~ 'Blake Corum',
          x == "Henry To'Oto'o" ~ "Henry To'o To'o",
          x == "Henry To'oTo'o" ~ "Henry To'o To'o",
          x == 'Devin Witherspoon' ~ 'Devon Witherspoon',
          x == 'OT Cody' ~ 'Cody Mauch',
          x == 'Van Pran' ~ 'Sedrick Van Pran',
          x == 'Will Mcdonald' ~ 'Will McDonald',
          x == 'will Mcdonald' ~ 'Will McDonald',
          x == 'Stetson Benntt' ~ 'Stetson Bennett',
          x == 'Rahsee Rice' ~ 'Rashee Rice',
          x == 'Nick Salviveri' ~ 'Nick Saldiveri',
          x == 'Keanu Benton' ~ 'Keeanu Benton',
          x == 'Parris Johnson' ~ 'Paris Johnson',
          x == 'Shaquan Shaq Davis' ~ 'Shaquan Davis',
          x == 'Zaach Pickens' ~ 'Zacch Pickens',
          x == 'Quinton Barroq' ~ 'Quinton Barrow',
          x == "Ja'quan Sheppard" ~ "Ja'Quan Sheppard",
          x == 'Cam Mitchell' ~ 'Cameron Mitchell',
          x == 'Jaelin Hyatt' ~ 'Jalin Hyatt',
          x == 'Cedrick Tillman' ~ 'Cedric Tillman',
          x == 'Felix Anudike' ~ 'Felix Anudike-Uzomah',
          x == 'Van Ness' ~ 'Lukas Van Ness',
          x == 'David Sills V' ~ 'David Sills',
          x == 'Ugochukwu Amadi' ~ 'Ugo Amadi',
          x == 'Cece Jefferson' ~ 'CeCe Jefferson',
          x == 'Deion Calhoun' ~ 'Shaq Calhoun',
          x == 'Elkanah Dillon' ~ 'Kano Dillon',
          x == 'Jeff Okudah' ~ 'Jeffrey Okudah',
          x == 'Nick Westbrook' ~ 'Nick Westbrook-Ikhine',
          x == 'Davon Hamilton' ~ 'DaVon Hamilton',
          x == 'Joe Tryon' ~ 'Joe Tryon-Shoyinka',
          x == 'Jayson Oweh' ~ 'Odafe Oweh',
          x == 'Bennett Skowronek' ~ 'Ben Skowronek',
          x == 'Isaih Pacheco' ~ 'Isiah Pacheco',
          x == 'Devontay Taylor' ~ 'Devontay Love-Taylor',
          x == 'Marcelino Ball' ~ 'Marcelino McCrary-Ball',
          x == 'Xavier Newman' ~ 'Xavier Newman-Johnson',
          x == 'Jarreth Sterns' ~ 'Jerreth Sterns',
          x == "Tre'mon Morris-Brash" ~ "Tre'Mon Morris-Brash",
          x == 'Eyabi Anoma' ~ 'Eyabi Okie',
          x == 'Charmarri Conner' ~ 'Chamarri Conner',
          x == 'Evan Wiilliams' ~ 'Evan Williams',
          x == 'Mekhi Gardner' ~ 'Mekhi Garner',
          x == 'Jartavious Martin' ~ 'Jartavius Martin',
          x == 'Quan Martin' ~ 'Jartavius Martin',
          x == 'TE Tucker' ~ 'Tucker Kraft',
          x == 'Jaylin Hyatt' ~ 'Jalin Hyatt',
          x == 'Devon Whiterspoon' ~ 'Devon Witherspoon',
          x == 'Garrett Willams' ~ 'Garrett Williams',
          x == 'Felix Anudike' ~ 'Felix Anudike-Uzomah',
          x == 'Dj Uiagalelei' ~ 'D.J. Uiagalelei',
          x == 'Peter Skoronsky' ~ 'Peter Skoronski',
          x == 'Jaelin Hyatt' ~ 'Jalin Hyatt',
          x == 'B.J. Oljulari' ~ 'B.J. Ojulari',
          x == 'Thomas Greany' ~ 'Thomas Greaney',
          x == 'Sedrick Van-Pran' ~ 'Sedrick Van Pran',
          x == 'Mekhi Gardner' ~ 'Mekhi Garner',
          x == 'Emilk Ekiyor' ~ 'Emil Ekiyor',
          x == 'Jack Campell' ~ 'Jack Campbell',
          x == 'Felix Anudike-Uzoma' ~ 'Felix Anudike-Uzomah',
          x == 'Jaxson Smith Njigba' ~ 'Jaxon Smith-Njigba',
          x == 'Quinton Johnston' ~ 'Quentin Johnston',
          x == 'Peter Skornowki'~ 'Peter Skoronski',
          x == 'Miles Murphy' ~ 'Myles Murphy',
          x == 'Jordan Adison' ~ 'Jordan Addison',
          x == 'Andrew Voorhees' ~ 'Andrew Vorhees',
          x == 'Bijon Robinson' ~ 'Bijan Robinson',
          x == 'Jordan Verse' ~ 'Jared Verse',
          x == 'Tank Dell' ~ 'Nathaniel Dell',
          x == "Michael Schmitz" ~ "John Michael Schmitz",
          x == "To'o To'o" ~ "Henry To'o To'o",
          x == "Cyrus O'Torrence" ~ "O'Cyrus Torrence",
          x == 'J.K. Skinner' ~ 'J.L. Skinner',
          x == 'Jahymr Gibbs' ~ 'Jahmyr Gibbs',
          x == "O'Cyrus Torrance" ~ "O'Cyrus Torrence",
          x == 'Julian Brents' ~ 'Julius Brents',
          x == 'Ty Scott' ~ 'Tyrone Scott',
          x == 'Garrett Greenfield' ~ 'Garret Greenfield',
          x == 'Henry Bainvalu' ~ 'Henry Bainivalu',
          x == 'Quinten Johnston' ~ 'Quentin Johnston',
          x == 'Isiah Foskey' ~ 'Isaiah Foskey',
          x == 'Habakuk Baldonado' ~ 'Habakkuk Baldonado',
          x == 'Yaya Diaby' ~ 'YaYa Diaby',
          x == 'Rezjohn Wright' ~ 'Rejzohn Wright',
          x == 'Nathaniel Tank Dell' ~ 'Nathaniel Dell',
          x == "Tre'Vius Hedges-Tomlinson" ~ "Tre'Vius Hodges-Tomlinson",
          x == 'Peter Skloronski' ~ 'Peter Skoronski',
          x == 'Gervin Dexter' ~ 'Gervon Dexter',
          x == 'Bryan Branch' ~ 'Brian Branch',
          x == 'Jaxon Smithnjigba' ~ 'Jaxon Smith-Njigba',
          x == "O'cyrus Torrance" ~ "O'Cyrus Torrence",
          x == 'Joe Tippman' ~ 'Joe Tippmann',
          x == 'Zach Kuntz' ~ 'Zack Kuntz',
          x == 'Ereck Ali' ~ 'Erick All',
          x == 'Ereck All' ~ 'Erick All',
          x == 'Tomi Adebawore' ~ 'Adetomiwa Adebawore',
          x == 'Olu Fashanu' ~ 'Olumuyiwa Fashanu',
          x == 'Sikai Ika' ~ 'Siaki Ika',
          x ==  'Jalen Moreno-Cropper' ~ 'Jalen Cropper',
          x == 'Brant Kuite' ~ 'Brant Kuithe',
          x == 'Jalen McMillian' ~ 'Jalen McMillan',
          x %in% c('Julius Weschof', 'Julius Wischof') ~ 'Julius Welschof',
          x == 'Shaka Hayward' ~ 'Shaka Heyward',
          x == "Tre'vius Hodges" ~ "Tre'Vius Hodges-Tomlinson",
          x == 'Jaelyn Dyncan' ~ 'Jaelyn Duncan',
          x == 'Peter Skoranski' ~ 'Peter Skoronski',
          x == 'Felix Andudike-Ezomah' ~ 'Felix Anudike-Uzomah',
          x == 'B.J.Ojulari' ~ 'B.J. Ojulari',
          x == 'Bryan Bresse' ~ 'Bryan Bresee',
          x == 'Beejay Williamson' ~ 'BeeJay Williamson',
          x == 'Habukkuk Baldanad' ~ 'Habakkuk Baldonado',
          x == 'Andrew Voorhees' ~ 'Andrew Vorhees',
          x == 'Felix Anduike-Uzomah' ~ 'Felix Anudike-Uzomah',
          x == 'Jalen McMcillian' ~ 'Jalen McMillan',
          x == 'Jalen Jones' ~ 'Jaylon Jones',
          x == 'Tanner McKie' ~ 'Tanner McKee',
          x == 'MIchael Mayer' ~ 'Michael Mayer',
          x == 'Julius Wischof' ~ 'Julius Welschof',
          x == 'Villami Fehoko' ~ 'Viliami Fehoko',
          x == 'Cam Brown' ~ 'Cameron Brown',
          x == 'Devone Achane' ~ 'Devon Achane',
          x == 'Cooper Bebe' ~ 'Cooper Beebe',
          x == 'Demarco Hellams' ~ 'DeMarcco Hellams',
          x == 'Habukkuk Baldanado' ~ 'Habakkuk Baldonado',
          x == 'Keelee Ringo' ~ 'Kelee Ringo',
          x == 'Jarret Patterson' ~ 'Jarrett Patterson',
          x == 'C.J Stroud' ~ 'C.J. Stroud',
          x == "Ja'von Hicks" ~ "Ja'Von Hicks",
          x == 'C.j. Stroud' ~ 'C.J. Stroud',
          x == 'Kevon Slovis' ~ 'Kedon Slovis',
          x == 'Jaxson Smith-Njagba' ~ 'Jaxon Smith-Njigba',
          x == 'Jaxon Smith-Njiba' ~ 'Jaxon Smith-Njigba',
          x == 'Derrick Hall' ~ 'Derick Hall',
          x == 'Jaxon Smith' ~ 'Jaxon Smith-Njigba',
          x == 'Will Rodgers' ~ 'Will Rogers',
          x == 'Tui Tuipulotu' ~ 'Tuli Tuipulotu',
          x == "Tre'vius Hodges-Tomlinson" ~ "Tre'Vius Hodges-Tomlinson",
          x == 'Habakkuk Baldanado' ~ 'Habakkuk Baldonado',
          x == 'Trent Simpson' ~ 'Trenton Simpson',
          x == "Henry To' To'o" ~ "Henry To'o To'o",
          x == 'Cam Ward' ~ 'Cameron Ward',
          x == "Mohamed Diabate" ~ "Mohamoud Diabate",
          x == "Lukas Van" ~ "Lukas Van Ness",
          x == "Nesta Jade" ~ "Nesta Jade Silvera",
          x == "Sedrick Van" ~ "Sedrick Van Pran",
          x == "Jacquelin Roy" ~ "Jaquelin Roy",
          x == 'Kayson Boutte' ~ 'Kayshon Boutte',
          x == 'C.J Stroud' ~ 'C.J. Stroud',
          x == 'Pete Skoronski' ~ 'Peter Skoronski',
          x == 'Luke Wypier' ~ 'Luke Wypler',
          x == 'Keytoan Thompson' ~ 'Keytaon Thompson',
          x == 'Blake Freelund' ~ 'Blake Freeland',
          x == 'Justin Skinner' ~ 'J.L. Skinner',
          x == 'will Anderson' ~ 'Will Anderson',
          x == 'Sedrick Van Pan' ~ 'Sedrick Van Pran',
          x == 'Cj Stroud' ~ 'C.J. Stroud',
          x == 'Elias Ricks' ~ 'Eli Ricks',
          x == 'will Levis' ~ 'Will Levis',
          # x == 'Jaret Patterson' ~ 'Jarrett Patterson',
          x == 'Fabian Lovett' ~ 'Fabien Lovett',
          x == 'Bj Ojulari' ~ 'B.J. Ojulari',
          x == 'Van Dyke' ~ 'Tyler Van Dyke',
          x == 'Tanner Mckee' ~ 'Tanner McKee',
          x == 'Zion Tupuola-Fetu' ~ 'Zion Tupuola-Fetui',
          x == 'Bryan Breese' ~ 'Bryan Bresee',
          x == 'Bryan Brese' ~ 'Bryan Bresee',
          x == 'Bjian Robinson' ~ 'Bijan Robinson',
          x == 'Brian Bresee' ~ 'Bryan Bresee',
          x == 'Latham Ransom' ~ 'Lathan Ransom',
          x == 'Eli Hicks' ~ 'Eli Ricks',
          x == 'Kalee Ringo' ~ 'Kelee Ringo',
          x == 'Quentin Johnson' ~ 'Quentin Johnston',
          x == 'Habukkuk Baldonado' ~ 'Habakkuk Baldonado',
          x == 'Tyler Van' ~ 'Tyler Van Dyke',
          x == 'D.J. Uiagaelei' ~ 'D.J. Uiagalelei',
          x == 'Derek Hall' ~ 'Derick Hall',
          x == 'B.J. Olulari' ~ 'B.J. Ojulari',
          x == 'Jaxson Smith-Njigba' ~ 'Jaxon Smith-Njigba',
          x == 'Michael Meyer' ~ 'Michael Mayer',
          x == "De'Von Achane" ~ "Devon Achane",
          x == 'JuJu Brents' ~ "Julius Brents",
          x == 'Robert Haskins' ~ 'Bobby Haskins',
          x == 'Gabriel Houy' ~ 'Gabe Houy',
          x == 'A.J. Uzodinma' ~ 'Amechi Uzodinma',
          x == 'Ace Eley' ~ 'Ayinde Eley',
          x == 'Phil Paea' ~ 'Phillip Paea',
          x == 'Chris Brooks' ~ 'Christopher Brooks',
          TRUE ~ x
        ),
        ifelse(
          year == 2022,
          case_when(
            x == "Ikem Ekwomu" ~ 'Ikem Ekwonu',
            x == 'MarQuan McCall' ~ 'Marquan McCall',
            x == 'Charlie Cross' ~ 'Charles Cross',
            x == 'Otito Uwazurike' ~ 'Otito Ogbonnia',
            x == 'Kolby Harvell' ~ 'Kolby Harvell-Peel',
            x == 'Jaylen Watkins' ~ 'Jaylen Watson',
            x == 'Keynon Green' ~ 'Kenyon Green',
            x == 'Brian Asomoah' ~ 'Brian Asamoah',
            x == 'Joah Paschal' ~ 'Josh Paschal',
            x == 'Charlston Rambo' ~ 'Charleston Rambo',
            x == 'Isaac Taylor' ~ 'Isaac Taylor-Stuart',
            x == 'Dan Bellinger' ~ 'Daniel Bellinger',
            x == 'Jaylen Armour' ~ 'Jalyn Armour-Davis',
            x == 'Danny Graham' ~ 'Danny Gray',
            x == 'Matt Corrall' ~ 'Matt Corral',
            x == 'Evan Neil' ~ 'Evan Neal',
            x == 'WanDale Robinson' ~ "Wan'Dale Robinson",
            x == "DaiJean Dixon" ~ "Dai'Jean Dixon",
            x == 'Zach Thomas' ~ 'Zachary Thomas',
            x == "Tre' Williams" ~ "Tre Williams",
            x == 'Mike Woods' ~ 'Michael Woods',
            x == 'DeMarcus Fields' ~ 'Damarcus Fields',
            x == 'Roger Mccreary' ~ 'Roger McCreary',
            x == 'Trey Mcbride' ~ 'Trey McBride',
            x == 'Zyon Mccollum' ~ 'Zyon McCollum',
            x == 'Demarvin Leal' ~ 'DeMarvin Leal',
            x == 'Trent Mcduffie' ~ 'Trent McDuffie',
            x == 'Devin Llyod' ~ 'Devin Lloyd',
            x == 'Jaylen Washington' ~ 'Jaylen Watson',
            x == 'Demarri Mathis' ~ 'Damarri Mathis',
            x == 'Mile Harley' ~ 'Mike Harley',
            x == 'Josh Williams - Fayetteville State' ~ 'Joshua Williams',
            x == 'OL Ickey' ~ 'Ikem Ekwonu',
            x == 'CB Zyon' ~ 'Zyon McCollum',
            x == 'Trey Andersen' ~ 'Troy Andersen',
            # x == 'Isiah Pacheco' ~ 'Isaih Pacheco',
            x == 'Joshua Jobe' ~ 'Josh Jobe',
            x == 'Davontavean Martin' ~ 'Tay Martin',
            x == 'Devontae Wyatt' ~ 'Devonte Wyatt',
            x == 'Cam Taylor' ~ 'Cam Taylor-Britt',
            x == 'Dohnavon West' ~ 'Dohnovan West',
            x == 'Samuel Webb' ~ 'Sam Webb',
            x == 'Jalen Wydemyer' ~ 'Jalen Wydermyer',
            x == 'Tyquan Thronton' ~ 'Tyquan Thornton',
            x == 'Ikem Ekwnou' ~ 'Ikem Ekwonu',
            x == 'Mailk Wilis' ~ 'Malik Willis',
            x == 'Devontate Wyatt' ~ 'Devonte Wyatt',
            x == 'M.J. Emerson' ~ 'Martin Emerson',
            x == 'Kenny Walker' ~ 'Kenneth Walker',
            x == 'Joshua Paschal' ~ 'Josh Paschal',
            x == 'Matt Henninhsen' ~ 'Matt Henningsen',
            x == 'Verne McKinley' ~ 'Verone McKinley',
            x == 'Verone Mckinley' ~ 'Verone McKinley',
            x == 'Cole Rutner' ~ 'Cole Turner',
            x == 'Chig Okonkwo' ~ 'Chigoziem Okonkwo',
            x == 'Aiden Hutchinson' ~ 'Aidan Hutchinson',
            x == "Amare' Barno" ~ 'Amare Barno',
            x == 'Ike Ekwonu' ~ 'Ikem Ekwonu',
            x == 'Kayon Thibodeaux' ~ 'Kayvon Thibodeaux',
            x == 'Kavon Thibodeaux' ~ 'Kayvon Thibodeaux',
            x == 'Kayvon Thibodaux' ~ 'Kayvon Thibodeaux',
            x == 'David Ojobo' ~ 'David Ojabo',
            x == 'Spencer Buford' ~ 'Spencer Burford',
            x == 'Phil Mathis' ~ 'Phidarian Mathis',
            x == 'Ken Walker' ~ 'Kenneth Walker',
            x == 'Aidan Hutchison' ~ 'Aidan Hutchinson',
            x == 'Eric Ezukanma' ~ 'Erik Ezukanma',
            x == 'Demarvin Leal' ~ 'DeMarvin Leal',
            x == "Isaiah Pola-Moa" ~ 'Isaiah Pola-Mao',
            x == 'Bam Knight' ~ 'Zonovan Knight',
            x == 'Zion Tupula' ~ 'Zion Tupuola-Fetui',
            x == 'George Karalaftis' ~ 'George Karlaftis',
            x == 'Zyon McCullom' ~ 'Zyon McCollum',
            x == 'Chigoziem Okokowo' ~ 'Chigoziem Okonkowo',
            x == 'David Obajo' ~ 'David Ojabo',
            x == 'Trent Mc' ~ 'Trent McDuffie',
            x == 'Roger Mc' ~ 'Roger McCreary',
            x == 'Trey Mc' ~ 'Trey McBride',
            x == 'Tre McBride' ~ 'Trey McBride',
            x == 'Tre Mcbride' ~ 'Trey McBride',
            x == 'Devon Lloyd' ~ 'Devin Lloyd',
            x == 'Jamree Salyer' ~ 'Jamaree Salyer',
            x == 'Alex Lindstrom' ~ 'Alec Lindstrom',
            x == 'Deangelo Malone' ~ 'DeAngelo Malone',
            x == 'Verone Mc' ~ 'Verone McKinley',
            x == 'Arnold Ebeketie' ~ 'Arnold Ebiketie',
            x == 'Garret Wilson' ~ 'Garrett Wilson',
            x == 'Zyon Mc' ~ 'Zyon McCollum',
            x == 'Marcus Mc' ~ 'Marcus McKethan',
            x == 'Javion Helligh' ~ 'Jaivon Heiligh',
            x == 'Tariq Castro' ~ 'Tariq Castro-Fields',
            x == 'Jojo Domann' ~ 'JoJo Domann',
            x == 'JoJo Doman' ~ 'JoJo Domann',
            x == 'Decobie Durant' ~ 'Cobie Durant',
            # x == 'Jake Hanson' ~ 'Jake Hansen',
            x == 'Derek Stingely' ~ 'Derek Stingley',
            x == 'Noah Eliss' ~ 'Noah Elliss',
            x == "Steward Reese" ~ "Stewart Reese",
            x == 'Cordell Volston' ~ 'Cordell Volson',
            x == 'Sean Ryhan' ~ 'Sean Rhyan',
            x == 'Sean Rhyman' ~ 'Sean Rhyan',
            x == 'Steward Reese' ~ 'Stewart Reese',
            x == 'Jalen Wydermyder' ~ 'Jalen Wydermyer',
            x == 'DaMarri Mathis' ~ 'Damarri Mathis',
            x == 'Tyler Linerbaum' ~ "Tyler Linderbaum",
            x == 'Desmond Ritter' ~ 'Desmond Ridder',
            x == 'Joey Blunt' ~ 'Joey Blount',
            x == 'Derek Deese' ~ 'Derrick Deese',
            x == 'Skyler Thompson' ~ 'Skylar Thompson',
            x == 'Noah Ellis' ~ 'Noah Elliss',
            x == 'Otto Ogbonnia' ~ 'Otito Ogbonnia',
            x == 'Otito Obgonnia' ~ 'Otito Ogbonnia',
            x == 'Sean Ryan' ~ 'Sean Rhyan',
            x == 'Nick Zakelijk' ~ 'Nick Zakelj',
            x == 'Hassan Hankins' ~ 'Hassan Haskins',
            x == 'Barnhard Raimann' ~ 'Bernhard Raimann',
            x == 'Yusef Corker' ~ 'Yusuf Corker',
            x == 'Jaquari Roberson' ~ 'Jaquarii Roberson',
            x == 'Kellen Deisch' ~ 'Kellen Diesch',
            x == "Ja'Quan McMillan" ~ "Ja'Quan McMillian",
            x == 'Trylon Burks' ~ 'Treylon Burks',
            x == 'Lujii Vilain' ~ 'Luiji Vilain',
            x == 'Tarquios Tisdale' ~ 'Tariqious Tisdale',
            x == 'Ty Allegier' ~ 'Tyler Allgeier',
            x == 'Veteran Lowe' ~ 'Vederian Lowe',
            x == 'Reggie Robertson' ~ 'Reggie Roberson',
            x == 'Eric Williams' ~ 'Eric Johnson',
            x == 'Daron Bland' ~ 'DaRon Bland',
            x == 'Chris Oladuokun' ~ 'Chris Oladokun',
            x == "Wan'dale Robinson" ~ "Wan'Dale Robinson",
            x == 'Ezezi Otomewo' ~ 'Esezi Otomewo',
            x == 'Shemari Jones' ~ 'Shermari Jones',
            x == 'Darian Butler' ~ 'Darien Butler',
            x == 'Yusur Corker' ~ 'Yusuf Corker',
            x == 'Quan White' ~ 'ZaQuandre White',
            x == 'Kayvon Thibodaeux' ~ 'Kayvon Thibodeaux',
            x == 'Kayvon Thibodeau' ~ 'Kayvon Thibodeaux',
            x == 'Ty Davis-Price' ~ 'Tyrion Davis-Price',
            x == "Ikem 'Ickey'" ~ "Ikem Ekwonu",
            x == 'Sauce Garnder' ~ "Ahmad Gardner",
            x == 'Tyland Humphrey' ~ 'Tayland Humphrey',
            x == 'Kaylon Barnes' ~ 'Kalon Barnes',
            x == "Bai'Jean Dixon" ~ "Dai'Jean Dixon",
            x == 'Jayden Peevyn' ~ 'Jayden Peevy',
            x == 'Tycenn Anderson' ~ 'Tycen Anderson',
            x == 'Isaiah Tomas' ~ 'Isaiah Thomas',
            x == 'Jaquon Brisker' ~ 'Jaquan Brisker',
            x == "Ahma 'Sauce'" ~ "Ahmad Gardner",
            x == 'George Karlafitis' ~ 'George Karlaftis',
            x == 'Tariq Caprenter' ~ 'Tariq Carpenter',
            x == 'Darian Kennard' ~ 'Darian Kinnard',
            x == 'Jalen Caralon' ~ 'Jalen Catalon',
            x == 'Aiden Hutchinson' ~ 'Aidan Hutchinson',
            x == 'Kayvon Thiboedaux' ~ 'Kayvon Thibodeaux',
            x == 'Arnold Ebitekie' ~ 'Arnold Ebiketie',
            x == 'Arnold Ebiteke' ~ 'Arnold Ebiketie',
            x == "J'Atyre Carter" ~ "Ja'Tyre Carter",
            x == 'Marquese Bell' ~ 'Markquese Bell',
            x == 'Channing Tindale' ~ 'Channing Tindall',
            x == 'John Michael' ~ 'John Michael Schmitz',
            x == 'Josh Job' ~ 'Josh Jobe',
            x == 'Khalil Shakur' ~ 'Khalil Shakir',
            x == 'Tariq Wollen' ~ 'Tariq Woolen',
            x == "EDGE Cameron" ~ "Cameron Thomas",
            x == 'OL Ikem' ~ 'Ikem Ekwonu',
            x == 'WR Christian' ~ 'Christian Watson',
            x == 'Ikem Ekwonmu' ~ 'Ikem Ekwonu',
            x == 'Andrew Steuber' ~ 'Andrew Stueber',
            x == 'Devonte Watt' ~ 'Devonte Wyatt',
            x == 'Dohnavan West' ~ 'Dohnovan West',
            x == 'Kaiir Elamn' ~ 'Kaiir Elam',
            x == 'Parrion Winfrey' ~ 'Perrion Winfrey',
            x == 'Nick Petit-Frere' ~ 'Nicholas Petit-Frere',
            x == 'Ickem Ekwonu' ~ 'Ikem Ekwonu',
            x == 'David Ajabo' ~ 'David Ojabo',
            x == 'Tyler Linderbau' ~ 'Tyler Linderbaum',
            x == 'Myjai Sanderes' ~ 'Myjai Sanders',
            x == 'Josh Williams' ~ 'Joshua Williams',
            x == "Joshua Ross" ~ 'Josh Ross',
            x == 'Michael Agude' ~ 'Michael Agude',
            x == 'Ickey Ekwonu' ~ 'Ikem Ekwonu',
            x == 'Myjaj Sanders' ~ 'Myjai Sanders',
            x == 'Deangelo Malone' ~ 'DeAngelo Malone',
            x == 'Troy Anderson' ~ 'Troy Andersen',
            x == 'Jaxon Kirkland' ~ 'Jaxson Kirkland',
            x == "Kaair Elam" ~ 'Kaiir Elam',
            x == 'Jahan Doston' ~ 'Jahan Dotson',
            x == 'Jahleel Bilingsley' ~ 'Jahleel Billingsley',
            x == "Jalen Wynermyer" ~ "Jalen Wydermyer",
            x == 'Trent Mcduffie' ~ 'Trent McDuffie',
            x == 'Bryan Asamoah' ~ 'Brian Asamoah',
            x == 'Darian Beavers' ~ 'Darrian Beavers',
            x == 'Jayln Armour-Davis' ~ 'Jalyn Armour-Davis',
            x == 'Nick Bonnito' ~ 'Nik Bonnito',
            x == 'Nik Bonnitto' ~ 'Nik Bonnito',
            x == 'Malcolm Rodriquez' ~ 'Malcolm Rodriguez',
            x == "Henry To'oTo'o" ~ "Henry To'o To'o",
            x == 'Cameron Taylor-Britt' ~ 'Cam Taylor-Britt',
            x == "Da'Ron Payne" ~ 'Daron Payne',
            x == 'Rodger McCreary' ~ 'Roger McCreary',
            x == 'Joshua Jackson' ~ 'Josh Jackson',
            x == 'Wil McDonald' ~ 'Will McDonald',
            x == 'Sean Bunting' ~ 'Sean Murphy-Bunting',
            x == 'Lamical Perine' ~ "La'Mical Perine",
            x == 'Roger Mcreary' ~ 'Roger McCreary',
            x == 'Jake Carmarda' ~ 'Jake Camarda',
            x == 'Chris Allen' ~ 'Christopher Allen',
            x == 'Thayor Munford' ~ 'Thayer Munford',
            # x == "Malik Harris" ~ "Malik Willis",
            x == 'Gary Dulcich' ~ 'Greg Dulcich',
            x == 'Arnold Ebikete' ~ 'Arnold Ebiketie',
            x == "Ahmad 'Sauce'" ~ "Ahmad Gardner",
            x == 'Jermaine Walker' ~ 'Jermaine Waller',
            x == 'Zaquandre White' ~ 'ZaQuandre White',
            x == "Za'Quandre White" ~ 'ZaQuandre White',
            x == 'CorDale Flott' ~ 'Cordale Flott',
            x == 'Nicholes Petit-Frere' ~ 'Nicholas Petit-Frere',
            x == 'James Salski' ~ 'James Skalski',
            x == 'Obbina Eze' ~ 'Obinna Eze',
            x == 'Zach Carter' ~ 'Zachary Carter',
            x == 'Cam Thomas' ~ 'Cameron Thomas',
            x == 'Dax Hill' ~ 'Daxton Hill',
            x == 'Kuoy Deng' ~ 'Kuony Deng',
            x == 'Ikem Okwonu' ~ 'Ikem Ekwonu',
            x == 'Keontay Ingram' ~  'Keaontay Ingram',
            x == 'Tariquios Tisdale' ~ 'Tariqious Tisdale',
            x == "D'vonte Price" ~ "D'Vonte Price",
            x == 'Ahmad Sauce' ~ 'Ahmad Gardner',
            x == 'Nicholas Petit' ~ 'Nicholas Petit-Frere',
            x == 'Ahmad âSauceâ Gardner' ~ 'Ahmad Gardner',
            x == 'Sauce Gardner' ~ 'Ahmad Gardner',
            x == 'Ahmad Sauce Gardner' ~ 'Ahmad Gardner',
            x == 'Ahmad âSauceâ Gardner' ~ 'Ahmad Gardner',
            x == "Ahmad 'Sauce' Gardner" ~ 'Ahmad Gardner',
            x == 'Ahmad "Sauce" Gardner' ~ 'Ahmad Gardner',
            x == 'Christopher Hinton' ~ 'Chris Hinton',
            x == 'Big Kat' ~ 'Big Kat Bryant',
            x == "DeAngeo Malone" ~ "DeAngelo Malone",
            x == 'Derek Stingley CB' ~ 'Derek Stingley',
            x == 'Christopher Rodriguez' ~ 'Chris Rodriguez',
            x == "George Karlafits" ~ 'George Karlaftis',
            x == "Kair Elam" ~ "Kaiir Elam",
            x == "Nesta Jade" ~ "Nesta Jade Silvera",
            x == "Darian Dalcourt" ~ "Darrian Dalcourt",
            x == "Darnell Jeffries" ~ "Darnell Jefferies",
            x == "Justin Egoigbe" ~ "Justin Eboigbe",
            x == "J.T. Daniel" ~ "J.T. Daniels",
            x == 'Thayor Munford' ~ "Thayer Munford",
            x == "Demarvin Leal" ~ "DeMarvin Leal",
            x == "DeMarvin Neal" ~ "DeMarvin Leal",
            x == 'Leon Chenal' ~ 'Leo Chenal',
            x == "Jaquarii Robertson" ~ "Jaquarii Roberson",
            x == 'Cameron Jurgens' ~ 'Cam Jurgens',
            x == 'Jojo Domann' ~ 'Jojo Domann',
            x == 'David Ojaba' ~ 'David Ojabo',
            x == 'Jaylen Cropper' ~ 'Jalen Cropper',
            x == "Isacc Slade-Matautia" ~ 'Isaac Slade-Matautia',
            x == "Henry To'o To'o" ~ "Henry To'o To'o",
            x == "Tre'vius Hodges-Tomlinson" ~ "Tre'Vius Hodges-Tomlinson",
            x == "Tre'Vious Hodges-Tomlinson" ~ "Tre'Vius Hodges-Tomlinson",
            x == "Henry To'o-To'o" ~ "Henry To'o To'o",
            x == "Henry To'oto'o" ~ "Henry To'o To'o",
            x == "Henry To'oto'o" ~ "Henry To'o To'o",
            x == "Henry To'oto'o" ~ "Henry To'o To'o",
            x == "Henry To'oto'o" ~ "Henry To'o To'o",
            x == "Henry To'o" ~ "Henry To'o To'o",
            x == 'ROGER MCCREARY' ~ 'Roger McCreary',
            x == 'Cade Otten' ~ 'Cade Otton',
            x == 'Roger Mccreary' ~ 'Roger McCreary',
            x == 'Demarvion Overshown' ~ 'DeMarvion Overshown',
            x == "Demarvioun Overshown" ~ 'DeMarvion Overshown',
            x == "Terrell Bernard" ~ "Terrel Bernard",
            x == 'Koby Harvell-Peel' ~ 'Kolby Harvell-Peel',
            x == 'Nikolas Bonitto' ~ 'Nik Bonitto',
            x == 'Nick Bonitto' ~ 'Nik Bonitto',
            x == "Damari Mathis" ~ 'Damarri Mathis',
            x == 'Nik Bonnito' ~ 'Nik Bonitto',
            x == 'J.J. Enagbare' ~ 'Kingsley Enagbare',
            x == "Sam La Porta" ~ "Sam LaPorta",
            x == 'Kingsley Engabare' ~ 'Kingsley Enagbare',
            x == 'Michael Clemons' ~ 'Micheal Clemons',
            x == "AmarÃ© Barno" ~ "Amare Burno",
            x == 'AmarÃÂ© Barno' ~ 'Amare Barno',
            x == "Matt Coral" ~ "Matt Corral",
            x == "Obinna Eza" ~ "Obinna Eze",
            x == 'DeVonte Wyatt' ~ 'Devonte Wyatt',
            x == 'Bernard Raimann' ~ 'Bernhard Raimann',
            x == "Ikem Ekonwu" ~ "Ikem Ekwonu",
            x == "Phil Jurkovic" ~ 'Phil Jurkovec',
            x == "Tyler Lindenbaum" ~ "Tyler Linderbaum",
            x == 'Matt Bedford' ~ 'Matthew Bedford',
            x == 'Micale Cunningham' ~ 'Malik Cunningham',
            x == 'Zion Typyola-Fetui' ~ 'Zion Tupuola-Fetui',
            x == 'Bernhard Raimman' ~ 'Bernhard Raimann',
            x == 'Al Blade' ~ 'Al Blades',
            x == 'Kyu Blu' ~ 'Kyu Blu Kelly',
            x == "Liam Shannahan" ~ "Liam Shanahan",
            x == 'Darrian Kinnard' ~ 'Darian Kinnard',
            x == "Luke Wattenburg" ~ "Luke Wattenberg",
            x == 'Trey McBridge' ~ 'Trey McBride',
            x == 'Marquis Haynes' ~ 'Marquis Hayes',
            x == 'Matthew Beford' ~ 'Matthew Bedford',
            x == 'Rasheed Waker' ~ 'Rasheed Walker',
            x == "Kinglsey Enagbare" ~ "Kingsley Enagbare",
            x == "Kingsley Engbare" ~ "Kingsley Enagbare",
            x == "Derrion Kendrick" ~ "Derion Kendrick",
            x == "Myaji Sanders" ~ "Myjai Sanders",
            x == 'Tyler Lindebaum' ~ 'Tyler Linderbaum',
            x == 'Mike Tafua' ~ 'Mika Tafua',
            x == "Ryan Van" ~ 'Ryan Van Demark',
            x == 'Demarvioun Overshown' ~ 'DeMarvion Overshown',
            x == 'Eyabi Okie' ~ 'Eyabi Okie-Anoma',
            x == 'Ezekiel M. Daure' ~ 'Michael Daure',
            x == 'Jeff Gunter' ~ 'Jeffrey Gunter',
            x == "Cor'Dale Flott" ~ "Cordale Flott",
            x == 'Dre Miller' ~ 'Andre Miller',
            x == "Xavier Newman" ~ "Xavier Newman-Johnson",
            x == 'Josh Onujiogu' ~ 'Joshua Onujiogu',
            x == 'Kam Butler' ~ "Kameron Butler",
            x == 'A.J. Uzodinma' ~ 'Amechi Uzodinma',
            TRUE ~ x
          ),
          ifelse(
            year == 2021,
            case_when(
              x == 'Benjamin St.' ~ 'Benjamin St-Juste',
              x == 'Boogie Basham' ~ 'Carlos Basham',
              x == 'Cmaeron McGrone' ~ 'Cameron McGrone',
              x == 'Justin HIlliard' ~ 'Justin Hilliard',
              x == 'Jonathan Cooper' ~ 'Jonathon Cooper',
              x == 'Josh Imatorbhbhe' ~ 'Josh Imatorbhebhe',
              x == 'Talanoa Hufanaga' ~ 'Talanoa Hufanga',
              x == 'Christan Darrisaw' ~ 'Christian Darrisaw',
              # x == 'Armani Rogers' ~ 'Amani Rodgers',
              x == 'Deommodre Lenoir' ~ 'Deommodore Lenoir',
              x == "Tre'von Moehrig" ~ 'Trevon Moehrig',
              x == "Shemar Jean Charles" ~ 'Shemar Jean-Charles',
              x == 'Mike Stratchan' ~ 'Mike Strachan',
              x == 'Dillon Raduntz' ~ 'Dillon Radunz',
              x == "Cam McGrone" ~ 'Cameron McGrone',
              x == "Tevon Grimes" ~ "Trevon Grimes",
              x == "D'wayne Eskridge" ~ "D'Wayne Eskridge",
              x == 'Najeh Harris' ~ 'Najee Harris',
              x == "JayCee Horn" ~ "Jaycee Horn",
              x == 'Racy McMath' ~ 'Racey McMath',
              x == 'Cam Sample' ~ 'Cameron Sample',
              x == "Micha Parsons" ~ "Micah Parsons",
              x == 'Stone Forsyth' ~ 'Stone Forsythe',
              x == 'Richard Lecounte' ~ 'Richard LeCounte',
              x == 'Rhomandre Stevenson' ~ 'Rhamondre Stevenson',
              x == "Christian Warrisaw" ~ "Christian Darrisaw",
              x == 'Wyatt Huber' ~ 'Wyatt Hubert',
              x == "Travis Etinne" ~ "Travis Etienne",
              x == "Christian Darrishaw" ~ "Christian Darrisaw",
              x == "Peyton Turner" ~ "Payton Turner",
              x == "Victor Dimukeji" ~ "Victor Dimukeje",
              x == 'Jack Morrissey' ~ 'Jimmy Morrissey',
              x == "Ra'Shawn Slater" ~ "Rashawn Slater",
              x == "Darrick Forest" ~ "Darrick Forrest",
              x == "Penei Swell" ~ "Penei Sewell",
              x == "Kenneeth Gainwell" ~ "Kenneth Gainwell",
              x == "Kevin Joseph" ~ "Kelvin Joseph",
              x == "Tre Smith" ~ "Trey Smith",
              x == "Deyo Odeyingbo" ~ "Dayo Odeyingbo",
              x == "Christian Darrishaw" ~ "Christian Darrisaw",
              x == "Joseph Assai" ~ "Joseph Ossai",
              x == "Brenden James" ~ "Brenden Jaimes",
              x == "Hamsah Nasrildeen" ~ "Hamsah Nasirildeen",
              x == "Israel Mukuwamu" ~ "Israel Mukuamu",
              x == "Jasmin Davis" ~ "Jamin Davis",
              x == "Osa Odighizua" ~ 'Osa Odighizuwa',
              x == "Daelan Hayes" ~ "Daelin Hayes",
              x == "Adetokkunbo Ogundeji" ~ "Adetokunbo Ogundeji",
              x == "Zach McPhearson" ~ "Zech McPhearson",
              x == "Alijah Veer Tucker" ~ "Alijah Vera-Tucker",
              x == "Tyrie Gillespie" ~ "Tyree Gillespie",
              x == "Dez Fitpatrick" ~ "Dez Fitzpatrick",
              x == 'Trevor Moehrig' ~ 'Trevon Moehrig',
              x == "Kene Nwangnu" ~ "Kene Nwangwu",
              x == "Levi Onruzuike" ~ "Levi Onwuzurike",
              x == "Ar'darius Washington" ~ "Ar'Darius Washington",
              x == 'Josh Kaindoh' ~ 'Joshua Kaindoh',
              x == 'Tederrall Slaton' ~ 'Tedarrell Slaton',
              x == 'Jeremiah Owusu Koramoah' ~ 'Jeremiah Owusu-Koramoah',
              x == "D'Wayne Eskiridge" ~ "D'Wayne Eskridge",
              x == 'Nashon Wright' ~ 'Nahshon Wright',
              x == "Ka'Darius Toney" ~ "Kadarius Toney",
              x == "Javante Williams" ~ "Javonte Williams",
              x == 'Michael Stratchan' ~ 'Mike Stratchan',
              x == 'Alijah Vera Tucker' ~ 'Alijah-Vera Tucker',
              x == "Oga Odighizuwa" ~ "Osa Odighizuwa",
              x == 'Erick Stokes' ~ 'Eric Stokes',
              x == 'Benjamin St. Jude' ~ 'Benjamin St-Juste',
              x == 'Michael Strachan' ~ 'Mike Strachan',
              x == 'Jabrill Cox' ~ 'Jabril Cox',
              x == 'Kwity Payne' ~ 'Kwity Paye',
              x == 'Quinton Morris' ~ 'Quintin Morris',
              x == 'Rashed Hamilcar' ~ 'Hamilcar Rashed',
              x == 'Brandon Echols' ~ 'Brandin Echols',
              x == 'Trevon Moehig' ~ 'Trevon Moehrig',
              x == 'Cam Bynum' ~ 'Camryn Bynum',
              x == 'Dayo Odenyigbo' ~ 'Dayo Odeyingbo',
              x == 'Ellerson Smith' ~ 'Elerson Smith',
              x == 'Osirius Mitchell' ~ 'Osirus Mitchell',
              x == 'Earnest Jones' ~ 'Ernest Jones',
              # x == 'Jarret Patterson' ~ 'Jaret Patterson',
              x == 'Johnathan Marshall' ~ 'Jonathan Marshall',
              x == 'Adentokunbo Ogundeji' ~ 'Adetokunbo Ogundeji',
              x == 'DeVonte Smith' ~ 'DeVonta Smith',
              x == 'Isreal Mukuamu' ~ 'Israel Mukuamu',
              x == 'Dillion Radunz' ~ 'Dillon Radunz',
              x == 'Quinn Menerz' ~ 'Quinn Meinerz',
              x == 'Rhiamondre Stevenson' ~ 'Rhamondre Stevenson',
              x == 'Kyle Granson' ~ 'Kylen Granson',
              x == 'Kadius Toney' ~ 'Kadarius Toney',
              x == 'Caden Stearns' ~ 'Caden Sterns',
              x == 'Justin Holland' ~ 'Jevon Holland',
              x == 'Javonte Wililams' ~ 'Javonte Williams',
              x == 'Jeremiah Owusu-Karamoah' ~ 'Jeremiah Owusu-Koramoah',
              x == 'Jalen Twyman' ~ 'Jaylen Twyman',
              x == 'Brendon Stephens' ~ 'Brandon Stephens',
              x == 'Taquon Graham' ~ "Ta'Quon Graham",
              x == 'Pete Wener' ~ 'Pete Werner',
              x == 'Jamis Davis' ~ 'Jamin Davis',
              x == 'Pat Freirmuth' ~ 'Pat Freiermuth',
              x == 'Azezz Ojulari' ~ 'Azeez Ojulari',
              x == 'Kardarius Toney' ~ 'Kadarius Toney',
              x == 'Liam Eichenburg' ~ 'Liam Eichenberg',
              x == 'Gregory Newsome II' ~ 'Gregory Newsome',
              x == 'Gregory Rosseau' ~ 'Gregory Rousseau',
              x == 'Isaiah Loudermilk' ~ 'Isaiahh Loudermilk',
              x == 'Trevin Jenkins' ~ 'Teven Jenkins',
              x == 'Traivs Etienne' ~ 'Travis Etienne',
              x == 'Joe Tyron' ~ 'Joe Tryon-Shoyinka',
              x == 'Pat Freiermuith' ~ 'Pat Freirmuth',
              x == 'Marlon Tuipuloto' ~ 'Marlon Tuipulotu',
              x == 'OT Penei Sewell' ~ "Penei Sewell",
              x == 'Devonta Smith' ~ 'DeVonta Smith',
              x == 'Trevon Moherig' ~ 'Trevon Moehrig',
              x == 'Dayvion Nixon' ~ 'Daviyon Nixon',
              x == 'Jaelen Phillips' ~ 'Jaelan Phillips',
              x == 'JaMarr Chase' ~ "Ja'Marr Chase",
              x == 'Alijiah Vera-Tucker' ~ 'Alijah Vera-Tucker',
              x == "ArâDarius Washington" ~ "Ar'Darius Washington",
              x == 'Trevon Moehrig-Woodward' ~ "Trevon Moehrig",
              x == 'Trevon Moehrig-Woodard' ~ 'Trevon Moehrig',
              x == "Hamlicar Rashed" ~ 'Hamilcar Rashed',
              x == "Ar'Daius Washington" ~ "Ar'Darius Washington",
              x == 'Jaylen Mayfield' ~ "Jalen Mayfield",
              x == "Kenny Gainwell" ~ "Kenneth Gainwell",
              x == 'Azeez Olujari' ~ 'Azeez Ojulari',
              x == 'Cameron Mcgrone' ~ 'Cameron McGrone',
              x == 'Zac Wilson' ~ 'Zach Wilson',
              x == 'Quentin Morris' ~ 'Quintin Morris',
              x == 'Zack Wilson' ~ 'Zach Wilson',
              x == 'Matt Duffy' ~ 'Max Duffy',
              x == 'Carlos Bashman' ~ 'Carlos Basham',
              x == 'Jaelin Phillips' ~ 'Jaelan Phillips',
              x == 'Shane Buchele' ~ 'Shane Buechele',
              x == 'John Marshall' ~ 'Jonathan Marshall',
              x == 'Anthony Scwartz' ~ 'Anthony Schwartz',
              x == 'Richie Grants' ~ 'Richie Grant',
              x == 'Israel Mukawama' ~ 'Israel Mukuamu',
              x == 'Az Ojulari' ~ 'Azeez Ojulari',
              x == 'Levi Onwuzirike' ~ 'Levi Onwuzurike',
              x == 'Stone Forysthe' ~ 'Stone Forsythe',
              x == 'DaVonta Smith' ~ 'DeVonta Smith',
              x == 'Daivyon Nixon' ~ 'Daviyon Nixon',
              x == 'Jose Borregalas' ~ 'Jose Borregales',
              x == 'Adetokungo Ogundeji' ~ 'Adetokunbo Ogundeji',
              x == 'Cory Angeline' ~ 'Cary Angeline',
              x == 'Talanola Hufanga' ~ 'Talanoa Hufanga',
              x == 'Quin Meinerz' ~ 'Quinn Meinerz',
              x == "Ar'Darious Washington" ~ "Ar'Darius Washington",
              x == 'Divine Diablo' ~ 'Divine Deablo',
              x == 'Hamilcar Reshad' ~ 'Hamilcar Rashed',
              x == 'Jaelen Darden' ~ 'Jaelon Darden',
              x == 'Janarius Robinnson' ~ 'Janarius Robinson',
              x == 'Jimmy Morrisey' ~ 'Jimmy Morrissey',
              x == 'Kelvin Jospeh' ~ 'Kelvin Joseph',
              x == 'Payton Tuner' ~ 'Payton Turner',
              x == 'Rhadmondre Stevenson' ~ 'Rhamondre Stevenson',
              x == 'Dayo Odeyingo' ~ 'Dayo Odeyingbo',
              x == 'Joshua Bledsoe' ~ 'Joshuah Bledsoe',
              x == 'Felipe Franks' ~ 'Feleipe Franks',
              x == 'Chaz Surratt' ~ 'Chazz Surratt',
              x == 'Chazz Suratt' ~ 'Chazz Surratt',
              x == 'Christian Baremore' ~ 'Christian Barmore',
              x == 'Dayo Adeyingbo' ~ 'Dayo Odeyingbo',
              x == 'Javon Holland' ~ 'Jevon Holland',
              x == 'Javonte Willilams' ~ 'Javonte Williams',
              x == 'Levi Onwuzrikie' ~ 'Levi Onwuzurike',
              x == 'Tevon Jenkins' ~ 'Teven Jenkins',
              x == 'Dayo Yodeyingbo' ~ 'Dayo Odeyingbo',
              x == 'Jake Anderson' ~ 'Jack Anderson',
              x == 'Michael Menet' ~ 'Michal Menet',
              x == "Ja'Mar Chase" ~ "Ja'Marr Chase",
              x == 'Jeremiah Owosu-Koramoah' ~ 'Jeremiah Owusu-Koramoah',
              x == 'Terrance Marshall' ~ 'Terrace Marshall',
              x == 'Sam Cosmi' ~ 'Samuel Cosmi',
              x == 'Joesph Ossai' ~ 'Joseph Ossai',
              x == 'Alija Vera-Tucker' ~ 'Alijah Vera-Tucker',
              x == 'Alijah Vera' ~ 'Alijah Vera-Tucker',
              x == 'Trevon Moehring-Woodard' ~ 'Trevon Moehrig',
              x == 'Davyion Nixon' ~ 'Daviyon Nixon',
              x == 'Kwitty Paye' ~ 'Kwity Paye',
              x == 'Kwity Page' ~ 'Kwity Paye',
              x == 'Micah Parson' ~ 'Micah Parsons',
              x == 'Marlon Tupulotu' ~ 'Marlon Tuipulotu',
              x == 'Marlon Tuipolotu' ~ 'Marlon Tuipulotu',
              x == 'Pat Friermuth' ~ 'Pat Freiermuth',
              x == 'Marques Stevenson' ~ 'Marquez Stevenson',
              x == 'Chatarius Atwell' ~ 'Tutu Atwell',
              x == 'Ade Ogundeji' ~ 'Adetokunbo Ogundeji',
              x == 'Chubba Hubbard' ~ 'Chuba Hubbard',
              x == 'Thayor Munford' ~ 'Thayer Munford',
              x == 'Garrett Wallow' ~ 'Garret Wallow',
              x == 'Amon-Ra St.' ~ 'Amon-Ra St. Brown',
              x == 'Jacoby Stevens' ~ 'JaCoby Stevens',
              x == 'Trevon MoehrigS' ~ 'Trevon Moehrig',
              x == 'Trevon Moehring' ~ 'Trevon Moehrig',
              x == 'Jackson Carmen' ~ 'Jackson Carman',
              x == 'Rahmondre Stevenson' ~ 'Rhamondre Stevenson',
              x == 'T.J. Slaton' ~ 'Tedarrell Slaton',
              x == 'Tamorrian Terry' ~ 'Tamorrion Terry',
              x == "Tre McKitty" ~ "Tre' McKitty",
              x == "DâWayne Eskridge" ~ "D'Wayne Eskridge",
              x == "DâWayne Eskridge" ~ "D'Wayne Eskridge",
              x == "JaâMarr Chase" ~ "Ja'Marr Chase",
              x == "DâAnte Smith" ~ "D'Ante Smith",
              x == "D'Anre Smith" ~ "D'Ante Smith",
              x == 'Rashad Bateman' ~ 'Rashod Bateman',
              x == 'J. Owusu-Koramoah' ~ 'Jeremiah Owusu-Koramoah',
              x == 'Alijah Vera' ~ 'Alijah Vera-Tucker',
              x == 'Daelen Hayes' ~ 'Daelin Hayes',
              x == 'Kadarious Toney' ~ 'Kadarius Toney',
              x == 'Rodarious Williams' ~ 'Rodarius Williams',
              x == 'Christain Darrisaw' ~ 'Christian Darrisaw',
              x == 'Christain Barmore' ~ 'Christian Barmore',
              x == 'Spencer K Brown' ~ 'Spencer Brown',
              x == 'Spencer K. Brown' ~ 'Spencer Brown',
              x == 'Benjamin St. Juste' ~ 'Benjamin St-Juste',
              x == 'Cole Van' ~ 'Cole Van Lanen',
              x == 'Brady Christiansen' ~ 'Brady Christensen',
              x == 'Tommy Togai' ~ 'Tommy Togiai',
              x == 'Pauson Adebo' ~ 'Paulson Adebo',
              x == "Najee' Harris" ~ 'Najee Harris',
              x == "Sage Surrat" ~ 'Sage Surratt',
              x == "Chazz Surrat" ~ 'Chazz Surratt',
              x == "Dante Smith" ~ "D'Ante Smith",
              x == "Dwayne Eskridge" ~ "D'Wayne Eskridge",
              x == 'Elerson G.' ~ "Elerson Smith",
              x == "Travis Etiennne" ~ "Travis Etienne",
              x == "Trevon Moehrigh" ~ "Trevon Moehrig",
              x == 'Elijah Moulden' ~ "Elijah Molden",
              x == 'Hamseh Nasirildeen' ~ "Hamsah Nasirildeen",
              x == 'Jovante Williams' ~ "Javonte Williams",
              x == 'Larry Roundtree' ~ "Larry Rountree",
              x == 'Alim McNeil' ~ "Alim McNeill",
              x == 'Ritchie Grant' ~ 'Richie Grant',
              x == 'Shaun Bayer' ~ 'Shaun Beyer',
              x == 'Deablo Divine' ~ 'Divine Deablo',
              x == 'Devine Diablo' ~ 'Divine Deablo',
              x == 'Torrance Marable' ~ 'C.J. Marable',
              x == 'Dyani Brown' ~ 'Dyamin Brown',
              x == 'Gregory Newsome' ~ 'Greg Newsome',
              x == 'Hamsah Nasirldeen' ~ 'Hamsah Nasirildeen',
              x == 'Tevin Jenkins' ~ 'Teven Jenkins',
              x == "ArDarius Washington" ~ "Ar'Darius Washington",
              x == 'ade Johnson' ~ 'Cade Johnson',
              x == 'Damar Hamilton' ~ 'Damar Hamlin',
              x == 'Jalyen Waddle' ~ 'Jaylen Waddle',
              x == 'Day Tufele' ~ 'Jay Tufele',
              x == 'Creed Humphery' ~ 'Creed Humphrey',
              x == 'Kelen Mond' ~ 'Kellen Mond',
              x == 'Dynami Brown' ~ 'Dyami Brown',
              x == 'Gregory Rosseeau' ~ 'Gregory Rousseau',
              x == 'Greg Rousseau' ~ 'Gregory Rousseau',
              x == 'Terrence Marshall' ~ 'Terrace Marshall',
              x == 'Jimmy Morissey' ~ 'Jimmy Morrissey',
              x == 'Hamsah Nasrilideen' ~ 'Hamsah Nasirildeen',
              x == 'Caleb Fairley' ~ 'Caleb Farley',
              x == 'Nick Collins' ~ 'Nico Collins',
              x == 'Olijah Griffin' ~ 'Olaijah Griffin',
              x == "Ta'Quan Graham" ~ "Ta'Quon Graham",
              x == 'Ifeatu Melinfonwu' ~ 'Ifeatu Melifonwu',
              x == 'Carlos âBoogieâ Basham' ~ 'Carlos Basham',
              x == "Josh Meyers" ~ "Josh Myers",
              x == 'Barron Browning' ~ 'Baron Browning',
              x == 'Jeremiah Owusu-Koromoah' ~ 'Jeremiah Owusu-Koramoah',
              x == 'KaDarius Toney' ~ 'Kadarius Toney',
              x == 'Chauncy Gholston' ~ 'Chauncey Golston',
              x == "Jeramiah Owusu-Koramoah" ~ "Jeremiah Owusu-Koramoah",
              x == "Quichy Roche" ~ "Quincy Roche",
              x == 'Taven Jenkins' ~ 'Teven Jenkins',
              x == 'Joseph Owusu-Koramoah' ~ 'Jeremiah Owusu-Koramoah',
              x == 'Chauncey Holston' ~ 'Chauncey Golston',
              x == 'Braden Christensen' ~ 'Brady Christensen',
              x == 'David Mills' ~ 'Davis Mills',
              x == "Samuel Cooper" ~ 'Sam Cooper',
              x == 'Sam Ehllinger' ~ 'Sam Ehlinger',
              x == 'Deommodore Lenior' ~ 'Deommodore Lenoir',
              x == 'Malcom Koonce' ~ 'Malcolm Koonce',
              x == 'Alijah-Vera Tucker' ~ 'Alijah Vera-Tucker',
              x == 'Maliik Herring' ~ 'Malik Herring',
              x == "Taron Jackson" ~ 'Tarron Jackson',
              x == 'Jay Trufele' ~ 'Jay Tufele',
              x == 'Justin Hillard' ~ 'Justin Hilliard',
              x == 'Travis Eitienne' ~ 'Travis Etienne',
              x == "Quinn Meiner" ~ 'Quinn Meinerz',
              x == "Quincey Roche" ~ "Quincy Roche",
              x == "Chancey Gholston" ~ 'Chauncey Golston',
              x == 'D.J. Daniels' ~ 'D.J. Daniel',
              x == 'Neill Farrell' ~ 'Neil Farrell',
              x == 'Najee Davis' ~ 'Najee Harris',
              x == 'Tariq Bracy' ~ 'TaRiq Bracy',
              x == 'Jack Curhan' ~ 'Jake Curhan',
              x == "Ja'Maine Martin" ~ 'Jah-Maine Martin',
              x == 'Ramaud Bowman' ~ 'Ramaud Chiaokhiao-Bowman',
              x == "Jayson Owen" ~ "Odafe Oweh",
              x == 'RaShawn Slater' ~ 'Rashawn Slater',
              x == 'JaVonte Williams' ~ 'Javonte Williams',
              x == 'Jaylor Moore' ~ 'Jaylon Moore',
              x == "Ja'marr Chase" ~ "Ja'Marr Chase",
              x == "Peter Werner" ~ "Pete Werner",
              x == 'Calos Basham' ~ 'Carlos Basham',
              x == "Michael Manet" ~ "Michal Menet",
              x == 'Ishmir Smith-Marsette' ~ 'Ihmir Smith-Marsette',
              x == 'Zech McPherson' ~ 'Zech McPhearson',
              x == 'Taquan Graham' ~ "Ta'Quon Graham",
              x == 'Asante Sameul' ~ 'Asante Samuel',
              x == 'Jason Oweh' ~ 'Odafe Oweh',
              # x == 'Amani Rodgers' ~ 'Amari Rodgers',
              x == 'Nahjee Harris' ~ 'Najee Harris',
              x == 'Tyler Gillespie' ~ 'Tyree Gillespie',
              x == 'Zavon Collins' ~ 'Zaven Collins',
              x == 'Robert Rochelle' ~ 'Robert Rochell',
              x == 'Kenny Yeobah' ~ 'Kenny Yeboah',
              x == "Alizah Vera-Tucker" ~ "Alijah Vera-Tucker",
              x == 'Jordan Scott' ~ 'Jordon Scott',
              x == 'Jemar Jefferson' ~ 'Jermar Jefferson',
              x == 'Pat Surtain' ~ 'Patrick Surtain',
              x == 'Pat Jones' ~ "Patrick Jones",
              x == 'Jatarvious Whitlow' ~ "JaTarvious Whitlow",
              x == 'Will Bradley-King' ~ 'William Bradley-King',
              x == 'Will Sherman' ~ 'William Sherman',
              TRUE ~ x
            ),
            ifelse(
              year == 2018,
              case_when(
                x == 'Ogbo Okoronkwo' ~ 'Ogbonnia Okoronkwo',
                x == 'Joe Noteboom' ~ "Joseph Noteboom",
                TRUE ~ x
              ),
            ifelse(
              year == 2019,
              case_when(
                x == 'C.J. Gardner-Johnson' ~ 'Chauncey Gardner-Johnson',
                x == 'David Sills V' ~ "David Sills",
                x == 'Olisaemeka Udoh' ~ "Oli Udoh",
                TRUE ~ x
              ),
            ifelse(
              year == 2020,
              case_when(
                x == 'Mike Danna' ~ 'Michael Danna',
                x == "La'Darius Hamilton" ~ "LaDarius Hamilton",
                x == 'Gabe Davis' ~ 'Gabriel Davis',
                x == "Mike Onwenu" ~ "Michael Onwenu",
                x == "Bopete Keyes" ~ "Thakarius Keyes",
                x == 'Pat Jones' ~ "Patrick Jones",
                x == 'Trystan Colon' ~ 'Trystan Colon-Castillo',
                TRUE ~ x
              ),
              x
              )
              )
            )
          )
        )
      )
    )
  )
}

name_clean <- function(x, draft_year = 2024){
  name_match(name_fix(x), year = draft_year)
}

name_special <- function(name, school) {
  case_when(
    name == 'David Long' & school == 'Michigan' ~ 'David Long (MICH)',
    name == 'David Long' &
      school == 'West Virginia' ~ 'David Long (WVU)',
    name == 'Jonah Williams' &
      school == 'Weber State' ~ 'Jonah Williams (WEB)',
    name == 'Jordan Thomas' &
      school == 'Oklahoma' ~ 'Jordan Thomas (OU)',
    name == 'Jordan Thomas' &
      school == 'Mississippi State' ~ 'Jordan Thomas (MSU)',
    name == 'Josh Allen' & school == 'Kentucky' ~ 'Josh Allen (UK)',
    name == 'Josh Allen' & school == 'Temple' ~ 'Josh Allen (TEM)',
    name == 'David Long' &
      school == 'Michigan Wolverines' ~ 'David Long (MICH)',
    name == 'David Long' &
      school == 'West Virginia Mountaineers' ~ 'David Long (WVU)',
    name == 'Trenton Thompson' &
      school == 'San Diego State' ~ 'Trenton Thompson (SDSU)',
    name == 'Josh Allen' &
      school == 'Kentucky Wildcats' ~ 'Josh Allen (UK)',
    name == 'Drake Jackson' &
      school == 'Kentucky Wildcats' ~ 'Drake Jackson (UK)',
    name == 'Lamar Jackson' &
      school == 'Nebraska' ~ 'Lamar Jackson (NEB)',
    name == 'Spencer Brown' &
      school == 'UAB' ~ 'Spencer Brown (UAB)',
    name == 'Tony Brown' &
      school == 'Colorado' ~ 'Tony Brown (COL)',
    name == 'Tony Adams' &
      school == 'Illinois' ~ 'Tony Adams (IL)',
    name == 'Michael Carter' &
      school == 'Duke' ~ 'Michael Carter (DUKE)',
    name == 'Brandon Smith' &
      school == 'Iowa' ~ 'Brandon Smith (IOWA)',
    name == 'Brandon Smith' &
      school == 'Old Dominion' ~ 'Brandon Smith (ODU)',
    name == 'Sam Williams' &
      school == 'East Texas Baptist' ~ 'Sam Williams (ETB)',
    name == 'Drake Jackson' &
      school == 'Kentucky' ~ 'Drake Jackson (UK)',
    name == 'Drake Jackson' &
      school == 'Kentucky Wildcats' ~ 'Drake Jackson (UK)',
    name == 'Tyler Johnson' &
      school == 'Arizona State' ~ 'Tyler Johnson (ASU)',
    name == 'Isaiah Thomas' &
      school == 'UC Davis' ~ 'Isaiah Thomas (UCD)',
    name == 'Tyler Davis' &
      school == 'Georgia Tech' ~ 'Tyler Davis (GT)',
    name == 'Mike Jones' & school == 'Temple' ~ 'Mike Jones (TEM)',
    name == 'Josh Johnson' &
      school == 'Louisiana Monroe' ~ 'Josh Johnson (ULM)',
    name == 'Myles Murphy' &
      school == 'North Carolina' ~ 'Myles Murphy (UNC)',
    name == 'Kevin Harris' &
      school == 'Georgia Tech' ~ 'Kevin Harris (GT)',
    name == 'Jaylon Jones' &
      school == 'Ole Miss' ~ 'Jaylon Jones (MISS)',
    name == 'Anthony Johnson' &
      school == 'Iowa State' ~ 'Anthony Johnson (ISU)',
    name == 'Anthony Johnson' &
      school == 'Virginia' ~ 'Anthony Johnson (UVA)',
    name == 'Anthony Johnson' &
      school == 'LSU' ~ 'Anthony Johnson (LSU)',
    name == 'Cameron Smith' & school == 'South Carolina' ~ 'Cam Smith',
    name == 'Kyle Phillips' & school == 'UCLA' ~ 'Kyle Philips',
    name == 'Cameron Brown' & school == 'Penn State' ~ 'Cam Brown',
    name == 'Andre Carter' & school %in% c('Indiana', 'Western Michigan') ~ 'Andre Carter (IU)',
    name == 'Andre Carter' & school == 'Army' ~ 'Andre Carter',
    name == 'Byron Young' & school == 'Alabama' ~ 'Byron Young',
    name == 'Byron Young' & school == 'Tennessee' ~ 'Byron Young (TEN)',
    name == 'Jordan Davis' & school == 'Georgia' ~ 'Jordan Davis',
    name == 'Jordan Davis' & school == 'Mississippi State' ~ 'Jordan Davis (MSU)',
    name == 'Tre Williams' & school == 'Auburn' ~ 'Tre Williams (AUB)',
    name == "Tre' Williams" & school == 'Auburn' ~ 'Tre Williams (AUB)',
    name == 'Tre Williams' & school == 'Arkansas' ~ 'Tre Williams',
    name == 'Tony Grimes' & school == 'Texas A&M' ~ 'Tony Grimes',
    name == 'Tony Grimes' & school == 'Akron' ~ 'Tony Grimes (AKR)',
    name == 'Dakota Allen' & school == 'Eastern Kentucky' ~ 'Dakota Allen (EKU)',
    name == 'Dakota Allen' & school == 'Texas Tech' ~ 'Dakota Allen',
    name == 'Isaiah Johnson' & school == 'Houston' ~ 'Isaiah Johnson',
    name == 'Isaiah Johnson' & school == 'Syracuse' ~ 'Isaiah Johnson (SYR)',
    name == 'Jordan Jones' & school == 'Kentucky' ~ 'Jordan Jones (UK)',
    name == 'Jordan Jones' & school == 'Rhode Island' ~ 'Jordan Jones (RI)',
    name == 'Caleb Johnson' & school == 'Miami' ~ 'Caleb Johnson (UM)',
    name == 'Caleb Johnson' & school == 'Texas State' ~ 'Caleb Johnson (TSU)',
    name == 'Caleb Johnson' & school == 'Notre Dame' ~ 'Caleb Johnson (ND)',
    name == "Steven Jones" & school == 'Oregon' ~ 'Steven Jones (ORE)',
    name == 'Steven Jones' & school == 'Appalachian State' ~ 'Steven Jones (APPST)',
    name == 'Chris Smith' & school == 'Georgia' ~ 'Christopher Smith',
    name == 'Chris Smith' & school == 'Louisiana' ~ 'Chris Smith',
    name == 'Leonard Taylor' & school == 'Cincinnati' ~ 'Leonard Taylor (CIN)',
    name == 'Byron Murphy' & school == 'Texas' ~ 'Byron Murphy (TX)',
    name == 'James Williams' & school == 'Washington State' ~ 'James Williams (WSU)',
    name == 'James Williams' & school == 'Miami' ~ 'James Williams (MIA)',
    name == 'Jalen Green' & school == 'James Madison' ~ 'Jalen Green (JMU)',
    name == 'Marcus Harris' & school == 'Auburn' ~ 'Marcus Harris',
    name == 'Marcus Harris' & school %in% c("Idaho", "California") ~ 'Marcus Harris (CAL)',
    TRUE ~ name
  )
}

clean_draft <- function(x, year = getMaxDraftYear(), select = FALSE) {
  if (year == 'All') {
    x %>%
      left_join(getMocks() %>%
                  distinct(name, pos = position, sch = school),
                by = c('name')) %>%
      mutate(
        school = coalesce(sch, school),
        sch = NULL,
        position = coalesce(pos, position),
        pos = NULL
      ) -> tmp
  } else {
    x %>%
      ungroup %>%
      # select(-draft_year) %>%
      left_join(
        getMocks() %>%
          filter(draft_year %in% year) %>%
          distinct(name, pos = position, sch = school),
        by = c('name')
      ) %>%
      mutate(
        school = coalesce(sch, school),
        sch = NULL,
        position = coalesce(pos, position),
        pos = NULL
      ) -> tmp
  }
  
  if (select == FALSE) {
    return(tmp)
  } else {
    return(tmp %>% select(round, pick, name, position, school, team))
  }
}

school_clean <- function(x) {
  x <- stringi::stri_trans_general(x, "Latin-ASCII")
  
  case_when(
    x == '49ers' ~ 'Charlotte',
    x %in% c("Ala-Birmingham") ~ 'UAB',
    x == 'British Columbia (Canada)' ~ 'British Columbia',
    x == 'UC-Davis' ~ 'UC Davis',
    x %in% c('UConn', 'CONN', 'UCONN') ~ 'Connecticut',
    x %in% c('Southern California', 'Southern Cal', 'Usc') ~ 'USC',
    x %in% c('Cal') ~ 'California',
    x == 'ECU' ~ 'East Carolina',
    x %in% c("ASU", "Arizona St") ~ 'Arizona State',
    grepl("Ga[.]", x) ~ gsub("Ga[.]", "Georgia", x),
    x == 'UGA' ~ 'Georgia',
    x == 'Adams State' ~ 'Adams St.',
    x == 'Angelo State' ~ 'Angelo St.',
    x == 'Fayetteville State' ~ 'Fayetteville St.',
    x == 'Pittsburg State' ~ 'Pittsburg St.',
    x == 'Fort Hays State' ~ 'Fort Hays St.',
    x == "Michigan St" ~ 'Michigan State',
    x == "Saint John's (MN)" ~ "Saint John's",
    x == "Charleston (WV)" ~ "Charleston",
    x == "Mississippi St" ~ 'Mississippi State',
    x == 'SC State' ~ 'South Carolina State',
    x %in% c('UNC', 'Unc') ~ 'North Carolina',
    x %in% c('NDSU', "N Dakota State", "N. Dakota State") ~ 'North Dakota State',
    x == 'App State' ~ 'Appalachian State',
    x %in% c("PITT", 'Pitt', 'Pittsbugh') ~ 'Pittsburgh',
    x %in% c("FSU", "Florida St", 'Florida St.', 'Fsu') ~ 'Florida State',
    x %in% c("KSU", "Kansas St", 'Kansas St.', 'Ksu') ~ 'Kansas State',
    x %in% c("PSU", "Penn St", 'Penn St.', 'Penn', 'Psu') ~ 'Penn State',
    x %in% c('UL Lafayette', 'Lousiana', "ULL") ~ 'Louisiana',
    x %in% c(
      'UL Monroe',
      "ULM",
      "La-Monroe",
      "UL-Monroe",
      "Louisiana-Monroe"
    ) ~ 'Louisiana Monroe',
    x %in% c('Louisiana State', 'Louisiana St', 'Louisiana St.') ~  'LSU',
    x %in% c('MTSU', 'Middle Tennessee State') ~  'Middle Tennessee',
    grepl("UW-", x) ~ sub("UW-", "Wisconsin-", x),
    grepl("Flordia", x) ~ gsub("Flordia", "Florida", x),
    x %in% c('Texas Christian', 'Texas Christian University') ~ 'TCU',
    x %in% c("Vandy") ~ 'Vanderbilt',
    x == 'Mississippi' ~ 'Ole Miss',
    x == 'Central Florida' ~ 'UCF',
    x == 'Brigham Young' ~ 'BYU',
    x == 'Penn' ~ 'Pennsylvania',
    x %in% c('Ohio St', 'Ohio St.', 'OSU', 'Osu') ~ 'Ohio State',
    x %in% c('Boise St', 'Boise St.') ~ 'Boise State',
    x %in% c(
      'North Carolina State',
      'North Carolina St.',
      'North Carolina St'
    ) ~ 'NC State',
    x == 'S.F. Austin' ~ 'Stephen F. Austin',
    x %in% c('VA Tech', 'VaTech', 'VT', 'VTech') ~ 'Virginia Tech',
    x %in% c("LA Tech", "Lousiana Tech") ~ 'Lousiana Tech',
    x == 'Marshal' ~ 'Marshall',
    x %in% c('Concordia- Minnesota', 'Concordia') ~ 'Concordia-St. Paul',
    grepl("San Jos", x) ~ "San Jose State",
    x %in% c("C. Michigan") ~ 'Central Michigan',
    x %in% c('Ucla') ~ 'UCLA',
    x %in% c(
      'Middle Tennessee State',
      'Middle Tenn. State',
      'Middle Tenn. St.'
    ) ~ 'Middle Tennessee',
    x == 'Texas-El Paso' ~ 'UTEP',
    x == "Hawaii" ~ "Hawai'i",
    x == "Massachusetts" ~ "UMass",
    x %in% c('Texas-San Antonio', 'UT San Antonio') ~ 'UTSA',
    x == 'Southern Mississippi' ~ 'Southern Miss',
    x %in% c('SE Missouri State', 'SE Missouri St.') ~ 'Southeast Missouri State',
    x %in% c("E. Carolina") ~ 'East Carolina',
    x %in% c("FAU", 'Fau') ~ 'Florida Atlantic',
    x %in% c("N Iowa", "N. Iowa", "N Iowa") ~ "Northern Iowa",
    grepl("East[.]", x)  ~ sub("East[.]", "Eastern", x),
    grepl("E[.]", x)  ~ sub("E[.]", "Eastern", x),
    grepl("S[.]", x)  ~ sub("S[.]", "South", x),
    grepl("West[.]", x) ~ sub("West[.]", "Western", x),
    grepl("W[.]", x) ~ sub("W[.]", "Western", x),
    
    grepl("C[.]", x) ~ sub("C[.]", "Central", x),
    grepl("N[.]", x) ~ sub("N[.]", "Northern", x),
    grepl("N ", x) ~ sub("N ", "Northern", x),
    x %in% c("NC-A&T", "North Carolina A & T") ~ 'North Carolina A&T',
    x %in% c("NC Central") ~ 'North Carolina Central',
    grepl("Col[.]", x) ~ sub("Col[.]", "College", x),
    x == 'Miami (OH)' ~ x,
    x == 'Miami (FL)' ~ 'Miami',
    grepl("Miami", x) ~ "Miami",
    x %in% c("Texas A&m") ~ "Texas A&M",
    grepl("A & M", x) ~ gsub("A & M", "A&M", x),
    grepl("Int[.]", x) ~ gsub("Int.", "International", x),
    x %in% c("Flordia Int", 'FIU') ~ 'Florida International',
    x %in% c("Grambling State") ~ 'Grambling',
    x == 'Angelo State' ~ "Angelo St.",
    x == 'Bowie State' ~ 'Bowie St.',
    x == 'Bryant University' ~ 'Bryant',
    x == 'Carson - Newman' ~ 'Carson-Newman',
    x == 'East Central (Ok.)' ~ 'East Central',
    x == 'Elizabeth City State' ~ "Elizabeth City St.",
    x == 'Fort Valley State' ~ 'Fort Valley St.',
    x == 'Lenoir - Rhyne' ~ 'Lenoir-Rhyne',
    x == 'Lincoln (Mo.)' ~ 'Lincoln (MO)',
    x == 'Lincoln (Pa)' ~ 'Lincoln (PA)',
    x == 'LIU' ~ 'Long Island University',
    x %in% c('Lsu') ~ 'LSU',
    x == 'McNeese State' ~ 'McNeese',
    x == 'Midwestern State' ~ 'Midwestern St.',
    x == 'Missouri Western State' ~ 'Missouri Western',
    x == 'Nicholls State' ~ 'Nicholls',
    x == 'Northeastern State (Ok.)' ~ 'Northeastern St.',
    x == 'Pittsburg State' ~ 'Pittsburg St.',
    x == 'Southern University' ~ "Southern",
    x == "St. Augustine's" ~ "Saint Augustine's",
    x == "St. Johns, Minnesota" ~ 'St. Johns (MN)',
    x == 'Tennessee-Martin' ~ 'UT Martin',
    x == 'Texas - Permian Basin' ~ 'Tex. Permian Basin',
    x == 'Texas A&M-Kingsville' ~ 'Tex. A&M-Kingsville',
    x == "Tusculum (Tn.)" ~ "Tusculum",
    x == "Hawai'i" ~ 'Hawaii',
    x == "UFTL" ~ 'Fort Lauderdale',
    x == 'USF' ~ 'South Florida',
    x == 'UVA Wise' ~ 'UVa-Wise',
    x == 'Virginia Military Institute' ~ 'VMI',
    x == 'West Virginia State' ~ 'West Virginia St.',
    x == 'West Georgia' ~ 'West Ga.',
    x %in% c('UVA', 'Uva') ~ 'Virginia',
    x == 'West Virginia Wesleyan' ~ 'West Va. Wesleyan',
    x == 'Wheaton' ~ 'Wheaton (Ill.)',
    x == 'Winston - Salem State' ~ 'Winston Salem',
    x == "Wisconsin - Stout" ~ 'UW-Stout',
    x %in% c("Wisconsin - Whitewater", "Wisconsin-Whitewater") ~ 'UW-Whitewater',
    grepl("St[.] ", x) ~ x,
    grepl("St[.]", x) ~ sub("St[.]", "State", x),
    x == 'Oregoon State' ~ 'Oregon State',
    TRUE ~ x
  )
}

position_clean <- function(x) {
  case_when(
    x %in% c('Quarterback', 'QB') ~ 'QB',
    x %in% c("Wide Receiver", "WIDE RECEIVER") | grepl("WR", x) ~ 'WR',
    x %in% c('Running Back', 'HB', 'TB') | grepl("RB", x) ~ 'RB',
    x %in% c("TE/FB") ~ 'FB',
    x %in% c(
      "OG",
      'G',
      'Offensive Guard',
      'Guard',
      'G/OC',
      'OG/C',
      'OG/OC',
      'iOL',
      'IOL',
      'OL',
      "Offensive Lineman",
      'RG',
      'LG',
      'Offensive Line',
      'OG/OT'
    ) ~ 'G',
    x %in% c("OC",
             'C',
             'Offensive Center',
             'Center',
             'C/G',
             'OC/OG',
             'C/OG') ~ 'C',
    x %in% c(
      "OT",
      'T',
      'Tackle',
      'Offensive Tackle',
      "OT/G",
      "OT/OG",
      "OT/G/C",
      "LT",
      "RT",
      "Lanen OT"
    ) ~ 'OT',
    x %in% c("TE", "Tight End") ~ 'TE',
    x %in% c(
      "DE",
      'ED',
      'EDGE',
      'Edge',
      "3-4DE",
      'DL/EDGE',
      "RDE",
      "D. End",
      "LDE",
      "LE",
      'RE',
      "EDGE/Defensive Line",
      "DE/DT",
      "DE/OLB",
      "OLB",
      "EDGE/OLB",
      'Edge/LB',
      "LB/EDGE",
      "OLB/EDGE",
      'Defensive End'
    ) ~ 'EDGE',
    x %in% c(
      "DT",
      'DI',
      "DL",
      "NT/DT",
      'Defensive Line',
      "Defensive Tackle",
      "Defensive Lineman",
      'DL1T',
      'DL3T',
      'DL5T',
      'IDL',
      'NT',
      'Nose',
      "Nose Tackle",
      "DT/3-4DE",
      "DT/DE",
      "RDT",
      "LDT"
    ) ~ 'DT',
    x %in% c(
      "OLB/ILB",
      "LB/S",
      "3-40lb",
      '3-4OLB',
      "Outside Linebacker",
      "Linebacker",
      "Outside LB",
      "ROLB",
      "LOLB",
      'MLB',
      "LB/DB",
      "OLB/SS"
    ) ~ 'LB',
    x %in% c(
      "ILB",
      "Inside Linebacker",
      "LILB",
      "RILB",
      "RLB",
      "LLB",
      "LB",
      "LB"
    ) ~ 'LB',
    x %in% c(
      "CB",
      'CBN',
      "CB/DB",
      "DB/CB",
      "Defensive Back",
      "Cornerback",
      "DB",
      "LCB",
      "RCB"
    ) ~ 'CB',
    x %in% c('SS',
             'Strong Safety',
             "Safety",
             'SAFETY',
             'DS',
             'S',
             'SAF') ~ 'S',
    x %in% c('FS',
             'Free Safety') ~ 'S',
    x %in% c('PT',
             'P',
             'Punter',
             'PT/PK') ~ "ST",
    x %in% c('PK',
             'K',
             'Kicker',
             'PK/PT') ~ "ST",
    x == 'LS' ~ 'ST',
    TRUE ~ x
  )
}

# read.csv("https://github.com/sportsdataverse/cfbplotR/raw/main/data-raw/logo_ref.csv") -> logo_ref

bind_rows(
  cfbplotR::logo_ref %>%
    mutate(school = school_clean(school)) %>%
    semi_join(
      cfbplotR::logo_ref %>%
        mutate(school = school_clean(school)) %>%
        count(school) %>%
        filter(n == 1),
      by = 'school'
    ),
  cfbplotR::logo_ref %>%
    mutate(school = school_clean(school)) %>%
    semi_join(
      cfbplotR::logo_ref %>%
        mutate(school = school_clean(school)) %>%
        semi_join(
          cfbplotR::logo_ref %>%
            mutate(school = school_clean(school)) %>%
            count(school) %>%
            filter(n > 1),
          by = 'school'
        ) %>%
        filter(grepl("espn", logo)) %>%
        count(school) %>%
        filter(n == 1),
      by = 'school'
    ),
  cfbplotR::logo_ref %>%
    mutate(school = school_clean(school)) %>%
    semi_join(
      cfbplotR::logo_ref %>%
        mutate(school = school_clean(school)) %>%
        semi_join(
          cfbplotR::logo_ref %>%
            mutate(school = school_clean(school)) %>%
            count(school) %>%
            filter(n > 1),
          by = 'school'
        ) %>%
        filter(grepl("espn", logo)) %>%
        count(school) %>%
        filter(n > 1),
      by = 'school'
    ) %>%
    filter(type == 'FBS')
) %>%
  distinct %>%
  filter(type != 'Conference') %>%
  mutate(school = school_clean(school)) -> logo_df

bind_rows(
  logo_df %>%
    semi_join(logo_df %>%
                count(school) %>%
                filter(n == 1),
              by = 'school'),
  logo_df %>%
    semi_join(logo_df %>%
                count(school) %>%
                filter(n > 1),
              by = 'school') %>%
    filter(grepl("espn", logo))
) %>%
  left_join(
    bind_rows(
      load_cfb_teams() %>%
        mutate(school = school_clean(school)) %>%
        # mutate(
        #   logo = map_chr(logos, 1),
        #   logo2 = map_chr(logos, 2),
        #   logos = NULL
        # ) %>%
        select(school, mascot),
      cfbd_team_info() %>%
        mutate(school = school_clean(school)) %>%
        # mutate(
        #   logo = map_chr(logos, 1),
        #   logo2 = map_chr(logos, 2),
        #   logos = NULL
        # ) %>%
        select(school, mascot)
    ) %>% distinct,
    by = 'school',
  ) %>%
  mutate(school = ifelse(
    grepl("San Jos", school),
    'San Jose State',
    school
    )
  ) %>%
  add_row(
    school = 'Humboldt State',
    logo = 'https://brand.humboldt.edu/sites/default/files/styles/panopoly_image_full/public/general/hsuathletics_logomark_fullcolor_0.jpg',
    type = 'DII',
    color = '#3a913f',
    alt_color = '#046a38',
    mascot = 'Lumberjacks'
  ) %>% 
  left_join(
    tibble::tribble(
      ~ school,
      ~ mascot2,
      "Adams St.",
      'Grizzlies',
      "Alabama A&M",
      'Bulldogs',
      "Alabama State",
      'Hornets',
      "Alberta",
      'Golden Bears',
      "Angelo St.",
      'Rams',
      "Ark.-Monticello",
      'Boll Weevils',
      "Austin Peay",
      'Governors',
      "Berry",
      'Vikings',
      "Bethune-Cookman",
      'Wildcats',
      "Brown",
      'Bears',
      "Bucknell",
      'Bison',
      "Central Arkansas",
      'Bears',
      "Central Connecticut",
      'Blue Devils',
      "Central Mo.",
      'Mules',
      "Charleston",
      'Golden Eagles',
      "Chattanooga",
      'Mocs',
      "Concordia-St. Paul",
      'Golden Bears',
      "Culver-Stockton",
      'Wildcats',
      "Dartmouth",
      'Big Green',
      "Dayton",
      'Flyers',
      "Delaware",
      "Fightin' Blue Hens",
      "Delta State",
      'Statesmen',
      "Dubuque",
      'Spartans',
      "Duquesne",
      'Dukes',
      "East Tennessee State",
      'Buccaneers',
      "East Texas Baptist",
      'Tigers',
      "Eastern Illinois",
      'Panthers',
      "Eastern Kentucky",
      'Colonels',
      "Eastern Washington",
      'Eagles',
      "Edward Waters",
      'Tigers',
      "Elon",
      'Phoenix',
      "Fayetteville St.",
      'Broncos',
      "Ferris State",
      'Bulldogs',
      "Findlay",
      'Oilers',
      "Florida A&M",
      'Rattlers',
      "Fordham",
      'Rams',
      "Fort Hays St.",
      'Tigers',
      "Framingham State",
      'Rams',
      "Grambling",
      'Tigers',
      "Grand Valley State",
      'Lakers',
      "Hampton",
      'Pirates',
      "Harvard",
      'Crimson',
      "Hawaii",
      'Rainbow Warriors',
      "Holy Cross",
      'Crusaders',
      "Idaho",
      'Vandals',
      "Idaho State",
      'Bengals',
      "Illinois State",
      'Redbirds',
      "Jackson State",
      'Tigers',
      "Jacksonville State",
      'Gamecocks',
      "Lenoir-Rhyne",
      'Bears',
      "Limestone",
      'Saints',
      "Lindenwood",
      'Lions',
      "Maine",
      'Black Bears',
      "Malone",
      'Pioneers',
      "Marist",
      'Red Foxes',
      "McNeese",
      'Cowboys',
      "Mercer",
      'Bears',
      "Merrimack",
      'Warriors',
      "Missouri State",
      'Bears',
      "Missouri Western",
      'Griffons',
      "Monmouth",
      'Hawks',
      "Montana",
      'Grizzlies',
      "Montana State",
      'Bobcats',
      "Morgan State",
      'Bears',
      "Murray State",
      'Racers',
      "Nicholls",
      'Colonels',
      "Norfolk State",
      'Spartans',
      "North Alabama",
      'Lions',
      "North Carolina A&T",
      'Aggies',
      "North Carolina Central",
      'Eagles',
      "North Dakota",
      'Fighting Hawks',
      "North Dakota State",
      'Bison',
      "North Greenville",
      'Crusaders',
      "Northern Arizona",
      'Lumberjacks',
      "Northern Colorado",
      'Bears',
      "Northern Iowa",
      'Panthers',
      "Northwest Missouri State",
      'Bearcats',
      "Northwestern State",
      'Demons',
      "Ouachita Baptist",
      'Tigers',
      "Pennsylvania",
      'Quakers',
      "Pittsburg State",
      'Gorillas',
      "Portland State",
      'Vikings',
      "Prairie View A&M",
      'Panthers',
      "Princeton",
      'Tigers',
      "Rhode Island",
      'Rams',
      "Richmond",
      'Spiders',
      "Sacramento State",
      'Hornets',
      "Saginaw Valley",
      'Cardinals',
      "Sam Houston State",
      'Bearkats',
      "Samford",
      'Bulldogs',
      "San Diego",
      'Toreros',
      "San Jose State",
      'Spartans',
      "Sioux Falls",
      'Cougars',
      "Slippery Rock",
      'The Rock',
      "South Carolina State",
      'Bulldogs',
      "South Dakota",
      'Coyotes',
      "South Dakota State",
      'Jackrabbits',
      "Southeast Missouri State",
      'Redhawks',
      "Southeastern Louisiana",
      'Lions',
      "Southern",
      'Jaguars',
      "Southern Illinois",
      'Salukis',
      "Southern Utah",
      'Thunderbirds',
      "St. Johns (MN)",
      'Johnnies',
      "Stephen F. Austin",
      'Lumberjacks',
      "Stetson",
      'Hatters',
      "Stony Brook",
      'Seawolves',
      "Tarleton State",
      'Texans',
      "Tennessee State",
      'Tigers',
      "Tiffin",
      'Dragons',
      "Towson",
      'Tigers',
      "Truman",
      'Bulldogs',
      "UC Davis",
      "Aggies",
      "UT Martin",
      'Skyhawks',
      "UW-Whitewater",
      'Warhawks',
      "Valdosta State",
      'Blazers',
      "Villanova",
      'Wildcats',
      "Wagner",
      'Seahawks',
      "Washburn",
      'Ichabods',
      "Weber State",
      'Wildcats',
      "Wesley",
      'Wolverines',
      "West Florida",
      'Argonauts',
      "West Ga.",
      'Wolves',
      "Western Illinois",
      'Fighting Leathernecks',
      "William & Mary",
      'Tribe',
      "Yale",
      'Bulldogs',
      "Youngstown State",
      'Penguins'
    ),
    by = 'school'
  ) %>%
  mutate(mascot = coalesce(mascot, mascot2),
         mascot2 = NULL) -> logo_df

brightness <- function(hex) {
  result <- rep(0, length(hex))
  list(2:7) %>%
    pmap(function(i) {
      ch <- substr(hex, i, i)
      result <- result + ifelse(i %% 2 == 0, 16, 1) * case_when(
        ch == "0" ~ 0,
        ch == "1" ~ 1,
        ch == "2" ~ 2,
        ch == "3" ~ 3,
        ch == "4" ~ 4,
        ch == "5" ~ 5,
        ch == "6" ~ 6,
        ch == "7" ~ 7,
        ch == "8" ~ 8,
        ch == "9" ~ 9,
        ch == "a" | ch == "A" ~ 10,
        ch == "b" | ch == "B" ~ 11,
        ch == "c" | ch == "C" ~ 12,
        ch == "d" | ch == "D" ~ 13,
        ch == "e" | ch == "E" ~ 14,
        ch == "f" | ch == "F" ~ 15,
        TRUE ~ 0
      )
    }) %>%
    unlist %>%
    sum
}

# openDB <- function() {
#   dbConnect(SQLite(), "data/gtm_db.sqlite")
# }
# 
# closeDB <- function() {
#   dbDisconnect(openDB())
# }

getMaxDraftYear <- function() {
  max(getUndraftable()$draft_year)
  # ifelse(
  #   month(Sys.Date()) >= 5,
  #   year(Sys.Date())+1,
  #   year(Sys.Date())
  # )
}

getMinDraftYear <- function() {
  min(getUndraftable()$draft_year)
  # ifelse(
  #   month(Sys.Date()) >= 5,
  #   year(Sys.Date())+1,
  #   year(Sys.Date())
  # )
}

getGTM_Pivot <- function(draft_year = getMaxDraftYear(), sheet = 'Mock') {
  suppressMessages(
    read_sheet(ss = gtm_gs(draft_year),
               sheet = paste0(sheet, ' Table')) %>%
      clean_names %>%
      filter(!is.na(position)) %>%
      mutate(
        # name = unlist(name),
        draft_year = draft_year,
        undraftable = unlist(undraftable),
        latest_date = as.Date(latest_date)
      ) %>%
      select(draft_year, name:edp_eligible)
  )
}

# getGTM_Mock_Pivot <- function() {
#   suppressMessages(
#     read_sheet(ss = "1Wn3IOHELqJv5XcrduOXyxAqZE_kn7GOhYT9gIawAynM",
#                sheet = 'Mock Table') %>%
#       clean_names %>%
#       filter(!is.na(position)) %>%
#       mutate(
#         # name = unlist(name),
#         undraftable = unlist(undraftable),
#         latest_date = as.Date(latest_date)
#       )
#   )
# }
# 
# getGTM_Board_Pivot <- function() {
#   suppressMessages(
#     read_sheet(ss = "1Wn3IOHELqJv5XcrduOXyxAqZE_kn7GOhYT9gIawAynM",
#                sheet = 'Board Table') %>%
#       clean_names %>%
#       filter(!is.na(position)) %>%
#       mutate(
#         # name = unlist(name),
#         undraftable = unlist(undraftable),
#         latest_date = as.Date(latest_date)
#       )
#   )
# }

getGTM_Diff <- function(year = getMaxDraftYear(), mock = TRUE) {
  getPlayerList(x = year, split = FALSE) %>%
    bind_rows %>%
    tibble -> tmp1
  
  if (mock == TRUE) {
    getGTM_Pivot(draft_year = year, sheet = 'Mock') -> tmp2
  } else {
    getGTM_Pivot(draft_year = year, sheet = 'Board') -> tmp2
  }
  
  tmp2 %>%
    anti_join(tmp1 %>%
                select(name, position, school),
              by = c('name', 'position', 'school')) %>%
    arrange(name) -> dat2
  
  tmp1 %>%
    anti_join(tmp2 %>%
                select(name, position, school),
              by = c('name', 'position', 'school')) %>%
    arrange(name) -> dat1
  
  if (nrow(dat1) == 0 & nrow(dat2) == 0) {
    message("Good to go!")
  } else {
    if (nrow(dat1) == 0 & nrow(dat2) > 0) {
      message("Change in Google Sheet")
      return(dat2)
    } else if (nrow(dat2) == 0 & nrow(dat1) > 0) {
      message("Change in GTM Data.")
      return(dat1)
    } else {
      message("Change in Both.")
      return(list(Google = dat1, GTM = dat2))
    }
    
  }
}

getGTM_EDP_Diff <- function(year = getMaxDraftYear(), sheet = 'Mock') {
  getGTM_Pivot(year, sheet) %>%
    filter(edp_eligible == TRUE) %>%
    anti_join(
      getEDP() %>%
        filter(draft_year == max(draft_year),
               type == 'All'),
      by = c("name", "position", "school")
    ) -> dat
  if (nrow(dat) > 0) {
    message(paste(nrow(dat), "new names!"))
    return(dat)
  } else {
    message("Nothing new yet!")
  }
}

# getTxt <- function(x){
#   gettxt(x) %>%
#     strsplit("\n") %>%
#     unlist %>%
#     str_squish
# }

getMocks <- function(x = 'All') {
  suppressWarnings(
    read_rds("../GrindingtheMocks-data/data/Mocks.rds") %>%
      {
        if (x == 'All')
          filter(., TRUE)
        else
          filter(., name %in% x)
      } %>%
      mutate(
        date = as.Date(date, "%m/%d/%Y"),
        draft_date = as.Date(draft_date, "%m/%d/%Y")
      ) %>%
      arrange(draft_year, date, site, pick)
  )
  
  # suppressWarnings(if (x == 'All') {
  #   read_rds("../GrindingtheMocks-data/data/Mocks.rds") %>%
  #     mutate(
  #       date = as.Date(date, "%m/%d/%Y"),
  #       draft_date = as.Date(draft_date, "%m/%d/%Y")
  #     ) %>%
  #     arrange(draft_year, date, site, pick)
  # } else {
  #   read_rds("../GrindingtheMocks-data/data/Mocks.rds") %>%
  #     filter(name %in% x) %>%
  #     mutate(
  #       date = as.Date(date, "%m/%d/%Y"),
  #       draft_date = as.Date(draft_date, "%m/%d/%Y")
  #     ) %>%
  #     arrange(draft_year, date, site, pick)
  # })
}

getSiteType <- function(x) {
  getMocks() %>%
    filter(grepl(x, site)) %>%
    distinct(draft_year, site, type)
}

remove_bad_text <- function(x){
  gsub("a€TM", "'", x) %>%
    gsub(' a€\"', ",", .) %>%
    gsub('a€¢ ', "", .)
}

getSiteDates <- function(x){
  getMocks() %>%
    filter(grepl(x, site)) %>%
    distinct(draft_year, site, date, type) %>%
    arrange(desc(date))
}

getMockDupes <- function() {
  suppressMessages(getMocks() %>%
                     # select(-url) %>%
                     get_dupes) -> tmp
  
  if (nrow(tmp) > 0) {
    return(tmp)
  } else {
    message("No dupes here!")
  }
}

getMocks <- function(x = 'All') {
  suppressWarnings(
    read_rds("../GrindingtheMocks-data/data/Mocks.rds") %>%
      {
        if (x == 'All')
          filter(., TRUE)
        else
          filter(., name %in% x)
      } %>%
      mutate(
        date = as.Date(date, "%m/%d/%Y"),
        draft_date = as.Date(draft_date, "%m/%d/%Y")
      ) %>%
      arrange(draft_year, date, site, pick)
  )
}

getBoards <- function(x = 'All') {
  suppressWarnings(
    read_rds("../GrindingtheMocks-data/data/Boards.rds") %>%
      {
        if (x == 'All')
          filter(., TRUE)
        else
          filter(., name %in% x)
      } %>%
      mutate(
        date = as.Date(date, "%m/%d/%Y"),
        draft_date = as.Date(draft_date, "%m/%d/%Y")
      ) %>%
      arrange(draft_year, date, site, rank)
  )
}

getActual <- function() {
  read_rds("../GrindingtheMocks-data/data/Actual.rds")
}

getUndraftable <- function() {
  read_rds("../GrindingtheMocks-data/data/Undraftable.rds")
}

getPFF_IDs <- function() {
  read_rds("../GrindingtheMocks-data/data/PFF_IDs.rds")
}

getPFF_GTM <- function() {
  read_rds("../GrindingtheMocks-data/data/PFF_GTM_IDs.rds")
}

getESPN_IDs <- function() {
  read_rds("../GrindingtheMocks-data/data/ESPN_IDs.rds")
}

getESPN_GTM <- function() {
  read_rds("../GrindingtheMocks-data/data/ESPN_GTM_IDs.rds")
}

getDraftniks <- function() {
  read_rds("../GrindingtheMocks-data/data/Draftniks.rds")
}

getDraftData <- function(x = 'All', add_pick = FALSE) {
  getMocks(x) %>%
    anti_join(getUndraftable(),
              by = c("draft_year", "name", "position", "school")) %>%
    mutate(
      site_name = gsub("-.*", "", site) %>% str_squish,
      site_author = gsub(".*-", "", site) %>% str_squish
    ) %>%
    left_join(getActual() %>%
                select(-draft_cat),
              by = c("draft_year", "name", "position", "school")) %>%
    left_join(
      getActual() %>%
        distinct(draft_year, draft_cat, pick = draft_pick),
      by = c('draft_year', 'pick')
    )  %>% 
    mutate(draft_cat = coalesce(draft_cat, 'Day 3')) %>%
    left_join(
      getDraftniks() %>%
        # group_by(draft_year, draft_cat) %>%
        group_by(draft_year, round) %>%
        mutate_at(vars(contains("norm")), list(med = ~ median(.))) %>%
        ungroup,
        by = c('site_author', 'draft_year', 'round')
      # by = c('site_author', 'draft_year', 'draft_cat')
    ) %>%
    left_join(
      getMocks() %>%
        group_by(draft_year) %>%
        summarize(min_date = min(date)) %>%
        ungroup,
      by = 'draft_year'
    ) %>%
    mutate_at(vars(contains('perc')), ~ coalesce(., .5)) %>%
    mutate_at(vars(contains('norm')), ~ ifelse(. < 0, 0, .)) %>%
    mutate(
      mse_norm = coalesce(mse_norm, mse_norm_med),
      log_mse_norm = coalesce(log_mse_norm, log_mse_norm_med),
      mse_norm = coalesce(mse_norm, .5),
      log_mse_norm = coalesce(log_mse_norm, .5),
      log_mse_norm_med = NULL,
      mse_norm_med = NULL,
      mae_norm = coalesce(mae_norm, mae_norm_med),
      log_mae_norm = coalesce(log_mae_norm, log_mae_norm_med),
      mae_norm = coalesce(mae_norm, .5),
      log_mae_norm = coalesce(log_mae_norm, .5),
      log_mae_norm_med = NULL,
      mae_norm_med = NULL
    ) -> tmp
  
  if (add_pick == TRUE) {
    getActual() %>%
      group_by(draft_year) %>%
      summarize(max_pick = max(draft_pick) + 1) -> maxwalk
    
    tmp %>%
      left_join(maxwalk, by = 'draft_year') %>%
      mutate(draft_pick = coalesce(draft_pick, max_pick),
             max_pick = NULL)
  } else {
    return(tmp)
  }
}

getEDP <- function() {
  read_rds("../GrindingtheMocks-data/data/EDP.rds") %>%
    group_by(draft_year, position, type) %>%
    mutate(pos_rank = paste0(position, dense_rank(edp_rank))) %>%
    ungroup
}

getTransferInfo <- function(x = getMaxDraftYear()) {
  cfbfastR::cfbd_recruiting_transfer_portal(x) %>%
    mutate(
      name = paste(first_name, last_name),
      school = coalesce(destination, origin),
      across(everything(), ~ str_squish(.)),
      position = position_clean(position),
      school = school_clean(school)
    ) %>%
    rowwise %>%
    mutate(
      name = name_clean(name, draft_year = x),
      name = name_special(name, school)
    ) %>%
    ungroup %>%
    select(name, position, school, origin, destination, transfer_date) %>%
    clean_draft %>%
    inner_join(
      getPlayerList(x) %>%
        bind_rows %>%
        left_join(
          getUndraftable() %>%
            filter(draft_year == x) %>%
            select(-draft_year) %>%
            mutate(undraftable = 1),
          by = c("name", "position", "school")
        ) %>%
        select(-position),
      by = c('name', 'school')
    ) %>%
    mutate(across(c(n, sites, undraftable), ~ coalesce(., 0)),) %>%
    arrange(-n, -sites, name) %>%
    filter(school != destination | is.na(destination)) %>%
    filter(is.na(destination) | (!is.na(destination) & destination != 'Professional')) %>%
    distinct() %>%
    arrange(destination, name)
}

getSeniorBowl <- function() {
  read_html('https://www.seniorbowl.com/accepted-invites/') %>%
    html_table %>%
    bind_rows %>%
    clean_names %>%
    mutate(name = paste(first_name, last_name)) %>%
    rename(position = pos) %>%
    select(name, position, school) %>%
    rowwise %>%
    mutate(
      draft_year = 2024,
      name = name_clean(name),
      position = position_clean(position),
      school = school_clean(school),
      name = name_special(name, school)
    ) %>%
    ungroup %>%
    select(draft_year, name, position, school) %>%
    clean_draft %>%
    anti_join(getUndraftable(),
              by = c('draft_year', 'name', 'position', 'school')) %>%
    left_join(getPlayerList(2024) %>%
                bind_rows,
              by = c("name", "position", "school")) %>%
    mutate(across(c(n, sites), ~ coalesce(., 0)),
           edp_eligible = ifelse(n >= 10 &
                                   sites >= 10, TRUE, FALSE)) %>%
    arrange(-edp_eligible, -sites, -n, name)
}

getShrineBowl <- function() {
  'https://shrinebowl.com/2024-accepted-invites/' %>%
    read_html %>%
    html_table %>%
    bind_rows %>%
    clean_names %>%
    mutate(name = paste(first_name, last_name)) %>%
    select(-bio, -first_name, -last_name) %>%
    rename(school = schools, position = pos) %>%
    rowwise %>%
    mutate(
      draft_year = 2024,
      name = name_clean(name),
      position = position_clean(position),
      school = school_clean(school),
      name = name_special(name, school)
    ) %>%
    ungroup %>%
    select(draft_year, name, position, school) %>%
    clean_draft %>%
    anti_join(getUndraftable(),
              by = c('draft_year', 'name', 'position', 'school')) %>%
    left_join(getPlayerList(2024) %>%
                bind_rows,
              by = c("name", "position", "school")) %>%
    mutate(across(c(n, sites), ~ coalesce(., 0)),
           edp_eligible = ifelse(n >= 10 &
                                   sites >= 10, TRUE, FALSE)) %>%
    arrange(-edp_eligible, -sites, -n, name)
}

getNFLAgents <- function() {
  read_rds("../GrindingtheMocks-data/data/NFL_Agents.rds")
}

# getPlayerAgents <- function() {
#   read_rds("..
# /GrindingtheMocks-data/data/Player_Agents.rds")
# }

getPredictions <- function() {
  read_rds("../GrindingtheMocks-data/data/Predictions.rds")
}

add_logo <- function(plot_path,
                     logo_path = 'C:/Users/benjr/Desktop/Projects/GrindingtheMocks_v2/www/gtm_logo_transparent.png',
                     logo_position = 'top left',
                     logo_scale = 5,
                     save = FALSE) {
  if (!logo_position %in% c("top right", "top left", "bottom right", "bottom left")) {
    stop(
      "Error Message: Uh oh! Logo Position not recognized\n  Try: logo_positon = 'top left', 'top right', 'bottom left', or 'bottom right'"
    )
  }
  
  # read in raw images
  plot <- image_read(plot_path)
  logo_raw <- image_read(logo_path)
  
  # get dimensions of plot for scaling
  plot_height <- image_info(plot)$height
  plot_width <- image_info(plot)$width
  
  # default scale to 1/10th width of plot
  # Can change with logo_scale
  logo <-
    image_scale(logo_raw, as.character(plot_width / logo_scale))
  
  # Get width of logo
  logo_width <- image_info(logo)$width
  logo_height <- image_info(logo)$height
  
  # Set position of logo
  # Position starts at 0,0 at top left
  # Using 0.01 for 1% - aesthetic padding
  
  if (logo_position == "top right") {
    x_pos = plot_width - logo_width - 0.01 * plot_width
    y_pos = 0.01 * plot_height
  } else if (logo_position == "top left") {
    x_pos = 0.01 * plot_width
    y_pos = 0.01 * plot_height
  } else if (logo_position == "bottom right") {
    x_pos = plot_width - logo_width - 0.01 * plot_width
    y_pos = plot_height - logo_height - 0.01 * plot_height
  } else if (logo_position == "bottom left") {
    x_pos = 0.01 * plot_width
    y_pos = plot_height - logo_height - 0.01 * plot_height
  }
  
  # Compose the actual overlay
  image_composite(plot, logo, offset = paste0("+", x_pos, "+", y_pos)) -> plot
  
  if (save == TRUE) {
    image_ggplot(plot)
    
    ggsave(
      plot_path,
      height = 8,
      width = 8,
      units = 'in',
      dpi = 'retina'
    )
  } else if (save == FALSE) {
    plot(plot)
  }
}

getESPNDraftPredictor <- function(x = 'All') {
  read_rds("../GrindingtheMocks-data/data/ESPN_Draft_Predictor.rds") %>%
    group_by(draft_year) %>%
    complete(name, pick) %>%
    group_by(name) %>%
    fill(draft_year,
         position,
         school,
         espn_rank,
         cumulative_espn,
         .direction = 'downup') %>%
    ungroup %>%
    mutate(
      probability_espn = coalesce(probability_espn, 0),
      round = coalesce(round, round_clean(pick, year = 2022))
    ) %>%
    group_by(draft_year, pick) %>%
    mutate(team = max(team, na.rm = TRUE)) %>%
    group_by(name) %>%
    mutate(cumulative_espn = cumsum(probability_espn)) %>%
    ungroup %>%
    arrange(draft_year, name, pick) %>%
    select(
      draft_year,
      name,
      position,
      school,
      espn_rank,
      round,
      pick,
      team,
      probability_espn,
      cumulative_espn
    ) -> prob
  
  suppressWarnings(if (x == 'All') {
    return(prob)
  } else {
    return(prob %>%
             filter(name %in% x))
  })
}

getProbabilities <- function(x = 'All') {
  read_rds("../GrindingtheMocks-data/data/Probabilities.rds") %>%
    select(-type) %>%
    group_by(draft_year) %>%
    complete(name, pick) %>%
    group_by(name) %>%
    fill(draft_year, position, school, cumulative, .direction = 'downup') %>%
    ungroup %>%
    mutate(probability = coalesce(probability, 0)) %>%
    group_by(draft_year, pick) %>%
    mutate(across(
      c("probability"),
      # .fns = list(norm = ~ (. ^ 3) / sum(. ^ 3)),
      .fns = list(norm = ~ (.) / sum(.)),
      .names = "{col}_{fn}"
    )) %>%
    arrange(desc(probability_norm)) %>%
    mutate(cumulative_norm = cumsum(probability_norm)) %>%
    ungroup %>%
    arrange(draft_year, name, pick) -> prob
  
  suppressWarnings(if (x == 'All') {
    return(prob)
  } else {
    return(prob %>%
             filter(name %in% x))
  })
}


getPosteriors <- function(x = 'All') {
  suppressWarnings(if (x == 'All') {
    read_rds("../GrindingtheMocks-data/data/Posteriors.rds") %>%
      select(-type)
  } else {
    read_rds("../GrindingtheMocks-data/data/Posteriors.rds") %>%
      filter(name %in% x) %>%
      select(-type)
  })
}

getActual() %>%
  # filter(draft_year == max(draft_year)) %>%
  select(draft_year,
         round = draft_round,
         pick = draft_pick) -> round_xwalk

round_clean <- function(x, year = 2024) {
  round_xwalk %>%
    filter(draft_year == year) %>%
    select(-draft_year) -> tmp
  return(structure(tmp$round,
                   names = tmp$pick)[x])
}

getActual() %>%
  distinct(team = draft_team) %>%
  filter(!is.na(team)) %>%
  mutate(
    location = case_when(
      str_count(team, " ") == 1 ~ word(team, 1),
      str_count(team, " ") == 2 &
        word(team, 1) != 'Washington' ~ word(team, 1, 2),
      TRUE ~ word(team, 1)
    ),
    location = case_when(
      team == "New York Jets" ~ "NY Jets",
      team == "New York Giants" ~ "NY Giants",
      team == "Los Angeles Chargers" ~ "LA Chargers",
      team == "Los Angeles Rams" ~ "LA Rams",
      TRUE ~ location
    ),
    mascot = case_when(
      str_count(team, " ") == 1 ~ word(team, 2),
      str_count(team, " ") == 2 &
        word(team, 1) != 'Washington' ~ word(team, 3),
      TRUE ~ word(team, 2, 3)
    ),
    team_name = team
  ) %>%
  left_join(
    'https://en.wikipedia.org/wiki/Wikipedia:WikiProject_National_Football_League/National_Football_League_team_abbreviations' %>%
      read_html %>%
      html_table %>%
      .[[1]] %>%
      slice(-1) %>%
      gather('team', 'abbr', -X1) %>%
      select(-team) %>%
      rename(team = X1) %>%
      distinct %>%
      add_row(team = 'Washington Commanders', abbr = 'WFT') %>%
      mutate(
        team = ifelse(team == 'Washington Football Team',
                      'Washington Commanders',
                      team)
      ),
    by = c('team')
  ) %>%
  gather(key, value, -team) %>%
  select(-key) %>%
  distinct %>%
  add_row(team = 'Washington Commanders', value = 'Washington Redskins') %>%
  add_row(team = 'Washington Commanders', value = 'Washington Football Team') %>%
  add_row(team = 'Washington Commanders', value = 'Washington Washington') %>%
  add_row(team = 'Washington Commanders', value = 'Football Team') %>%
  add_row(team = 'Washington Commanders', value = 'Redskins') %>%
  add_row(team = 'Washington Commanders', value = 'Was') %>%
  add_row(team = 'Las Vegas Raiders', value = 'Oakland Raiders') %>%
  add_row(team = 'Las Vegas Raiders', value = 'OAK') %>%
  add_row(team = 'Las Vegas Raiders', value = 'LVR') %>%
  add_row(team = 'Jacksonville Jaguars', value = 'Jags') %>%
  add_row(team = 'Tampa Bay Buccaneers', value = 'Bucs') %>%
  add_row(team = 'Green Bay Packers', value = 'GNB') %>%
  add_row(team = 'Kansas City Chiefs', value = 'KAN') %>%
  add_row(team = 'Kansas City Chiefs', value = 'KC Chiefs') %>%
  add_row(team = 'New Orleans Saints', value = 'NOR') %>%
  add_row(team = 'New England Patriots', value = 'NWE') %>%
  add_row(team = 'New England Patriots', value = 'Pats') %>%
  add_row(team = 'Minnesota Vikings', value = 'Vikes') %>%
  add_row(team = 'Los Angeles Chargers', value = 'San Diego Chargers') %>%
  add_row(team = 'San Francisco 49ers', value = "San Francisco 49âers") %>%
  add_row(team = 'San Francisco 49ers', value = "S.f. 49ers") %>%
  add_row(team = 'San Francisco 49ers', value = 'SFO') %>%
  add_row(team = 'San Francisco 49ers', value = 'San Francisco 49.ers') %>%
  add_row(team = 'Tampa Bay Buccaneers', value = 'TAM') %>%
  add_row(team = 'New York Jets', value = 'N.Y. Jets') %>%
  add_row(team = 'New York Giants', value = 'N.Y. Giants') %>%
  add_row(team = 'New York Jets', value = 'NY Jets') %>%
  add_row(team = 'New York Giants', value = 'NY Giants') %>%
  add_row(team = 'New York Jets', value = 'Ny Jets') %>%
  add_row(team = 'New York Giants', value = 'Ny Giants') %>%
  add_row(team = 'Los Angeles Rams', value = 'L.A. Rams') %>%
  add_row(team = 'Los Angeles Chargers', value = 'L.A. Chargers') %>%
  add_row(team = 'Los Angeles Chargers', value = 'La Chargers') %>%
  add_row(team = 'Los Angeles Chargers', value = 'SDG') %>%
  add_row(team = 'Arizona Cardinals', value = 'PHO') %>%
  add_row(team = 'Arizona Cardinals', value = 'AZ') %>%
  add_row(team = 'Arizona Cardinals', value = 'Cards') %>%
  add_row(team = 'Las Vegas Raiders', value = 'RAI') %>%
  add_row(team = 'Los Angeles Rams', value = 'RAM') %>%
  add_row(team = 'Los Angeles Rams', value = 'STL') %>%
add_row(team = 'Tennessee Titans', value = 'Tennesee') %>%
add_row(team = 'Tennessee Titans', value = 'Tennesee Titans') %>%
  add_row(team = 'Tennessee Titans', value = '  Tennesse Titans') %>%
  add_row(team = 'Tennessee Titans', value = 'TennesseeTitans') %>%
  add_row(team = 'Washington Commanders', value = 'Washington Football') %>%
  add_row(team = 'Tampa Bay Buccaneers', value = 'Tampa Bay Buccanneers') %>%
  add_row(team = 'Tampa Bay Buccaneers', value = 'Tampa Bay Bucs') %>%
  add_row(team = 'Jacksonville Jaguars', value = 'JAC') %>%
  add_row(team = "Los Angeles Chargers", value = "San Angeles Chargers") %>%
  add_row(team = 'Houston Texans', value = 'Houston Texas') %>%
  add_row(team = "Green Bay Packers", value = "Green Pay Packers") %>%
  add_row(team = "Tampa Bay Buccaneers", value = "Tampa Bay Buccs") %>%
  add_row(team = 'Washington Commanders', value = 'Washington FT') %>%
  add_row(team = 'Washington Commanders', value = 'Washington Pigskins') %>%
  add_row(team = 'Tennessee Titans', value = 'Tennessee Titan') %>%
  add_row(team = 'Tennessee Titans', value = 'Tenneessee Titans') %>%
  add_row(team = 'Cincinnati Bengals', value = 'Cincinatti Bengals') %>%
  add_row(team = 'Jacksonville Jaguars', value = 'Jaksonville Jaguars') %>%
  add_row(team = 'Philadelphia Eagles', value = 'Phialadelphia') %>%
  add_row(team = 'Philadelphia Eagles', value = 'Philidelphia Eagles') %>%
  add_row(team = 'Los Angeles Chargers', value = 'Lose Angeles Chargers') %>%
  add_row(team = 'Washington Commanders', value = 'Washinton') %>%
  add_row(team = 'Los Angeles Chargers', value = 'Los Angles Chargers') %>%
  add_row(team = 'San Francisco 49ers', value = 'San Fransico 49ers') %>%
  add_row(team = 'San Francisco 49ers', value = 'S.F. 49ers') %>%
  add_row(team = 'San Francisco 49ers', value = "San Francisco 49âers") %>%
  add_row(team = 'San Francisco 49ers', value = 'San Franciso 49ers') %>%
  add_row(team = 'San Francisco 49ers', value = "San Francisco 49'ers") %>%
  add_row(team = 'Detroit Lions', value = 'Detriot Lions') %>%
  add_row(team = 'Cleveland Browns', value = 'Bowns') %>%
  add_row(team = 'Philadelphia Eagles', value = 'Phladelphis Eagles') %>%
  add_row(team = 'Philadelphia Eagles', value = 'Philadephia Eagles') %>%
  add_row(team = 'New England Patriots', value = 'NEP') %>%
  add_row(team = 'New Orleans Saints', value = 'NOS') %>%
  add_row(team = 'New Orleans Saints', value = 'NO Saints') %>%
  add_row(team = 'Arizona Cardinals', value = 'ARZ') %>%
  add_row(team = 'Arizona Cardinals', value = 'Arizona Falcons') %>%
  add_row(team = 'Green Bay Packers', value = 'GBP') %>%
  add_row(team = 'San Francisco 49ers', value = "San Francisco 49âers") %>%
  add_row(team = "Tampa Bay Buccaneers", value = "TBB") %>%
  add_row(team = "Tampa Bay Buccaneers", value = 'Tampa Bay Buccanears') %>%
  add_row(team = "Tampa Bay Buccaneers", value = 'Tamba Bay Buccaneers') %>%
  add_row(team = 'Washington Commanders', value = 'The Washington Commanders') %>%
  add_row(team = 'Las Vegas Raiders', value = 'Oakland') %>%
  add_row(team = 'Las Vegas Raiders', value = 'LV Raiders') %>%
  add_row(team = 'Philadelphia Eagles', value = 'Philly') %>%
  add_row(team = 'Philadelphia Eagles', value = 'Philly Eagles') %>%
  add_row(team = 'Jacksonville Jaguars', value = 'JAX') %>%
  add_row(team = 'Washington Commanders', value = 'WSH') %>%
  add_row(team = 'Houston Texans', value = 'HST') %>%
  add_row(team = 'Baltimore Ravens', value = 'BLT') %>%
  add_row(team = 'Cleveland Browns', value = 'CLV') %>%
  add_row(team = 'Los Angeles Rams', value = 'LA') %>%
  add_row(team = 'Chicago Bears', value = 'Chciago Bears') %>%
  add_row(team = 'Tampa Bay Buccaneers', value = 'Tampa Bay Bucaneers') %>%
  add_row(team = 'Pittsburgh Steelers', value = 'Pitsburgh Steelers') %>%
  arrange(team) %>%
  distinct -> team_xwalk

	

team_clean <- function(x) {
  x <- stringi::stri_trans_general(x, "Latin-ASCII")
  return(structure(team_xwalk$team, names = team_xwalk$value)[x])
}

# getDraftAV <- function(x = 2018) {
#   message(paste("Scraping", x, "Draft Class AV"))
#   paste0('https://www.pro-football-reference.com/years/',
#          x,
#          '/draft.htm') %>%
#     read_html %>%
#     html_table %>%
#     .[[1]] %>%
#     setNames(paste0(names(.), .[1,])) %>%
#     clean_names %>%
#     filter(rnd != 'Rnd') %>%
#     rename(
#       draft_round = rnd,
#       draft_pick = pick,
#       draft_team = tm,
#       position = pos,
#       name = player,
#       school = college_univ
#     ) %>%
#     select(-x) %>%
#     mutate_at(vars(-draft_team, -name, -school, -position),
#               ~ as.numeric(.)) %>%
#     mutate_if(is.character, str_squish) %>%
#     mutate(
#       school = school_clean(school),
#       position = position_clean(position %>% toupper),
#       position = ifelse(position == '', NA, position),
#       name = name_special(name, school),
#       name = name_clean(name),
#       draft_team = coalesce(team_clean(draft_team), draft_team),
#       draft_year = x
#     ) %>%
#     as_tibble
# }

# list((
#   getActual() %>%
#     filter(draft_year == min(draft_year[!is.na(name)])) %>%
#     distinct(draft_year) %>%
#     pull
# ):(
#   getActual() %>%
#     filter(draft_year == max(draft_year[!is.na(name)])) %>%
#     distinct(draft_year) %>%
#     pull
# )
# ) %>% pmap_dfr(getDraftAV) -> draft_av

# data.frame(av_weight = seq(0, 1, .05) %>% rev,
#            av_rank = 1:(seq(0, 1, .05) %>% length)) -> av_xwalk

data.frame(
  # abv = 'https://www.pro-football-reference.com/teams/' %>%
  #   read_html %>%
  #   html_nodes('a') %>%
  #   html_attr('href') %>%
  #   .[grepl("teams", .)] %>%
  #   gsub("/teams/", "", .) %>%
  #   gsub("[/].*", "", .) %>%
  #   unique %>%
  #   .[. != ''],
  abv = c(
    'crd',
    'atl',
    'rav',
    'buf',
    'car',
    'chi',
    'cin',
    'cle',
    'dal',
    'den',
    'det',
    'gnb',
    'htx',
    'clt',
    'jax',
    'kan',
    'rai',
    'sdg',
    'ram',
    'mia',
    'min',
    'nwe',
    'nor',
    'nyg',
    'nyj',
    'phi',
    'pit',
    'sfo',
    'sea',
    'tam',
    'oti',
    'was'
  ),
  name = c(
    "Arizona Cardinals",
    "Atlanta Falcons",
    "Baltimore Ravens",
    "Buffalo Bills",
    "Carolina Panthers",
    "Chicago Bears",
    "Cincinnati Bengals",
    "Cleveland Browns",
    "Dallas Cowboys",
    "Denver Broncos",
    "Detroit Lions",
    "Green Bay Packers",
    "Houston Texans",
    "Indianapolis Colts",
    "Jacksonville Jaguars",
    "Kansas City Chiefs",
    "Las Vegas Raiders",
    "Los Angeles Chargers",
    "Los Angeles Rams",
    "Miami Dolphins",
    "Minnesota Vikings",
    "New England Patriots",
    "New Orleans Saints",
    "New York Giants",
    "New York Jets",
    "Philadelphia Eagles",
    "Pittsburgh Steelers",
    "San Francisco 49ers",
    "Seattle Seahawks",
    "Tampa Bay Buccaneers",
    "Tennessee Titans",
    "Washington Commanders"
  )
) -> team_cross

# getRosterSnaps <-
#   function(team = 'Cincinnati Bengals', season = 2020) {
#     message(paste("Scraping", season, team, "Roster snaps data."))
#     suppressMessages(
#       paste0(
#         'https://www.pro-football-reference.com/teams/',
#         team_cross$abv[team_cross$name == team],
#         '/',
#         season,
#         '-snap-counts.htm'
#       ) %>%
#         read_html %>%
#         gsub("<!--", "", .) %>%
#         gsub("-->", "", .) %>%
#         read_html %>%
#         html_table %>%
#         bind_rows %>%
#         setNames(
#           c(
#             'name',
#             'position',
#             'offensive_snaps',
#             'offensive_snap_rate',
#             'defensive_snaps',
#             'defensive_snap_rate',
#             'special_team_snaps',
#             'special_team_snap_rate',
#             'link'
#           )
#         ) %>%
#         slice(-1) %>%
#         select(-link) %>%
#         mutate_at(vars(contains("snaps")), ~ as.numeric(.)) %>%
#         mutate_at(vars(contains("snap_rate")), ~ as.numeric(sub("[%]", "", .)) /
#                     100) %>%
#         mutate(total_snaps = offensive_snaps + defensive_snaps + special_team_snaps) %>%
#         mutate_if(is.character, ~ str_squish(.)) %>%
#         arrange(desc(total_snaps))
#     )
#     
#   }

# getAV_Draft <- function() {
#   readRDS("../GrindingtheMocks-data/data/PFR_Draft_AV.rds")
# }

getAV_Roster <- function() {
  readRDS("../GrindingtheMocks-data/data/PFR_Roster_AV.rds")
}

getPFR_RosterAV <- function(team = 'Cincinnati Bengals', season = 2022) {
  Sys.sleep(5)
  message(paste("Scraping", season, team, "Roster Data."))
  html_scrape <- paste0(
    'https://www.pro-football-reference.com/teams/',
    team_cross$abv[team_cross$name == team],
    '/',
    season,
    '_roster.htm'
  ) %>%
    request() %>%
    req_retry(max_tries = 1) %>%
    req_user_agent('Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:107.0) Gecko/20100101 Firefox/107.0') %>%
    req_perform() %>%
    resp_body_html()
  
  table_node <- html_scrape %>%
    gsub("<!--", "", .) %>%
    gsub("-->", "", .) %>%
    read_html() %>%
    html_element('#roster')
  
  pfr_ids <- table_node %>%
    html_elements("tr th[data-stat='player'],td[data-stat='player']") %>%
    html_attr("data-append-csv") %>%
    na.omit
  
  draft_table <- table_node %>%
    html_table() %>%
    clean_names() %>%
    filter(pos != '') %>%
    mutate(
      season = season,
      team = team,
      pfr_id = pfr_ids,
      across(where(is.character), ~ ifelse(. == '', NA, .)),
      college_univ = sub(".*[,]", "", college_univ),
      college_univ = school_clean(college_univ),
      pos = position_clean(pos),
      player = name_clean(player),
      player = name_special(player, college_univ)
    ) %>%
    select(
      season,
      team,
      pfr_id,
      name = player,
      position = pos,
      school = college_univ,
      g,
      gs,
      av
    )
  return(draft_table)
}

# getRosterAV <-
#   function(team = 'Cincinnati Bengals', season = 2020) {
#     message(paste("Scraping", season, team, "Roster AV data."))
#     paste0(
#       'https://www.pro-football-reference.com/teams/',
#       team_cross$abv[team_cross$name == team],
#       '/',
#       season,
#       '_roster.htm'
#     ) %>%
#       read_html %>%
#       gsub("<!--", "", .) %>%
#       gsub("-->", "", .) %>%
#       read_html %>%
#       html_table %>%
#       .[[max(length(.))]] %>%
#       clean_names %>%
#       filter(player != 'Team Total') %>%
#       rename(name = player,
#              position = pos,
#              school = college_univ) %>%
#       separate(
#         drafted_tm_rnd_yr,
#         sep = '/',
#         into = c('draft_team', 'draft_round', 'draft_pick', 'draft_year'),
#         fill = 'right'
#       ) %>%
#       mutate_at(vars(draft_round, draft_pick, draft_year),
#                 ~ gsub("[^0-9.-]", "", .) %>% as.numeric) %>%
#       rowwise %>%
#       mutate(
#         school = str_split(school, ',') %>% unlist %>% tail(1),
#         school = school_clean(school),
#         position = position_clean(position %>% toupper),
#         position = ifelse(position == '', NA, position),
#         name = gsub("[*]", "", name),
#         name = gsub("[+]", "", name) %>% str_squish,
#         name = name_special(name, school),
#         name = name_clean(name),
#         draft_team = team_clean(draft_team),
#         draft_team = coalesce(draft_team, 'Undrafted'),
#         yrs = ifelse(yrs == 'Rook', '0', yrs) %>% as.numeric,
#         season = season,
#         team = team,
#         birth_date = as.Date(birth_date, "%m/%d/%Y")
#       ) %>%
#       ungroup -> pfr
#     
#     # if (season >= 2015) {
#     #   pfr$salary <-  gsub('\\$|,', '', pfr$salary) %>% as.numeric
#     #
#     #   return(pfr)
#     # } else {
#     #   return(pfr)
#     # }
#   }

# getRAS <- function() {
#   'https://www.profootballnetwork.com/nfl-draft-relative-athletic-scores-math-bomb/' %>%
#     read_html %>%
#     html_table %>%
#     bind_rows %>%
#     clean_names %>%
#     rename(name = prospect) %>%
#     mutate(
#       name = name_special(name, school),
#       name = name_clean(name),
#       school = school_clean(school),
#       ras_rank = dense_rank(-ras),
#       ras_perc = percent_rank(ras)
#     ) %>%
#     group_by(position) %>%
#     mutate(pos_rank = dense_rank(-ras),
#            pos_perc = percent_rank(ras)) %>%
#     ungroup %>%
#     mutate_all(~ ifelse(. == 'N/A', NA, .))
# }

# getDeclarations <- function() {
#   'https://www.ourlads.com/nfl-draft-declared-juniors/default/2021' %>%
#     read_html -> web
#
#   bind_rows(
#     paste(
#       web %>%
#         html_nodes('.asg-player') %>%
#         html_text,
#       web %>%
#         html_nodes(".top32-college") %>%
#         html_text %>%
#         str_squish,
#       sep = ', '
#     ) %>%
#       as.data.frame %>%
#       setNames('draft') %>%
#       separate(
#         draft,
#         sep = ', ',
#         into = c('name', 'position', 'school')
#       ) %>%
#       mutate(site = 'Our Lads'),
#     'https://www.si.com/nfl/draft/news/nfldraftdeclarations/' %>%
#       read_html %>%
#       html_nodes("p") %>%
#       html_text %>%
#       gsub("Etienne[.]", "Etienne,", .) %>%
#       gsub("Smith[.]", "Smith,", .) %>%
#       gsub("McKnight[.]", "McKnight,", .) %>%
#       gsub("Chatarius 'Tutu'", "Tutu", .) %>%
#       gsub("JaMarr", "Ja'Marr", .) %>%
#       as.data.frame %>%
#       setNames('draft') %>%
#       separate(
#         draft,
#         sep = ',',
#         into = c('position', 'name', 'school')
#       ) %>%
#       mutate(site = "NFL Draft Bible")
#   ) %>%
#     mutate_all(~ str_squish(.)) %>%
#     mutate(
#       draft_year = 2021,
#       name = name_clean(name),
#       position = position_clean(position),
#       school = school_clean(school)
#     ) %>%
#     clean_draft %>%
#     select(draft_year, name, position, school, site) %>%
#     arrange(name, site) %>%
#     as_tibble
# }

getOTC_FS <- function() {
  'https://overthecap.com/draft-trade-value-chart/' %>%
    read_html %>%
    html_table %>%
    lapply(clean_names) %>%
    bind_rows %>%
    select_if(~ all(!is.na(.))) %>%
    select(-contains("pick")) %>%
    rename(value_1 = value) %>%
    pivot_longer(
      cols = starts_with("value_"),
      names_to = "draft_pick",
      values_to = "pick_fs",
      values_drop_na = TRUE
    ) %>%
    arrange(desc(pick_fs)) %>%
    mutate(draft_pick = row_number()) -> tmp
  
  getActual() %>%
    filter(max(draft_pick) == draft_pick) %>%
    pull(draft_pick) -> max_pick
  
  tmp %>%
    filter(max(draft_pick) == draft_pick) %>%
    pull(draft_pick) -> max_fs
  
  return(
    bind_rows(
      tmp,
      data.frame(draft_pick = seq(from = max_fs, to = max_pick + 1, by = 1)) %>%
        mutate(
          pick_fs = tmp[tmp$draft_pick == max_fs,]$pick_fs,
          subt = seq(
            from = 0,
            to = 2 * (length(seq(
              from = max_fs, to = max_pick + 1, by = 1
            ))) - 1,
            by = 2),
          pick_fs = pick_fs - subt
        ) %>%
        select(-subt) %>%
        slice(-1)
    ) %>%
      distinct
  )
}

fs_chart <- getOTC_FS()

fs_clean <- function(x) {
  structure(fs_chart$pick_fs,
            names = fs_chart$draft_pick)[x]
}

suppressWarnings(windowsFonts("Tahoma" = windowsFont("Tahoma")))

theme_gtm <- function(base_size = 14,
                      base_family = "Tahoma") {
  (
    theme_foundation(base_size = base_size, base_family = base_family)
    + theme(
      plot.title = element_text(
        face = "bold",
        size = rel(1.2),
        hjust = 0.5
      ),
      text = element_text(),
      panel.background = element_rect(colour = NA),
      plot.background = element_rect(colour = NA),
      panel.border = element_rect(colour = NA),
      axis.title = element_text(face = "bold", size = rel(1)),
      axis.title.y = element_text(angle = 90, vjust = 2),
      axis.title.x = element_text(vjust = -0.2),
      axis.text = element_text(),
      axis.line.x = element_line(colour = "black"),
      axis.line.y.left = element_line(colour = "black"),
      axis.line.y.right  = element_blank(),
      axis.ticks = element_line(),
      panel.grid.major = element_line(colour = "#f0f0f0"),
      panel.grid.minor = element_blank(),
      legend.key = element_rect(colour = NA),
      legend.position = "bottom",
      legend.direction = "horizontal",
      legend.key.size = unit(0.2, "cm"),
      legend.spacing = unit(0, "cm"),
      legend.title = element_text(face = "bold"),
      plot.margin = unit(c(15, 5, 5, 5), "mm"),
      plot.subtitle = element_text(hjust = 0.5),
      plot.caption = element_text(hjust = 0.5),
      strip.background = element_rect(colour = "#f0f0f0", fill = "#f0f0f0"),
      strip.text = element_text(face = "bold")
    )
  )
  
}

## FOUND IN MetR
reverselog_trans <- function(base = exp(1)) {
  trans <- function(x)
    - log(x, base)
  inv <- function(x)
    base ^ (-x)
  trans_new(
    paste0("reverselog-", format(base)),
    trans,
    inv,
    log_breaks(base = base),
    domain = c(1e-100, Inf)
  )
}

stockChart <- function(x = 'Baker Mayfield',
                       round = 'auto',
                       mock_type = 'All',
                       scale = 'linear',
                       yaxis = 'round',
                       gif = FALSE) {
  if (mock_type == 'All') {
    getDraftData(x) %>%
      group_by(draft_year, name, position, school) %>%
      # filter(n() >= 10 & n_distinct(site) >= 10) %>%
      filter(sum(!is.na(round)) >= 10 &
               n_distinct(site[!is.na(round)]) >= 10) %>%
      ungroup -> tmp
  } else {
    getDraftData(x) %>%
      filter(type %in% mock_type) %>%
      group_by(draft_year, name, position, school) %>%
      # filter(n() >= 10 & n_distinct(site) >= 10) %>%
      filter(sum(!is.na(round)) >= 10 &
               n_distinct(site[!is.na(round)]) >= 10) %>%
      ungroup -> tmp
  }
  
  if (nrow(tmp) == 0) {
    stop("Not enough data (or a spelling error).")
  }
  
  tmp %>%
    left_join(
      getEDP() %>%
        filter(type == 'All') %>%
        select(-type,-n,-n_total),
      by = c('draft_year', 'name', 'position', 'school')
    ) %>%
    group_by(name) %>%
    mutate(
      predict = loess(pick ~ draft_weight,
                      weights = log_mse_norm)$fitted,
      predict = ifelse(predict < 1, 1,
                       ifelse(predict > 256, 256, predict)),
      days_to_draft = (draft_date - date) %>% as.numeric,
      date_lag = lag(date),
      date_lag = coalesce(date_lag, date),
      dtd_lag = lag(days_to_draft),
      dtd_lag = coalesce(dtd_lag, days_to_draft),
      rowid = row_number()
    )  %>%
    ungroup %>%
    distinct -> tmp
  
  tmp %>%
    select(-predict) %>%
    left_join(
      tmp %>%
        count(name, date, predict) %>%
        group_by(name, date) %>%
        filter(n == max(n)) %>%
        group_by(name) %>%
        mutate(
          predict_lag = lag(predict),
          predict_lag = coalesce(predict_lag, predict),
          n = NULL
        ) %>%
        ungroup,
      by = c("date", "name")
    ) -> tmp
  
  if (round == 'auto') {
    round = suppressWarnings(
      c(
        getActual() %>%
          filter(draft_year %in% unique(tmp$draft_year)) %>%
          group_by(draft_year, draft_round) %>%
          summarize(min = min(draft_pick),
                    max = max(draft_pick)) %>%
          rowwise %>%
          mutate(ind = case_when(
            between(max(c(tmp$predict, tmp$edp_rank)) %>% round, min, max) ~ 1,
            !between(max(c(tmp$predict, tmp$edp_rank)) %>% round, min, max) ~ 0
          )) %>%
          ungroup %>%
          mutate(
            max_round = max(draft_round),
            all_zero = all(ind == 0),
            ind = ifelse(draft_round == max_round &
                           all_zero == TRUE, 1, ind)
          ) %>%
          filter(ind == 1) %>%
          pull(draft_round) %>%
          unique,
        if (length(unique(tmp$name)) == 1) {
          getActual() %>%
            filter(name %in% unique(tmp$name)) %>%
            pull(draft_round) %>%
            unique
        }
      ) %>%
        max
    )
    
    round = ifelse(
      round == -Inf |
        (
          tmp$draft_round %>% unique %>% is.na(.) &
            Sys.Date() >= unique(tmp$draft_date) + 3
        ),
      7,
      round
    ) %>%
      max
  }
  
  if (round == 1) {
    y = c(
      1,
      5,
      10,
      16,
      24,
      round_xwalk %>%
        filter(draft_year %in% unique(tmp$draft_year), round <= 1) %>%
        group_by(round) %>%
        summarize(max_pick = max(pick)) %>%
        pull(max_pick)
    )
    z = c(
      round_xwalk %>%
        filter(draft_year %in% unique(tmp$draft_year), round == 1) %>%
        summarize(max(pick)) %>%
        pull,
      1
    )
  } else if (round == 2) {
    y = c(
      1,
      10,
      16,
      24,
      round_xwalk %>%
        filter(draft_year %in% unique(tmp$draft_year), round <= 2) %>%
        group_by(round) %>%
        summarize(max_pick = max(pick)) %>%
        pull(max_pick)
    )
    z = c(
      round_xwalk %>%
        filter(draft_year %in% unique(tmp$draft_year), round == 2) %>%
        summarize(max(pick)) %>%
        pull,
      1
    )
  } else if (round == 3) {
    y = c(
      1,
      round_xwalk %>%
        filter(draft_year %in% unique(tmp$draft_year), round <= 3) %>%
        group_by(round) %>%
        summarize(max_pick = max(pick)) %>%
        pull(max_pick)
    )
    z = c(
      round_xwalk %>%
        filter(draft_year %in% unique(tmp$draft_year), round == 3) %>%
        summarize(max(pick)) %>%
        pull,
      1
    )
  } else if (round == 4) {
    y = c(
      1,
      round_xwalk %>%
        filter(draft_year %in% unique(tmp$draft_year), round <= 4) %>%
        group_by(round) %>%
        summarize(max_pick = max(pick)) %>%
        pull(max_pick)
    )
    z = c(
      round_xwalk %>%
        filter(draft_year %in% unique(tmp$draft_year), round == 4) %>%
        summarize(max(pick)) %>%
        pull,
      1
    )
  } else if (round == 5) {
    y = c(
      1,
      round_xwalk %>%
        filter(draft_year %in% unique(tmp$draft_year), round <= 5) %>%
        group_by(round) %>%
        summarize(max_pick = max(pick)) %>%
        pull(max_pick)
    )
    z = c(
      round_xwalk %>%
        filter(draft_year %in% unique(tmp$draft_year), round == 5) %>%
        summarize(max(pick)) %>%
        pull,
      1
    )
  } else if (round == 6) {
    y = c(
      1,
      round_xwalk %>%
        filter(draft_year %in% unique(tmp$draft_year), round <= 6) %>%
        group_by(round) %>%
        summarize(max_pick = max(pick)) %>%
        pull(max_pick)
    )
    z = c(
      round_xwalk %>%
        filter(draft_year %in% unique(tmp$draft_year), round == 6) %>%
        summarize(max(pick)) %>%
        pull,
      1
    )
  } else if (round == 7) {
    y = c(
      1,
      round_xwalk %>%
        filter(draft_year %in% unique(tmp$draft_year), round <= 7) %>%
        group_by(round) %>%
        summarize(max_pick = max(pick)) %>%
        pull(max_pick)
    )
    z = c(
      round_xwalk %>%
        filter(draft_year %in% unique(tmp$draft_year), round == 7) %>%
        summarize(max(pick)) %>%
        pull,
      1
    )
  }
  
  case_when(
    (unique(tmp$draft_date) < Sys.Date()) &
      !is.na(unique(tmp$draft_pick)) ~ tmp$draft_pick %>% unique,
    (unique(tmp$draft_date) < Sys.Date()) &
      is.na(unique(tmp$draft_pick)) ~ getActual() %>%
      filter(draft_year %in% unique(tmp$draft_year), draft_round == 7) %>%
      pull(draft_pick) %>%
      max + 1,
    TRUE ~ getEDP() %>%
      filter(name %in% x, type == 'All') %>%
      pull(edp_rank)
  ) -> est
  
  if ((tmp$name %>% unique %>% length) == 1) {
    tmp %>%
      # filter(pick <= max(z)) %>%
      ggplot() +
      geom_point(aes(
        x = date,
        y = pick,
        color = type,
        group = rowid
      ),
      alpha = .4,
      size = 3) +
      geom_hline(aes(
        yintercept = est,
        linetype = ifelse(unique(draft_date) < Sys.Date(),
                          'solid',
                          'dashed'),
        size = ifelse(unique(draft_date) < Sys.Date(),
                      1.5,
                      1)
      ),
      na.rm = TRUE) +
      scale_size_identity() +
      labs(
        x = "Mock Draft Date",
        y = "Mock Draft Pick",
        color = "Draft Type",
        title = paste0(
          tmp$name,
          " (",
          tmp$position,
          ", ",
          tmp$school,
          ", '",
          substring(tmp$draft_year, 3, 4),
          ")",
          ifelse(mock_type == 'All', '', paste0(" | ",
                                                mock_type,
                                                " Mocks"))
        ) %>% unique,
        caption = gtm_caption()
      ) +
      theme_gtm() +
      scale_x_date(date_breaks = "2 month",
                   labels = scales::date_format("%b '%y")) +
      scale_linetype_identity() +
      scale_y_reverse(
        breaks = y,
        sec.axis = dup_axis(
          breaks = est,
          labels = function(x) {
            ifelse((
              is.na(tmp$draft_round %>% unique) &
                unique(tmp$draft_date) < Sys.Date()
            ) |
              est == 1,
            '',
            as.character(est))
          },
          name = NULL,
        ),
        labels = function(x) {
          case_when(
            yaxis == 'pick' ~ as.character(x),
            x == round_xwalk %>%
              filter(draft_year %in% unique(tmp$draft_year), round == 1) %>%
              summarize(max(pick)) %>%
              pull ~ "Rd. 2",
            x == round_xwalk %>%
              filter(draft_year %in% unique(tmp$draft_year), round == 2) %>%
              summarize(max(pick)) %>%
              pull ~ "Rd. 3",
            x == (
              round_xwalk %>%
                filter(draft_year %in% unique(tmp$draft_year), round == 3) %>%
                summarize(max(pick)) %>%
                pull
            ) ~ 'Rd. 4',
            x == (
              round_xwalk %>%
                filter(draft_year %in% unique(tmp$draft_year), round == 4) %>%
                summarize(max(pick)) %>%
                pull
            ) ~ 'Rd. 5',
            x == (
              round_xwalk %>%
                filter(draft_year %in% unique(tmp$draft_year), round == 5) %>%
                summarize(max(pick)) %>%
                pull
            ) ~ 'Rd. 6',
            x == (
              round_xwalk %>%
                filter(draft_year %in% unique(tmp$draft_year), round == 6) %>%
                summarize(max(pick)) %>%
                pull
            ) ~ 'Rd. 7',
            x == (
              round_xwalk %>%
                filter(draft_year %in% unique(tmp$draft_year), round == 7) %>%
                summarize(max(pick)) %>%
                pull
            ) ~ 'Undrafted',
            TRUE ~ as.character(x)
          )
        }
      ) +
      coord_cartesian(ylim = z,
                      xlim = c(min(tmp$min_date),
                               min(tmp$draft_date))) +
      # scale_color_tableau('Color Blind') 
      scale_color_manual(values = setNames(
        c(astro_orange(), "dodgerblue", "#A2AAAD"),
        c("Fan", "Expert", "Media")
      )) -> chrt
    
    if (gif == TRUE) {
      chrt +
        geom_segment(
          aes(
            x = date,
            y = predict,
            xend = date_lag,
            yend = predict_lag,
            group = rowid
          ),
          color = "blue",
          linewidth = 1.5
        ) -> chrt
    } else {
      chrt +
        geom_line(aes(x = date,
                      y = predict,
                      group = name),
                  color = "blue",
                  linewidth = 1.5) -> chrt
    }
    
    if ((Sys.Date() >= (unique(tmp$draft_date))) |
        (!is.na(unique(tmp$draft_pick)))) {
      suppressWarnings(chrt +
                         labs(
                           subtitle = paste0(
                             ifelse(
                               !is.na(tmp$draft_team %>% unique),
                               paste0(
                                 tmp$draft_team %>% unique,
                                 ":",
                                 " Rd. ",
                                 tmp$draft_round %>% unique,
                                 ", Pick ",
                                 tmp$draft_pick %>% unique,
                                 " (",
                                 tmp$draft_rank %>% unique,
                                 ")"
                               ),
                               'Undrafted'
                             ),
                             " | EDP: ",
                             tmp$edp %>% unique %>% round(1),
                             " (Rank: ",
                             ifelse(
                               tmp$edp_rank %>% unique == (unique(tmp$max_pick) + 1),
                               'Undrafted',
                               tmp$edp_rank %>% unique
                             ),
                             ", ",
                             tmp$pos_rank %>% unique,
                             ")"
                           )
                         ) +
                         theme(plot.subtitle = element_text(hjust = 0.5))) -> chrt
      
    } else {
      chrt <- chrt  +
        labs(
          subtitle = paste0(
            "Expected Draft Position: ",
            tmp$edp  %>% unique %>% round(1),
            " (Rank: ",
            ifelse(
              tmp$edp_rank %>% unique == (unique(tmp$max_pick) + 1),
              'Undrafted',
              tmp$edp_rank %>% unique
            ),
            ", ",
            tmp$pos_rank %>% unique,
            ")"
          )
        ) +
        theme(plot.subtitle = element_text(hjust = 0.5))
    }
    
    
  } else {
    if ((tmp$draft_year %>% unique %>% length) > 1) {
      tmp %>%
        filter(pick <= max(z)) %>%
        ggplot() +
        labs(
          x = "Days to Draft",
          y = "Mock Draft Pick",
          color = NULL,
          linetype = 'Player Name',
          # title = paste0(
          #   paste(tmp$name %>% unique %>% sort, collapse = " | "),
          #   " (",
          #   mock_type,
          #   " Mocks)"
          # ),
          title = paste0(
            tmp$name %>% unique,
            " (",
            # tmp$position %>% unique,
            "'",
            substring(tmp$draft_year %>% unique, 3, 4),
            ")",
            collapse = " | "
          ),
          subtitle = tmp %>%
            distinct(name, edp, edp_rank, pos_rank) %>%
            arrange(name) %>%
            summarize(
              paste0(
                "EDP: ",
                edp %>% round(1),
                " (Rank:",
                edp_rank,
                ", ",
                pos_rank,
                ")"
              )
            ) %>%
            pull %>%
            paste(collapse = ' | '),
          caption = gtm_caption()
        ) +
        theme_gtm() +
        scale_x_reverse() +
        scale_y_reverse(
          breaks = y,
          labels = function(x) {
            case_when(
              yaxis == 'pick' ~ as.character(x),
              x == round_xwalk %>%
                filter(draft_year %in% unique(tmp$draft_year), round == 1) %>%
                summarize(max(pick)) %>%
                pull ~ "Rd. 2",
              x == round_xwalk %>%
                filter(draft_year %in% unique(tmp$draft_year), round == 2) %>%
                summarize(max(pick)) %>%
                pull ~ "Rd. 3",
              x == (
                round_xwalk %>%
                  filter(draft_year %in% unique(tmp$draft_year), round == 3) %>%
                  summarize(max(pick)) %>%
                  pull
              ) ~ 'Rd. 4',
              x == (
                round_xwalk %>%
                  filter(draft_year %in% unique(tmp$draft_year), round == 4) %>%
                  summarize(max(pick)) %>%
                  pull
              ) ~ 'Rd. 5',
              x == (
                round_xwalk %>%
                  filter(draft_year %in% unique(tmp$draft_year), round == 5) %>%
                  summarize(max(pick)) %>%
                  pull
              ) ~ 'Rd. 6',
              x == (
                round_xwalk %>%
                  filter(draft_year %in% unique(tmp$draft_year), round == 6) %>%
                  summarize(max(pick)) %>%
                  pull
              ) ~ 'Rd. 7',
              x == (
                round_xwalk %>%
                  filter(draft_year %in% unique(tmp$draft_year), round == 7) %>%
                  summarize(max(pick)) %>%
                  pull
              ) ~ 'Undrafted',
              TRUE ~ as.character(x)
            )
          }
        ) +
        coord_cartesian(ylim = z,
                        xlim = c((
                          min(tmp$draft_date) - min(tmp$date)
                        ) %>% as.numeric, 0),
                        clip = 'off') +
        scale_color_tableau('Color Blind') +
        # scale_color_manual(values = setNames(
        #   c(astro_orange(), "dodgerblue", "#A2AAAD"),
        #   c("Fan", "Expert", "Media")
        # )) +
        theme(plot.subtitle = element_text(hjust = 0.5),
              legend.position = 'top',
              plot.margin = margin(1.5, 4.5, 0.5, 0.5, "cm")) -> chrt
      
      if (gif == TRUE) {
        chrt +
          geom_point(
            aes(
              x = days_to_draft,
              y = pick,
              color = name,
              group = rowid
            ),
            alpha = .1,
            size = 2
          ) +
          geom_segment(
            aes(
              x = days_to_draft,
              y = predict,
              xend = dtd_lag,
              yend = predict_lag,
              group = rowid
            ),
            color = "blue",
            linewidth = 1.5
          ) -> chrt
      } else {
        chrt +
          geom_point(
            aes(
              x = days_to_draft,
              y = pick,
              color = name,
              group = name
            ),
            alpha = .05,
            size = 2
          ) +
          geom_line(aes(
            x = days_to_draft,
            y = predict,
            color = name,
            group = name
          ),
          linewidth = 1.5) +
          geom_dl(
            aes(
              x = days_to_draft,
              y = predict,
              color = name,
              group = name,
              label = paste0(
                paste(substring(word(name, 1), 0, 1),
                      coalesce(word(name, 2, 3), word(name, 2)),
                      sep = '. '),
                " (",
                round(edp, 1),
                " | ",
                ordinal(edp_rank),
                ")"
              )
            ),
            method = list(
              dl.trans(x = x + 0.2),
              "last.bumpup",
              cex = 1,
              fontface = 'bold'
            )
          ) -> chrt
      }
      
    } else {
      tmp %>%
        filter(pick <= max(z+1)) %>%
        ggplot() +
        labs(
          x = "Mock Draft Date",
          y = "Mock Draft Pick",
          color = NULL,
          linetype = 'Player Name',
          # title = paste0(
          #   paste(tmp$name %>% unique %>% sort, collapse = " | "),
          #   " (",
          #   mock_type,
          #   " Mocks)"
          # ),
          title = tmp %>%
            arrange(edp_rank, name) %>%
            summarize(paste0(.$name %>% unique,
                             # " (",
                             # .$position %>% unique,
                             # ")",
                             collapse = " | ")) %>%
            pull,
          subtitle = tmp %>%
            distinct(name, edp, edp_rank, pos_rank) %>%
            arrange(edp_rank, name) %>%
            summarize(
              paste0(
                "EDP: ",
                edp %>% round(1),
                " (Rank:",
                edp_rank,
                ", ",
                pos_rank,
                ")"
              )
            ) %>%
            pull %>%
            paste(collapse = ' | '),
          caption = gtm_caption()
        ) +
        theme_gtm() +
        theme(plot.margin = margin(1.5, 4.5, 0.5, 0.5, "cm")) +
        scale_x_date(
          date_breaks = "2 month",
          labels = scales::date_format("%b '%y"),
          # expand = expansion(mult = c(0, .45))
        ) +
        scale_y_reverse(
          breaks = y,
          labels = function(x) {
            case_when(
              yaxis == 'pick' ~ as.character(x),
              x == round_xwalk %>%
                filter(draft_year %in% unique(tmp$draft_year), round == 1) %>%
                summarize(max(pick)) %>%
                pull ~ "Rd. 2",
              x == round_xwalk %>%
                filter(draft_year %in% unique(tmp$draft_year), round == 2) %>%
                summarize(max(pick)) %>%
                pull ~ "Rd. 3",
              x == (
                round_xwalk %>%
                  filter(draft_year %in% unique(tmp$draft_year), round == 3) %>%
                  summarize(max(pick)) %>%
                  pull
              ) ~ 'Rd. 4',
              x == (
                round_xwalk %>%
                  filter(draft_year %in% unique(tmp$draft_year), round == 4) %>%
                  summarize(max(pick)) %>%
                  pull
              ) ~ 'Rd. 5',
              x == (
                round_xwalk %>%
                  filter(draft_year %in% unique(tmp$draft_year), round == 5) %>%
                  summarize(max(pick)) %>%
                  pull
              ) ~ 'Rd. 6',
              x == (
                round_xwalk %>%
                  filter(draft_year %in% unique(tmp$draft_year), round == 6) %>%
                  summarize(max(pick)) %>%
                  pull
              ) ~ 'Rd. 7',
              x == (
                round_xwalk %>%
                  filter(draft_year %in% unique(tmp$draft_year), round == 7) %>%
                  summarize(max(pick)) %>%
                  pull
              ) ~ 'Undrafted',
              TRUE ~ as.character(x)
            )
          }
        ) +
        coord_cartesian(ylim = z,
                        xlim = c(min(tmp$min_date), min(tmp$draft_date)),
                        clip = 'off') +
        scale_color_tableau('Color Blind') +
        # scale_color_manual(values = setNames(
        #   c(astro_orange(), "dodgerblue", "#A2AAAD"),
        #   c("Fan", "Expert", "Media")
        # )) +
        theme(plot.subtitle = element_text(hjust = 0.5),
              legend.position = 'top') -> chrt
      
      if (gif == TRUE) {
        chrt +
          geom_segment(
            aes(
              x = date,
              y = predict,
              xend = date_lag,
              yend = predict_lag,
              group = rowid,
              color = name
            ),
            linewidth = 1.5,
            show.legend = TRUE
          ) +
          geom_point(
            aes(
              x = date,
              y = pick,
              color = name,
              group = rowid
            ),
            alpha = .1,
            size = 2
          ) -> chrt
      } else {
        chrt +
          geom_line(aes(
            x = date,
            y = predict,
            color = name,
            group = name
          ),
          linewidth = 1.5) +
          geom_point(
            aes(
              x = date,
              y = pick,
              color = name,
              group = name
            ),
            alpha = .05,
            size = 2
          ) +
          geom_dl(aes(
            x = date,
            y = predict,
            color = name,
            group = name,
            label = paste0(paste(substring(word(name, 1), 0, 1),
                                 coalesce(word(name, 2, 3), word(name, 2)),
                                 sep = '. '),
                           " (",
                           round(edp, 1),
                           " | ",
                           ordinal(edp_rank),
                           ")")
          ), 
          method = list(
            dl.trans(x = x + 0.2),
            "last.bumpup",
            cex = 1,
            fontface = 'bold'
            )
          ) -> chrt
      }
      
    }
  }
  
  if (scale == 'linear') {
    suppressWarnings(chrt)
  } else if (scale == 'log') {
    suppressMessages(
      chrt +
        scale_y_continuous(
          trans = reverselog_trans(10),
          breaks = y,
          labels = function(x) {
            case_when(
              yaxis == 'pick' ~ as.character(x),
              x == round_xwalk %>%
                filter(draft_year %in% unique(tmp$draft_year), round == 1) %>%
                summarize(max(pick)) %>%
                pull ~ "Rd. 2",
              x == round_xwalk %>%
                filter(draft_year %in% unique(tmp$draft_year), round == 2) %>%
                summarize(max(pick)) %>%
                pull ~ "Rd. 3",
              x == (
                round_xwalk %>%
                  filter(draft_year %in% unique(tmp$draft_year), round == 3) %>%
                  summarize(max(pick)) %>%
                  pull
              ) ~ 'Rd. 4',
              x == (
                round_xwalk %>%
                  filter(draft_year %in% unique(tmp$draft_year), round == 4) %>%
                  summarize(max(pick)) %>%
                  pull
              ) ~ 'Rd. 5',
              x == (
                round_xwalk %>%
                  filter(draft_year %in% unique(tmp$draft_year), round == 5) %>%
                  summarize(max(pick)) %>%
                  pull
              ) ~ 'Rd. 6',
              x == (
                round_xwalk %>%
                  filter(draft_year %in% unique(tmp$draft_year), round == 6) %>%
                  summarize(max(pick)) %>%
                  pull
              ) ~ 'Rd. 7',
              x == (
                round_xwalk %>%
                  filter(draft_year %in% unique(tmp$draft_year), round == 7) %>%
                  summarize(max(pick)) %>%
                  pull
              ) ~ 'Undrafted',
              TRUE ~ as.character(x)
            )
          },
          sec.axis = dup_axis(
            breaks = est,
            labels = function(x) {
              ifelse((
                is.na(tmp$draft_round %>% unique) &
                  unique(tmp$draft_date) < Sys.Date()
              ) |
                est == 1,
              '',
              as.character(est))
            },
            name = NULL,
          )
        ) +
        labs(y = "Mock Draft Pick (Log Adjusted)")
    )
  }
  
}

stockAnimate <-
  function(x = 'Baker Mayfield',
           round = 1,
           mock_type = 'All',
           scale = 'linear') {
    stockChart(
      x = x,
      round = round,
      mock_type = mock_type,
      scale = scale,
      gif = TRUE
    ) +
      transition_reveal(date)
  }

getPlayerList <-
  function(x = max(getUndraftable()$draft_year, na.rm = TRUE),
           split = TRUE) {
    getMocks() %>%
      filter(draft_year == x) %>%
      group_by(name, position, school) %>%
      summarize(n = sum(!is.na(round)),
                sites = n_distinct(site[!is.na(round)])) %>%
      arrange(school, name) %>%
      as.data.frame -> tmp
    
    if (split == TRUE) {
      split(tmp, substring(tmp$school, 0, 1))
    } else {
      return(tmp)
    }
    
  }

getReturnInfo <- function() {
  getPlayerList() %>%
    bind_rows %>%
    anti_join(getUndraftable() %>%
                filter(draft_year == 2024),
              by = c("name", "position", "school")) %>%
    left_join(
      'https://www.si.com/nfl/draft/news/whos-declaring-for-the-2024-nfl-draft-whos-returning-to-school#returned' %>%
        read_html %>%
        html_nodes('h2, p') %>%
        html_text %>%
        str_squish %>%
        detect_chr(50) %>%
        name_clean %>%
        df_plus_name %>%
        mutate(cnt = str_count(draft, " "),
               col = ifelse(cnt <= 1, draft, NA)) %>%
        fill(col) %>%
        filter(col == 'Returned') %>%
        filter(draft != col) %>%
        select(draft) %>%
        separate(draft,
                 sep = ', ',
                 into = c('stuff', 'school')) %>%
        mutate(
          position = word(stuff, 1) %>% position_clean,
          name = coalesce(word(stuff, 2, 4), word(stuff, 2, 3)),
          team = NA
        ) %>%
        draft_clean(rnd = FALSE) %>%
        clean_draft %>%
        select(name, position, school) %>%
        distinct(name) %>%
        mutate(decl = 0), 
      by = 'name'
    ) %>%
    filter(!is.na(decl)) %>%
    arrange(-n, -sites) %>%
    select(-n, -decl, -sites)
}

getTeamMocks <- function(team_name = 'Cincinnati Bengals',
                         mock_type = 'All',
                         year = 2021,
                         rnd = 1,
                         slice = 5,
                         time_frame = 'All') {
  if (mock_type == 'All') {
    mock_type = c("Fan", "Expert", "Media")
  }
  
  suppressWarnings(if (team_name == 'All') {
    team_name = getActual()$draft_team %>% unique %>% na.omit %>% sort
  } else if (team_name == 'AFC North') {
    team_name = c(
      "Baltimore Ravens",
      "Cincinnati Bengals",
      "Cleveland Browns",
      "Pittsburgh Steelers"
    )
  } else if (team_name == 'AFC East') {
    team_name = c("Buffalo Bills",
                  "Miami Dolphins",
                  "New York Jets",
                  "New England Patriots")
  } else if (team_name == 'AFC South') {
    team_name = c(
      "Houston Texans",
      "Indianapolis Colts",
      "Jacksonville Jaguars",
      "Tennessee Titans"
    )
  } else if (team_name == 'AFC West') {
    team_name = c("Denver Broncos",
                  "Kansas City Chiefs",
                  "Las Vegas Raiders",
                  "Los Angeles Chargers")
  } else if (team_name == 'NFC West') {
    team_name = c("Arizona Cardinals",
                  "Los Angeles Rams",
                  "San Francisco 49ers",
                  "Seattle Seahawks")
  } else if (team_name == 'NFC North') {
    team_name = c("Chicago Bears",
                  "Detroit Lions",
                  "Green Bay Packers",
                  "Minnesota Vikings")
  } else if (team_name == 'NFC South') {
    team_name = c(
      "Atlanta Falcons",
      "Carolina Panthers",
      "New Orleans Saints",
      "Tampa Bay Buccaneers"
    )
  } else if (team_name == 'NFC East') {
    team_name = c(
      "Dallas Cowboys",
      "New York Giants",
      "Philadelphia Eagles",
      "Washington Commanders"
    )
  })
  
  getMocks() %>%
    filter(draft_year == year,
           round == rnd,
           team %in% team_name,
           type %in% mock_type) %>%
    anti_join(getUndraftable(),
              by = c("draft_year", "name", "position", "school")) %>%
    left_join(
      teamcolors %>%
        filter(league == 'nfl') %>%
        select(team = name, primary, secondary) %>%
        rowwise %>%
        mutate(
          team = case_when(
            team == 'Oakland Raiders' ~ 'Las Vegas Raiders',
            team == 'Washington Redskins' ~ 'Washington Commanders',
            TRUE ~ team
          ),
          use_color1 = ifelse(brightness(primary) > 128, primary, secondary),
          use_color2 = ifelse(brightness(primary) > 128, secondary, primary),
          primary = NULL,
          secondary = NULL
        ) %>%
        rename(primary = use_color1, secondary = use_color2) %>%
        ungroup,
      by = 'team'
    ) %>%
    mutate(date_abb = substring(date, 1, 7)) -> tmp
  
  if (time_frame == 'All') {
    tmp <- tmp
  } else if (time_frame == 'draft_year') {
    tmp %>%
      filter(year(date) == draft_year) -> tmp
  } else {
    tmp %>%
      filter(date_abb == time_frame) -> tmp
  }
  
  tmp %>%
    count(
      draft_year,
      team,
      round,
      type = paste(mock_type, collapse = ', '),
      name,
      position,
      school,
      primary,
      secondary
    ) %>%
    group_by(team) %>%
    mutate(
      percent = n / sum(n),
      rank = dense_rank(-n),
      type = ifelse(type == 'Fan, Expert, Media', 'All', type)
    ) %>%
    arrange(team, desc(n)) %>%
    filter(rank <= slice)
}

getPositionMocks <- function(team_name = 'Cincinnati Bengals',
                             mock_type = 'All',
                             year = 2021,
                             rnd = 1,
                             slice = 5,
                             time_frame = 'All') {
  if (mock_type == 'All') {
    mock_type = c("Fan", "Expert", "Media")
  }
  
  suppressWarnings(if (team_name == 'All') {
    team_name = getActual()$draft_team %>% unique %>% na.omit %>% sort
  } else if (team_name == 'AFC North') {
    team_name = c(
      "Baltimore Ravens",
      "Cincinnati Bengals",
      "Cleveland Browns",
      "Pittsburgh Steelers"
    )
  } else if (team_name == 'AFC East') {
    team_name = c("Buffalo Bills",
                  "Miami Dolphins",
                  "New York Jets",
                  "New England Patriots")
  } else if (team_name == 'AFC South') {
    team_name = c(
      "Houston Texans",
      "Indianapolis Colts",
      "Jacksonville Jaguars",
      "Tennessee Titans"
    )
  } else if (team_name == 'AFC West') {
    team_name = c("Denver Broncos",
                  "Kansas City Chiefs",
                  "Las Vegas Raiders",
                  "Los Angeles Chargers")
  } else if (team_name == 'NFC West') {
    team_name = c("Arizona Cardinals",
                  "Los Angeles Rams",
                  "San Francisco 49ers",
                  "Seattle Seahawks")
  } else if (team_name == 'NFC North') {
    team_name = c("Chicago Bears",
                  "Detroit Lions",
                  "Green Bay Packers",
                  "Minnesota Vikings")
  } else if (team_name == 'NFC South') {
    team_name = c(
      "Atlanta Falcons",
      "Carolina Panthers",
      "New Orleans Saints",
      "Tampa Bay Buccaneers"
    )
  } else if (team_name == 'NFC East') {
    team_name = c(
      "Dallas Cowboys",
      "New York Giants",
      "Philadelphia Eagles",
      "Washington Commanders"
    )
  })
  
  getMocks() %>%
    filter(draft_year == year,
           round == rnd,
           team %in% team_name,
           type %in% mock_type) %>%
    anti_join(getUndraftable(),
              by = c("draft_year", "name", "position", "school")) %>%
    left_join(
      teamcolors %>%
        filter(league == 'nfl') %>%
        select(team = name, primary, secondary) %>%
        rowwise %>%
        mutate(
          team = case_when(
            team == 'Oakland Raiders' ~ 'Las Vegas Raiders',
            team == 'Washington Redskins' ~ 'Washington Commanders',
            TRUE ~ team
          ),
          use_color1 = ifelse(brightness(primary) > 128, primary, secondary),
          use_color2 = ifelse(brightness(primary) > 128, secondary, primary),
          primary = NULL,
          secondary = NULL
        ) %>%
        rename(primary = use_color1, secondary = use_color2) %>%
        ungroup,
      by = 'team'
    ) %>%
    mutate(date_abb = substring(date, 1, 7)) -> tmp
  
  if (time_frame == 'All') {
    tmp <- tmp
  } else if (time_frame == 'draft_year') {
    tmp %>%
      filter(year(date) == draft_year) -> tmp
  } else {
    tmp %>%
      filter(date_abb == time_frame) -> tmp
  }
  
  tmp %>%
    count(
      draft_year,
      team,
      round,
      type = paste(mock_type, collapse = ', '),
      position,
      primary,
      secondary
    ) %>%
    group_by(team) %>%
    mutate(
      percent = n / sum(n),
      rank = dense_rank(-n),
      type = ifelse(type == 'Fan, Expert, Media', 'All', type)
    ) %>%
    arrange(team, desc(n)) %>%
    filter(rank <= slice)
}

getTeamCharts <- function(team_name = 'Cincinnati Bengals',
                          var_type = 'name',
                          mock_type = 'All',
                          year = 2021,
                          rnd = 1,
                          slice = 5,
                          time_frame = 'All',
                          measure = 'percent') {
  if (var_type == 'name') {
    getTeamMocks(
      team_name = team_name,
      mock_type = mock_type,
      year = year,
      rnd = rnd,
      slice = slice,
      time_frame = time_frame
    ) -> tmp
  } else if (var_type == 'position') {
    getPositionMocks(
      team_name = team_name,
      mock_type = mock_type,
      year = year,
      rnd = rnd,
      slice = slice,
      time_frame = time_frame
    ) -> tmp
  }
  
  if (tmp$team %>% unique %>% length == 1) {
    tmp %>%
      ggplot(aes(
        x = fct_reorder(eval(parse(text = var_type)), -rank),
        y = eval(parse(text = measure)),
        fill = factor(team),
        color = factor(team)
      )) +
      geom_bar(stat = 'identity',
               show.legend = FALSE,
               size = 1.5) +
      labs(
        x = ifelse(var_type == 'name', 'Player Name', 'Position'),
        y = ifelse(measure == 'n', 'Number of Mock Drafts', 'Mock Draft Share'),
        title = paste0(tmp$draft_year,
                       " ",
                       tmp$team %>% unique,
                       " Mock Drafts"),
        subtitle = paste0(
          "Top ",
          slice,
          " - Round ",
          tmp$round %>% unique,
          " - ",
          tmp$type %>% unique,
          " Mock Drafts (",
          case_when(
            time_frame == 'All' ~ "All Data",
            time_frame == 'draft_year' ~ paste0(tmp$draft_year %>% unique, " Calendar Year"),
            TRUE ~ paste0(time_frame, "-01") %>% as.Date(format = '%Y-%m-%d') %>% format("%B, %Y")
          ),
          ")"
        ),
        caption = gtm_caption()
      ) +
      theme_gtm() +
      coord_flip() +
      scale_color_manual(values = tmp$secondary) +
      scale_fill_manual(values = tmp$primary) +
      theme(plot.subtitle = element_text(hjust = 0.5)) -> chrt
  } else {
    tmp %>%
      ggplot(aes(
        x = fct_reorder(eval(parse(text = var_type)), -rank),
        y = eval(parse(text = measure)),
        fill = factor(team),
        color = factor(team),
        group = factor(team)
      )) +
      geom_bar(stat = 'identity',
               show.legend = FALSE,
               size = 1.5) +
      labs(
        x = ifelse(var_type == 'name', 'Player Name', 'Position'),
        y = ifelse(measure == 'n', 'Number of Mock Drafts', 'Mock Draft Share'),
        title = paste0(tmp$draft_year,
                       " ",
                       tmp$team %>% unique,
                       " Mock Drafts"),
        subtitle = paste0(
          "Top ",
          slice,
          " - Round ",
          tmp$round %>% unique,
          " - ",
          tmp$type %>% unique,
          " Mock Drafts (",
          case_when(
            time_frame == 'All' ~ "All Data",
            time_frame == 'draft_year' ~ paste0(tmp$draft_year %>% unique, " Calendar Year"),
            TRUE ~ paste0(time_frame, "-01") %>% as.Date(format = '%Y-%m-%d') %>% format("%B, %Y")
          ),
          ")"
        ),
        caption = gtm_caption()
      ) +
      theme_gtm() +
      coord_flip() +
      scale_color_manual(values = tmp$secondary) +
      scale_fill_manual(values = tmp$primary) +
      facet_wrap( ~ team,
                  nrow = 2,
                  scales = 'free_y') +
      theme(plot.subtitle = element_text(hjust = 0.5)) -> chrt
  }
  
  if (measure == 'n') {
    chrt + scale_y_continuous(labels = comma)
  } else if (measure == 'percent') {
    chrt + scale_y_continuous(labels = percent)
  }
}

getTankathonOrder <- function(method = 'print') {
  'http://www.tankathon.com/nfl/full_draft' %>%
    read_html %>%
    html_nodes(".desktop, .trade") %>%
    html_text %>%
    .[-1:-5] %>%
    str_squish %>%
    .[nchar(.) >= 5] %>%
    as.data.frame %>%
    setNames('team') %>%
    mutate(lead = lead(team)) %>%
    filter((lead != 'Forfeited' &
              team != 'Forfeited') | is.na(lead)) %>%
    pull(team) %>%
    team_clean %>%
    unname -> tmp
  
  if (method == 'print') {
    return(tmp)
  } else if (method == 'copy') {
    copy_clipboard(tmp)
  }
}

draft_clean <- function(x, rnd = TRUE, yr = getMaxDraftYear()) {
  if (rnd == TRUE) {
    return(
      x %>%
        mutate(
          across(everything(), ~ str_squish(.)),
          round = round_clean(pick, year = yr),
          position = position_clean(position),
          school = school_clean(school),
          team = sub(" \\(.*", "", team),
          team = team_clean(team)
        ) %>%
        rowwise %>%
        mutate(
          name = name_clean(name, draft_year = yr),
          name = name_special(name, school)
        ) %>%
        ungroup
    )
  } else {
    return(
      x %>%
        mutate(
          across(everything(), ~ str_squish(.)),
          position = position_clean(position),
          school = school_clean(school),
          team = sub(" \\(.*", "", team),
          team = team_clean(team)
        ) %>%
        rowwise %>%
        mutate(
          name = name_clean(name, draft_year = yr),
          name = name_special(name, school)
        ) %>%
        ungroup
    )
  }
}

# getFOSnaps <-
#   function(x = 2020,
#            user = 'benj_robinson',
#            pwd = '3GyoPfc4dSsf') {
#     message(paste("Scraping", x, "Season Snaps"))
#     POST(
#       paste0(
#         'https://www.footballoutsiders.com/stats/nfl/snap-counts?year=',
#         x,
#         '&team=ALL&week=ALL&position=ALL'
#       ),
#       body = list(
#         form_id = 'user_login_form',
#         name = user,
#         pass = pwd,
#         op = 'Login'
#       ),
#       encode = 'form',
#       config(followlocation = 0L)
#     ) %>%
#       read_html %>%
#       html_table %>%
#       bind_rows %>%
#       clean_names %>%
#       rename(name = player) %>%
#       mutate(
#         season = x,
#         name = sub("[.]", ". ", name),
#         team = team_clean(team),
#         number = sub("-.*", "", name) %>% as.numeric,
#         name = sub(".*[0-9][-]", "", name),
#         player_type = case_when(
#           position %in% c('DB', 'DL', 'LB') ~ 'defense',
#           position %in% c('FB', 'OL', 'QB', 'RB', 'TE', 'WR') ~ 'offense',
#           position %in% c('ST') ~ 'special_teams',
#           TRUE ~ position
#         )
#       ) %>%
#       mutate_at(vars(contains('rate')), ~ sub("[%]", "", .) %>% as.numeric) %>%
#       mutate_at(vars(contains('rate')), ~ . / 100) %>%
#       gather(key,
#              value,-name,-team,-position,-number,-season,-player_type) %>%
#       mutate(
#         snap_type = case_when(
#           grepl("total", key) ~ 'total',
#           grepl("offense", key) ~ 'offense',
#           grepl("defense", key) ~ 'defense',
#           grepl("special", key) ~ 'special_teams',
#         ),
#         snap_metric = ifelse(grepl("rate", key), "rate", "snaps"),
#         key = NULL,
#         name = sub("[.]", "", name)
#       ) %>%
#       as_tibble
#   }

probChart <- function(x) {
  getProbabilities(x) %>%
    group_by(name) %>%
    filter(between(pick,
                   min(pick[!is.na(draft_year)]),
                   max(pick[!is.na(draft_year)]))) %>%
    ungroup %>%
    gather(distribution,
           value,-name,-pick,-draft_year,-position,-school) %>%
    mutate(distribution = factor(
      str_to_title(distribution),
      levels = c('Probability', 'Cumulative')
    )) %>%
    filter(!is.na(value), !is.na(distribution)) %>%
    left_join(
      getPredictions() %>%
        group_by(draft_year, position) %>%
        mutate(pos_rank = paste0(position, dense_rank(avg_rank))) %>%
        ungroup,
      by = c("name", "draft_year", "position", "school")
    ) %>%
    left_join(getActual(),
              by = c("name", "draft_year", "position", "school")) %>%
    left_join(getActual() %>%
                group_by(draft_year) %>%
                summarize(max_pick = max(draft_pick)),
              by = 'draft_year') %>%
    left_join(getMocks() %>%
                distinct(draft_year, draft_date),
              by = 'draft_year') -> tmp
  
  if (nrow(tmp) == 0) {
    stop("Not enough data (or a spelling error).")
  }
  
  brks = min(c(max(tmp$hdi_lower),
               ifelse(
                 max(tmp$hdi_lower) > 32, 10, max(tmp$hdi_lower)
               )))
  
  tmp %>%
    ggplot(aes(pick, value, fill = distribution)) +
    geom_bar(stat = 'identity',
             show.legend = FALSE,
             na.rm = TRUE) +
    geom_vline(
      aes(xintercept = hdi_upper),
      linetype = 'dotted',
      color = 'darkslategray',
      linewidth = 1.5,
      na.rm = TRUE
    ) +
    geom_vline(
      aes(xintercept = hdi_lower),
      linetype = 'dotted',
      color = 'darkslategray',
      linewidth = 1.5,
      na.rm = TRUE
    ) +
    geom_vline(
      aes(xintercept = avg_rank),
      color = 'black',
      linetype = 'solid',
      linewidth = 1.5,
      na.rm = TRUE
    ) +
    scale_y_continuous(labels = percent) +
    scale_fill_tableau("Color Blind") +
    theme_gtm() +
    labs(
      x = "Draft Pick",
      y = "Draft Probability",
      title = paste0(
        tmp$name %>% unique,
        " (",
        tmp$position %>% unique,
        ", ",
        tmp$school %>% unique,
        ", '",
        substring(tmp$draft_year %>% unique, 3, 4),
        ")",
        collapse = ' | '
      ) %>% unique,
      caption = gtm_caption()
    ) +
    coord_cartesian(xlim = c(1, max(
      c(tmp$hdi_lower, tmp$draft_pick), na.rm = TRUE
    ))) +
    scale_x_continuous(breaks = pretty_breaks(brks)) -> chrt
  
  if (((Sys.Date() > (unique(tmp$draft_date)) + 3) |
       (!is.na(unique(tmp$draft_pick))))) {
    suppressWarnings(
      chrt +
        geom_vline(
          aes(xintercept = draft_pick),
          color = 'red',
          linewidth = 1.5,
          na.rm = TRUE
        ) +
        geom_vline(
          aes(xintercept = hdi_upper),
          linetype = 'dotted',
          color = 'darkslategray',
          linewidth = 1.5,
          na.rm = TRUE
        ) +
        geom_vline(
          aes(xintercept = hdi_lower),
          linetype = 'dotted',
          color = 'darkslategray',
          linewidth = 1.5,
          na.rm = TRUE
        ) +
        geom_vline(
          aes(xintercept = avg_rank),
          color = 'black',
          linetype = 'solid',
          linewidth = 1.5,
          na.rm = TRUE
        ) +
        labs(
          subtitle = paste0(
            ifelse(
              !is.na(tmp$draft_team %>% unique),
              paste0(
                tmp$draft_team %>% unique,
                ":",
                " Round ",
                tmp$draft_round %>% unique,
                ", Pick ",
                tmp$draft_pick %>% unique,
                " (",
                tmp$draft_rank %>% unique,
                ")"
              ),
              'Undrafted'
            ),
            " | ADP: ",
            tmp$avg %>% unique %>% round(1),
            " (Rank: ",
            ifelse(
              tmp$avg_rank %>% unique > (unique(tmp$max_pick)),
              'Undrafted',
              tmp$avg_rank %>% unique
            ),
            ", ",
            tmp$pos_rank %>% unique,
            ")"
          )
        ) +
        theme(plot.subtitle = element_text(hjust = 0.5))
    ) -> chrt
    
  } else {
    chrt <- chrt  +
      labs(
        subtitle = paste0(
          "Average Draft Position: ",
          tmp$avg %>% unique %>% round(1),
          " (Rank: ",
          ifelse(
            tmp$avg_rank %>% unique == (unique(tmp$max_pick) + 1),
            'Undrafted',
            tmp$avg_rank %>% unique
          ),
          ", ",
          tmp$pos_rank %>% unique,
          ")"
        )
      ) +
      theme(plot.subtitle = element_text(hjust = 0.5))
  }
  
  if (length(x) == 1) {
    chrt + facet_wrap( ~ distribution, nrow = 2, scales = 'free') -> chrt
  } else {
    chrt + facet_nested_wrap(~ distribution + name,
                             nrow = length(x),
                             scales = 'free') +
      labs(
        title = paste0(
          tmp$name %>% unique,
          " (",
          tmp$position %>% unique,
          ", '",
          substring(tmp$draft_year %>% unique, 3, 4),
          ")",
          collapse = ' | '
        ) %>% unique,
        subtitle = paste0(
          "ADP: ",
          tmp$avg %>% unique %>% round(1),
          " (Rank: ",
          ifelse(
            tmp$avg_rank %>% unique > (unique(tmp$max_pick)),
            'Undrafted',
            tmp$avg_rank %>% unique
          ),
          ", ",
          tmp$pos_rank %>% unique,
          ")",
          collapse = " | "
        )
      ) -> chrt
  }
  
  suppressWarnings(print(chrt))
  
}

getHorizontalBoard <- function(model = 'edp',
                               year = 2024,
                               mock_type = 'All') {
  if (model == 'edp') {
    getEDP() %>%
      mutate(
        name = paste(substring(word(name, 1), 0, 1),
                     word(name, 2),
                     sep = '. '),
        position = case_when(
          position %in% c('G', 'C', "OT") ~ 'OL',
          position %in% c("FB", "TE") ~ 'TE',
          position %in% c("S", "CB") ~ 'DB',
          position %in% c("EDGE", "DT") ~ 'DL',
          TRUE ~ position
        ),
        position = factor(
          position,
          levels = c("QB",
                     "WR",
                     "RB",
                     "TE",
                     "OL",
                     "DL",
                     "LB",
                     "DB",
                     "ST")
        )
      ) %>%
      filter(draft_year == year, type == mock_type) %>%
      select(name, position, edp_rank) %>%
      mutate(round = round_clean(edp_rank, year)) %>%
      arrange(round, edp_rank, position) %>%
      group_by(Round = round %>% as.character, position) %>%
      summarize(name = paste(paste0(
        name, " (", as.character(edp_rank), ")"
      ),
      collapse =  " <br/>")) %>%
      arrange(position) %>%
      spread(position, name) -> tmp
  } else if (model == 'bayes') {
    getPredictions() %>%
      mutate(
        name = paste(substring(word(name, 1), 0, 1),
                     word(name, 2),
                     sep = '. '),
        position = case_when(
          position %in% c('G', 'C', "OT") ~ 'OL',
          position %in% c("FB", "TE") ~ 'TE',
          position %in% c("S", "CB") ~ 'DB',
          position %in% c("EDGE", "DT") ~ 'DL',
          TRUE ~ position
        ),
        position = factor(
          position,
          levels = c("QB",
                     "WR",
                     "RB",
                     "TE",
                     "OL",
                     "DL",
                     "LB",
                     "DB",
                     "ST")
        )
      ) %>%
      filter(draft_year == year) %>%
      select(name, position, avg_rank) %>%
      mutate(round = round_clean(avg_rank, year),
             avg_rank = NULL) %>%
      group_by(Round = round %>% as.character, position) %>%
      summarize(name = paste(paste0(
        name, " (", as.character(avg_rank), ")"
      ), collapse =  " \n"))
    arrange(position) %>%
      spread(position, name) -> tmp
  }
  
  return(tmp)
  
}

# getPFFGuide <- function() {
#   list(season = 2018:2022,
#        version = c(1, 1, 4, 4)) %>%
#     pmap_dfr(function(season, version) {
#       fromJSON(
#         paste0(
#           "https://www.pff.com/api/college/big_board?season=",
#           season,
#           "&version=",
#           version
#         )
#       )$player %>%
#         mutate(draft_year = season) %>%
#         select(
#           draft_year,
#           name,
#           position,
#           school = college,
#           age,
#           class,
#           pff_rank,
#           pff_id = id
#         ) %>%
#         mutate(
#           school = sub(" [-] ", "-", school),
#           name = name_clean(name),
#           name = name_special(name, school),
#           position = case_when(
#             position == 'ED' ~ 'EDGE',
#             position == 'DI' ~ 'DT',
#             position == 'HB' ~ 'RB',
#             position == 'T' ~ 'OT',
#             TRUE ~ position
#           )
#         ) %>%
#         left_join(
#           getMocks() %>%
#             anti_join(
#               getUndraftable(),
#               by = c('draft_year', 'name', 'position', 'school')
#             ) %>%
#             distinct(name, sch = school),
#           by = c('name')
#         ) %>%
#         mutate(school = coalesce(sch, school),
#                sch = NULL)
#     })
# }

# getPFFDraft <- function () {
#   read_rds("../GrindingtheMocks-data/data/PFF_Draft_Guide.rds")
# }

getPFFDraft_Feed <- function() {
  fromJSON('https://www.pff.com/api/draft_tracker/draft_picks') -> tmp
  
  suppressWarnings(
  tmp %>%
    pluck('draft_picks') %>%
    select(
      draft_year = season,
      draft_round = round,
      draft_pick = pick,
      pff_id = player_id,
      franchise_id = draft_franchise_id
    ) %>%
    filter(!is.na(draft_pick)) %>%
    mutate(pff_id = as.character(pff_id),
           max_1 = max(draft_pick[draft_round == 1], na.rm = TRUE),
           draft_cat = case_when(
             draft_pick %in% 1:10 ~ 'Top Round 1',
             draft_pick %in% 1:max_1 ~ 'Bottom Round 1',
             draft_round %in% 2:3 ~ 'Day 2',
             TRUE ~ 'Day 3'
           )) %>%
    left_join(
      tmp %>%
        pluck('teams') %>%
        select(franchise_id,
               city,
               nickname) %>%
        mutate(
          draft_team = paste(city, nickname),
          city = NULL,
          nickname = NULL
        ),
      by = 'franchise_id'
    ) %>%
    filter(!is.na(pff_id)) %>%
    left_join(getPFF_GTM() %>%
                select(-pff_headshot),
              by = c('pff_id', 'draft_year')) %>%
    group_by(position) %>%
    mutate(
      draft_rank = paste0(position, dense_rank(draft_pick))
    ) %>% 
    ungroup %>%
    select(
      draft_year,
      draft_cat,
      draft_round,
      draft_pick,
      name,
      position,
      school,
      draft_team,
      draft_rank
    )
  )
}

getHuddleReport <- function() {
  image_read('https://thehuddlereport.com/mock.s.gif') %>%
    image_crop(geometry_area(width = 400)) %>%
    ocr %>%
    sub("rant) MOCK DRAFT 5 YEAR AVERAGE", "", .) %>%
    strsplit("\n") %>%
    unlist %>%
    .[substring(., 0, 1) %in% 1:9] %>%
    sub(" [_]", " ", .) %>%
    sub("[_] ", " ", .) %>%
    sub("°", "", .) %>%
    sub("[.] ", " ", .) %>%
    str_squish %>%
    remove_emdash %>%
    sub("J.R ", "J.R. ", .) %>%
    sub("D Orlando", "D. Orlando", .) %>%
    sub(" [#].*", "", .) %>%
    add_comma_pick() %>%
    df_plus_name %>%
    separate(draft,
             sep = ', ',
             into = c('rank', 'site_author', 'site_name')) %>%
    mutate(
      site_name = case_when(
        site_name == 'San Diego Union-Tribune' ~ 'San Diego Union Tribune',
        site_name == '4fors' ~ '4for4',
        site_name == 'Drafttek' ~ 'DraftTek',
        site_name == 'FOX Sports' ~ 'Fox Sports',
        site_name == 'The athletic DC' ~ 'The Athletic',
        site_name == 'Atlanta Journal-Con.' ~ 'Atlanta Journal Constitution',
        site_name == 'TheScore' ~ 'The Score',
        site_name == 'Next Gen Stats/Rosterwatch' ~ 'Roster Watch',
        site_name == 'Couch Scout' ~ 'Football Couch Scout',
        site_name == 'Locked on Scouting' ~ 'Locked On NFL Scouting',
        site_name == 'Fulltime Scouting' ~ 'FullTime Scouting',
        site_name == 'NFL.com' ~ 'NFL Network',
        TRUE ~ site_name
      )
    ) %>%
    select(rank, site_name, site_author)
  
  # 'https://www.thehuddlereport.com/mock.scores.shtml' %>%
  #   read_html %>%
  #   html_table(fill = TRUE) %>%
  #   .[[6]] %>%
  #   select(1, 2) %>%
  #   setNames(c('rank', 'site')) %>%
  #   mutate(rank = suppressWarnings(as.numeric(rank))) %>%
  #   filter(!is.na(rank)) %>%
  #   mutate(site = str_squish(site) %>% remove_emdash,
  #          site = sub("Rang-", "Rang, ", site)) %>%
  #   separate(site,
  #            sep = ', ',
  #            into = c('site_author', 'site_name'))
  
}

getHuddleCount <- function() {
  getHuddleReport() %>%
    mutate(site_name = ifelse(site_name == 'Drafttek', 'DraftTek', site_name)) %>%
    stringdist_left_join(
      getMocks() %>%
        filter(draft_year == 2024, !is.na(round)) %>%
        anti_join(
          getUndraftable(),
          by = c("draft_year", "name", "position", "school")
        ) %>%
        mutate(
          site_name = gsub("-.*", "", site) %>% str_squish,
          site_author = gsub(".*-", "", site) %>% str_squish
        ) %>%
        distinct(site_name, site_author, type) %>%
        group_by(site_author) %>%
        summarize(
          site_name = str_c(site_name, collapse = ' | '),
          type = str_c(unique(type), collapse = " | ")
        ) %>%
        ungroup %>%
        add_row(
          site_author = 'Buddy Mangine',
          site_name = 'DraftTek',
          type = 'Fan'
        ) %>%
        add_row(
          site_author = 'Kennedy Paynter',
          site_name = 'DraftTek',
          type = 'Fan'
        ) %>%
        add_row(
          site_author = 'Brett Stott',
          site_name = 'DraftTek',
          type = 'Fan'
        ) %>%
        add_row(
          site_author = 'Brett Clancy',
          site_name = 'DraftTek',
          type = 'Fan'
        ),
      by = 'site_author',
      max_dist = 2
    ) -> tmp
  
  tmp %>%
    filter(is.na(site_author.y)) %>%
    select(1:3) %>%
    setNames(sub(".x", "", names(.)))
}

# fix.csv <- function(file,
#                     new.name = TRUE,
#                     sep = ",",
#                     comment.char = "") {
#   tmpframe <- read.csv(
#     file,
#     sep = sep,
#     quote = "",
#     colClasses = "character",
#     stringsAsFactors = FALSE,
#     comment.char = "",
#     blank.lines.skip = FALSE,
#     na.strings = ""
#   )
#   tmpframe <- edit(tmpframe)
#   if (is.character(new.name)) {
#     out.name <- new.name
#   } else if (new.name <- TRUE) {
#     out.name <-
#       readline(prompt = "Enter file name to save (Hit enter to use original):")
#   } else {
#     out.name <- file
#   }
#   if (out.name == "")
#     out.name <- file
#   write.table(
#     tmpframe,
#     file = out.name,
#     append = FALSE,
#     quote = FALSE,
#     sep = sep,
#     row.names = FALSE
#   )
# }

getActualUpdate <- function() {
  bind_rows(getActual() %>%
              filter(draft_year != max(draft_year)),
            suppressMessages(
              read_sheet(
                ss = "1Wn3IOHELqJv5XcrduOXyxAqZE_kn7GOhYT9gIawAynM",
                sheet = 'Actual',
                col_types = 'ncnnccccc'
              )
            )) -> actual
  
  write_rds(actual, "../GrindingtheMocks-data/data/Actual.rds")
  
  db <- dbConnect(SQLite(), "data/gtm_db.sqlite")
  dbWriteTable(db, "actual", actual, overwrite = TRUE)
  dbDisconnect(db)
}

ggStockChart <- function(x,
                         path = "C:/Users/benjr/Desktop/",
                         scl = 'linear',
                         scl_logo = 6,
                         add_logo = TRUE,
                         position_logo = 'top left',
                         path_logo = 'C:/Users/benjr/Desktop/Projects/GrindingtheMocks_v2/www/gtm_logo_transparent.png') {
  suppressWarnings(stockChart(x, scale = scl))
  
  ggsave(
    paste0(path, gsub(" ", "_", paste0(x, collapse = "_")), "_STOCK.PNG"),
    height = 8,
    width = 8,
    units = 'in',
    dpi = 'retina'
  )
  
  if (add_logo == TRUE & (Sys.Date() + 3) > (getMocks(x) %>%
                                             summarize(max(draft_date)) %>%
                                             pull)) {
    add_logo(
      logo_path = path_logo,
      plot_path = paste0(path, gsub(" ", "_", paste0(x, collapse = "_")), "_STOCK.PNG"),
      logo_position = position_logo,
      save = TRUE,
      logo_scale = 6
    )
  } else {
    add_logo(
      logo_path = path_logo,
      plot_path = paste0(path, gsub(" ", "_", paste0(x, collapse = "_")), "_STOCK.PNG"),
      logo_position = position_logo,
      save = TRUE,
      logo_scale = 5
    )
  }
  closeAllConnections()
}


ggProbChart <- function(x,
                        path = 'C:/Users/benjr/Desktop/',
                        add_logo = TRUE,
                        position_logo = 'top left',
                        scl_logo = 5,
                        path_logo = 'C:/Users/benjr/Desktop/Projects/GrindingtheMocks_v2/www/gtm_logo_transparent.png') {
  suppressWarnings(probChart(x))
  
  ggsave(
    paste0(path, gsub(" ", "_", paste0(x, collapse = "_")), "_PROB.PNG"),
    height = 8,
    width = 8,
    units = 'in',
    dpi = 'retina'
  )
  
  if (add_logo == TRUE & (Sys.Date() + 3) > (getMocks(x) %>%
                                             summarize(max(draft_date)) %>%
                                             pull)) {
    add_logo(
      logo_path = path_logo,
      plot_path = paste0(path, gsub(" ", "_", paste0(x, collapse = "_")), "_PROB.PNG"),
      logo_position = position_logo,
      save = TRUE,
      logo_scale = 6
    )
  } else {
    add_logo(
      logo_path = path_logo,
      plot_path = paste0(path, gsub(" ", "_", paste0(x, collapse = "_")), "_PROB.PNG"),
      logo_position = position_logo,
      save = TRUE,
      logo_scale = 5
    )
  }
  closeAllConnections()
}

# gtm_logo <- rasterGrob(readPNG("www/gtm_logo_transparent.png"), interpolate = TRUE)

getMissedUndraftable <- function() {
  list(getActual()$draft_year %>% unique) %>%
    pmap_dfr(function(x) {
      getUndraftable()$draft_year %>% unique -> yrs
      yrs[yrs < x] -> yrs
      tibble(draft_year = x,
             years = yrs)
    }) %>%
    list(x = .$draft_year,
         y = .$years) %>%
    .[-1] %>%
    pmap_dfr(function(x, y) {
      # print(paste0("Draft Year: ", x, " | Year: ", y))
      getMocks() %>%
        filter(draft_year == x) %>%
        anti_join(getUndraftable(),
                  by = c("draft_year", "name", "position", "school")) %>%
        inner_join(
          getMocks() %>%
            filter(draft_year == y) %>%
            anti_join(
              getUndraftable(),
              by = c("draft_year", "name", "position", "school")
            ) %>%
            distinct(name),
          by = 'name'
        ) %>%
        mutate(years = y) %>%
        select(draft_year, years, name, position, school) %>%
        distinct
    }) -> dat
  if (nrow(dat) == 0) {
    message('Good to go!')
  } else {
    return(dat)
  }
}

getDCOE_Players <- function(mock_type = 'All',
                            edp = TRUE,
                            year = 'All') {
  stopifnot(mock_type %in% c('All', 'Media', 'Fan', 'Expert'))
  
  if (edp == TRUE) {
    if (year %in% 'All') {
      getEDP() %>%
        filter(
          draft_year %in% c(
            getActual() %>%
              filter(!is.na(name)) %>%
              pull(draft_year) %>%
              unique %>%
              .[. != min(.)]
          ),
          type == mock_type
        ) %>%
        full_join(
          getActual() %>%
            filter(
              !is.na(name),
              draft_year %in% c(
                getActual() %>%
                  filter(!is.na(name)) %>%
                  pull(draft_year) %>%
                  unique %>%
                  .[. != min(.)]
              )
            ),
          by = c('draft_year', 'name', 'position', 'school')
        ) -> tmp
    } else {
      getEDP() %>%
        filter(draft_year %in% year, type == mock_type) %>%
        full_join(
          getActual() %>%
            filter(!is.na(name), draft_year %in% year),
          by = c('draft_year', 'name', 'position', 'school')
        ) -> tmp
    }
    
    tmp %>%
      select(-n, -n_total, -pos_rank, -draft_rank, -draft_cat, -draft_round) %>%
      
      group_by(draft_year) %>%
      mutate(max_pick = max(coalesce(max_pick, 0), na.rm = TRUE)) %>%
      ungroup %>%
      mutate(
        edp_rank = coalesce(edp_rank, max_pick + 1),
        dcoe = (coalesce(draft_pick, max_pick + 1) - edp_rank),
        fs_dcoe = (coalesce(fs_clean(draft_pick), fs_clean(max_pick) + 1) - fs_clean(edp_rank))*-1,
        log_dcoe = (log10(coalesce(
          draft_pick, max_pick + 1
        )) -
          log10(edp_rank)),
        dc_type = case_when(
          is.na(edp) ~ 'Non-GTM',
          is.na(draft_pick) ~ 'Undrafted',
          dcoe < 0 ~ 'Reach',
          dcoe > 0 ~ 'Steal',
          TRUE ~ 'Direct Hit'
        ),
        type = mock_type,
        draft_pick = coalesce(draft_pick, max_pick + 1),
        max_pick = NULL
      ) %>%
      # mutate_at(vars(dcoe, log_dcoe), list(z = ~ . - mean(.) / sd(.))) %>%
      mutate_at(vars(dcoe, log_dcoe, fs_dcoe), list(perc = ~ percent_rank(.))) %>%
      group_by(dc_type) %>%
      # mutate_at(vars(dcoe, log_dcoe), list(type_z = ~ . - mean(.) / sd(.))) %>%
      mutate_at(vars(dcoe, log_dcoe, fs_dcoe), list(type_perc = ~ percent_rank(.))) %>%
      ungroup %>%
      arrange(draft_year, draft_pick) %>%
      mutate(across(
        c(
          'dcoe_type_perc',
          'log_dcoe_type_perc',
          'dcoe_perc',
          'log_dcoe_perc',
          'fs_dcoe_perc',
          'fs_dcoe_type_perc'
        ),
        ~ ifelse(dc_type %in% c('Reach', 'Non-GTM'), 1 - ., .)
      ))
  } else {
    if (year == 'All') {
      getPredictions() %>%
        filter(draft_year %in% c(
          getActual() %>%
            filter(!is.na(name)) %>%
            pull(draft_year) %>%
            unique %>%
            .[. != min(.)]
        )) %>%
        full_join(
          getActual() %>%
            filter(
              !is.na(name),
              draft_year %in% c(
                getActual() %>%
                  filter(!is.na(name)) %>%
                  pull(draft_year) %>%
                  unique %>%
                  .[. != min(.)]
              )
            ),
          by = c('draft_year', 'name', 'position', 'school')
        ) -> tmp
    } else {
      getPredictions() %>%
        filter(draft_year %in% year) %>%
        full_join(
          getActual() %>%
            filter(!is.na(name), draft_year %in% year),
          by = c('draft_year', 'name', 'position', 'school')
        ) -> tmp
    }
    
    tmp %>%
      mutate(type = 'All') %>%
      left_join(
        getActual() %>%
          group_by(draft_year) %>%
          summarize(max_pick = max(draft_pick) + 1),
        by = c('draft_year')
      ) %>%
      select(
        -draft_rank,-draft_round,-hdi_upper,-hdi_lower-draft_cat,-eti_upper,-eti_lower,-median_rank,-median
      ) %>%
      group_by(draft_year) %>%
      mutate(max_pick = max(coalesce(max_pick, 0), na.rm = TRUE)) %>%
      ungroup %>%
      mutate(
        edp_rank = coalesce(avg_rank, max_pick),
        edp = avg,
        dcoe = (coalesce(draft_pick, max_pick) - edp_rank),
        fs_dcoe = (coalesce(fs_clean(draft_pick), fs_clean(max_pick) + 1) - fs_clean(edp_rank))*-1,
        log_dcoe = (log10(coalesce(
          draft_pick, max_pick
        )) -
          log10(edp_rank)),
        dc_type = case_when(
          is.na(type) ~ 'Non-GTM',
          is.na(draft_pick) ~ 'Undrafted',
          dcoe < 0 ~ 'Reach',
          dcoe > 0 ~ 'Steal',
          TRUE ~ 'Direct Hit'
        ),
        type = 'All',
        avg = NULL,
        avg_rank = NULL,
        max_pick = NULL
      ) %>%
      # mutate_at(vars(dcoe, log_dcoe), list(z = ~ . - mean(.) / sd(.))) %>%
      mutate_at(vars(dcoe, log_dcoe, fs_dcoe), list(perc = ~ percent_rank(.))) %>%
      group_by(dc_type) %>%
      # mutate_at(vars(dcoe, log_dcoe), list(type_z = ~ . - mean(.) / sd(.))) %>%
      mutate_at(vars(dcoe, log_dcoe, fs_dcoe), list(type_perc = ~ percent_rank(.))) %>%
      ungroup %>%
      arrange(draft_year, draft_pick) %>%
      mutate(across(
        c(
          'dcoe_type_perc',
          'log_dcoe_type_perc',
          'dcoe_perc',
          'log_dcoe_perc',
          'fs_dcoe_perc',
          'fs_dcoe_type_perc'
        ),
        ~ ifelse(dc_type %in% c('Reach', 'Non-GTM'), 1 - ., .)
      ))
  }
}

getDCOE_Position <- function(year = 'All') {
  if (year == 'All') {
    getDCOE_Players() %>%
      group_by(position) %>%
      summarize(
        min_year = min(draft_year),
        max_year = max(draft_year),
        DCOE = mean(dcoe),
        `Pick-Adjusted DCOE` = mean(log_dcoe)
      ) %>%
      gather(Metric,
             `Draft Capital Over Expected`,-position,-min_year,-max_year) -> tmp
  } else {
    getDCOE_Players() %>%
      filter(draft_year %in% year) %>%
      group_by(position) %>%
      summarize(DCOE = sum(dcoe),
                `Pick-Adjusted DCOE` = sum(log_dcoe)) %>%
      gather(Metric, `Draft Capital Over Expected`, -position) -> tmp
  }
  
  tmp %>%
    ggplot(aes(
      x = reorder_within(position, `Draft Capital Over Expected`, Metric),
      y = `Draft Capital Over Expected`,
      fill = Metric
    )) +
    geom_bar(stat = 'identity', show.legend = FALSE) +
    facet_wrap(~ factor(Metric, levels = c("Pick-Adjusted DCOE", "DCOE")), scales = 'free') +
    coord_flip() +
    scale_fill_manual(values = c("dodgerblue", astro_orange())) +
    scale_x_reordered() +
    theme_gtm() +
    labs(
      x = NULL,
      caption = gtm_caption(),
      title = "Draft Capital Over Expected (DCOE) by Position",
      subtitle = ifelse(
        year == 'All',
        paste0("Draft Years: ",
               min(tmp$min_year),
               '-',
               max(tmp$max_year)),
        paste("Draft Year:", year, "Only")
      )
    )
  
}

getDCOE_Round <- function(year = 'All') {
  if (year == 'All') {
    getDCOE_Players() %>%
      rowwise %>%
      mutate(
        draft_round = round_clean(draft_pick, draft_year),
        draft_round = coalesce(as.character(draft_round), "Undrafted")
      ) %>%
      group_by(draft_round) %>%
      summarize(
        min_year = min(draft_year),
        max_year = max(draft_year),
        DCOE = mean(dcoe),
        `Pick-Adjusted DCOE` = mean(log_dcoe)
      ) %>%
      gather(Metric,
             `Draft Capital Over Expected`,-draft_round,-min_year,-max_year) -> tmp
  } else {
    getDCOE_Players() %>%
      filter(draft_year == year) %>%
      rowwise %>%
      mutate(draft_round = round_clean(draft_pick, draft_year),
             coalesce(as.character(draft_round), "Undrafted")) %>%
      group_by(draft_round) %>%
      summarize(DCOE = sum(dcoe),
                `Pick-Adjusted DCOE` = sum(log_dcoe)) %>%
      gather(Metric, `Draft Capital Over Expected`, -draft_round) -> tmp
  }
  
  tmp %>%
    ggplot(aes(
      x = reorder_within(draft_round, `Draft Capital Over Expected`, Metric),
      y = `Draft Capital Over Expected`,
      fill = Metric
    )) +
    geom_bar(stat = 'identity', show.legend = FALSE) +
    facet_wrap(~ factor(Metric, levels = c("Pick-Adjusted DCOE", "DCOE")), scales = 'free') +
    coord_flip() +
    scale_fill_manual(values = c("dodgerblue", astro_orange())) +
    scale_x_reordered() +
    theme_gtm() +
    labs(
      x = NULL,
      caption = gtm_caption(),
      title = "Draft Capital Over Expected (DCOE) by Position",
      subtitle = ifelse(
        year == 'All',
        paste0("Draft Years: ",
               min(tmp$min_year),
               '-',
               max(tmp$max_year)),
        paste("Draft Year:", year, "Only")
      )
    )
  
}

getDCOE_Team <- function(year = 'All', team = 'All') {
  if (year == 'All') {
    getDCOE_Players() %>%
      filter(!is.na(draft_team)) %>%
      left_join(
        team_xwalk %>%
          rename(draft_team = team, team_abbr = value) %>%
          filter(nchar(team_abbr) < 5) %>%
          inner_join(
            team_abbr_mapping %>%
              unname %>%
              unique %>%
              .[!grepl("AFC|NFC", .)] %>%
              as.data.frame %>%
              setNames('team_abbr'),
            by = 'team_abbr'
          ),
        by = 'draft_team'
      ) %>%
      group_by(draft_team, team_abbr) %>%
      summarize(
        min_year = min(draft_year),
        max_year = max(draft_year),
        # DCOE =  mean((draft_pick - edp_rank) ^ 2, na.rm = TRUE),
        # `Pick-Adjusted DCOE` = mean((log10(draft_pick) - log10(edp_rank)) ^ 2, na.rm = TRUE)
        DCOE = mean(dcoe),
        `Pick-Adjusted DCOE` = mean(log_dcoe)
      ) %>%
      ungroup %>%
      gather(
        Metric,
        `Draft Capital Over Expected`,
        -draft_team,
        -team_abbr,
        -min_year,
        -max_year
      ) -> tmp
  } else {
    getDCOE_Players() %>%
      filter(!is.na(draft_team), draft_year %in% year) %>%
      left_join(
        team_xwalk %>%
          rename(draft_team = team, team_abbr = value) %>%
          filter(nchar(team_abbr) < 5) %>%
          inner_join(
            team_abbr_mapping %>%
              unname %>%
              unique %>%
              .[!grepl("AFC|NFC", .)] %>%
              as.data.frame %>%
              setNames('team_abbr'),
            by = 'team_abbr'
          ),
        by = 'draft_team'
      ) %>%
      group_by(draft_team, team_abbr) %>%
      summarize(# DCOE =  mean((draft_pick - edp_rank) ^ 2, na.rm = TRUE),
        # `Pick-Adjusted DCOE` = mean((log10(draft_pick) - log10(edp_rank)) ^ 2, na.rm = TRUE)
        DCOE = sum(dcoe),
        `Pick-Adjusted DCOE` = sum(log_dcoe)) %>%
      gather(Metric,
             `Draft Capital Over Expected`,-draft_team,-team_abbr) -> tmp
  }
  
  if (team == 'All') {
    tmp %>%
      ggplot(
        aes(
          x = reorder_within(draft_team, `Draft Capital Over Expected`, Metric),
          y = `Draft Capital Over Expected`,
          fill = team_abbr,
          color = team_abbr
        )
      ) +
      geom_bar(stat = 'identity', show.legend = FALSE) +
      facet_wrap(~ factor(Metric, levels = c("Pick-Adjusted DCOE", "DCOE")), scales = 'free') +
      scale_fill_nfl() +
      scale_color_nfl() +
      scale_x_reordered() +
      coord_flip() +
      theme_gtm() +
      labs(
        x = NULL,
        caption = gtm_caption(),
        title = "Draft Capital Over Expected (DCOE) by Team",
        subtitle = ifelse(
          year == 'All',
          paste0("Draft Years: ",
                 min(tmp$min_year),
                 '-',
                 max(tmp$max_year)),
          paste("Draft Year:", year, "Only")
        )
      )
  } else {
    tmp %>%
      ggplot(
        aes(
          x = reorder_within(draft_team, `Draft Capital Over Expected`, Metric),
          y = `Draft Capital Over Expected`,
          fill = ifelse(draft_team == team, team_abbr, NA),
          color = ifelse(draft_team == team, team_abbr, NA),
          alpha = ifelse(draft_team == team, 1, .75)
        )
      ) +
      geom_bar(stat = 'identity', show.legend = FALSE) +
      facet_wrap(~ factor(Metric, levels = c("Pick-Adjusted DCOE", "DCOE")), scales = 'free') +
      scale_fill_nfl() +
      scale_color_nfl() +
      scale_x_reordered() +
      coord_flip() +
      theme_gtm() +
      labs(
        x = NULL,
        caption = gtm_caption(),
        title = "Draft Capital Over Expected (DCOE) by Team",
        subtitle = ifelse(
          year == 'All',
          paste0("Draft Years: ",
                 min(tmp$min_year),
                 '-',
                 max(tmp$max_year)),
          paste("Draft Year:", year, "Only")
        )
      )
  }
  
}

getEDP_Range <- function(year = 2024,
                         round = 1,
                         draft = FALSE) {
  if (draft == FALSE) {
    getPredictions() %>%
      filter(draft_year == year,
             round_clean(avg_rank, year) == round) %>%
      mutate(name = fct_reorder(name,-avg_rank)) -> dat
  } else {
    getPredictions() %>%
      filter(draft_year == year) %>%
      inner_join(
        getActual() %>%
          filter(draft_year == year,
                 draft_round == round),
        by = c('draft_year', 'name', 'position', 'school')
      ) %>%
      mutate(name = fct_reorder(name,-draft_pick)) %>%
      select(-draft_round, -draft_pick, -draft_team, -draft_rank) -> dat
  }
  
  seq(min(dat$hdi_upper), max(dat$hdi_lower), 10) %>% pretty -> brks
  brks[1] = min(dat$hdi_upper)
  brks[length(brks)] = max(dat$hdi_lower)
  
  ggplot(data = dat) +
    geom_point(aes(x = hdi_upper,
                   y = name),
               color = 'black',
               size = 2) +
    geom_point(aes(
      x = avg,
      y = name,
      color = ifelse(
        position %in% c('QB',
                        'RB',
                        'WR',
                        'TE',
                        'OT',
                        'G',
                        'C'),
        'Offense',
        'Defense'
      )
    ),
    # color = astro_orange(),
    size = 2) +
    geom_point(aes(x = hdi_lower, y = name),
               color = 'black',
               size = 2) +
    geom_segment(aes(
      x = avg,
      y = name,
      yend = name,
      xend = hdi_upper,
      group = name
    ),
    linetype = 'dotted') +
    geom_segment(aes(
      x = avg,
      y = name,
      yend = name,
      xend = hdi_lower,
      group = name
    ),
    linetype = 'dotted') +
    geom_segment(
      aes(
        x = avg,
        y = name,
        yend = name,
        xend = hdi_upper,
        group = name,
        color = ifelse(
          position %in% c('QB',
                          'RB',
                          'WR',
                          'TE',
                          'OT',
                          'G',
                          'C'),
          'Offense',
          'Defense'
        )
      ),
      linewidth = 5,
      alpha = .25
      # , color = astro_orange()
    ) +
    geom_segment(
      aes(
        x = avg,
        y = name,
        yend = name,
        xend = hdi_lower,
        group = name,
        color = ifelse(
          position %in% c('QB',
                          'RB',
                          'WR',
                          'TE',
                          'OT',
                          'G',
                          'C'),
          'Offense',
          'Defense'
        )
      ),
      linewidth = 5,
      alpha = .25
      # , color = astro_orange()
    ) +
    geom_text(aes(
      x = hdi_lower + (ifelse(round == 1, 2, 4)),
      y = name,
      label = hdi_lower
    )) +
    geom_text(aes(
      x = hdi_upper - (ifelse(round == 1, 2, 4)),
      y = name,
      label = hdi_upper
    )) +
    scale_x_continuous(limits = c(brks[1] - (ifelse(round == 1, 2, 4)), brks[length(brks)] + (ifelse(round == 1, 2, 4))),
                       breaks = brks) +
    scale_color_manual(
      values = c('Offense' = astro_orange(),
                 'Defense' = 'dodgerblue'),
      breaks = c('Offense', 'Defense')
    ) +
    theme_gtm() +
    labs(
      x = 'Expected Draft Position',
      y = '',
      title = paste0('Range of Outcomes in the ', year, ' NFL Draft'),
      subtitle = paste0(
        'Round ',
        round,
        ' Expected Draft Position Prospects, As of: ',
        getMocks() %>%
          filter(draft_year == year) %>%
          summarize(max(date)) %>%
          pull %>%
          format("%m/%d/%y")
      ),
      color = '',
      caption = gtm_caption()
    )
}

# getDCOE_TeamChart <- function(year = 'All', chart = 'bar') {
#   if (year == 'All') {
#     getDCOE_Players() %>%
#       filter(!is.na(draft_team)) %>%
#       group_by(draft_team) %>%
#       mutate(team_dcoe = mean(log_dcoe)) %>%
#       ungroup %>%
#       mutate(draft_team = fct_reorder(draft_team, team_dcoe)) %>%
#       inner_join(
#         teamcolors %>%
#           filter(league == 'nfl') %>%
#           rename(draft_team = name) %>%
#           mutate(
#             draft_team = case_when(
#               draft_team == 'Washington Redskins' ~ 'Washington Commanders',
#               draft_team == 'Oakland Raiders' ~ 'Las Vegas Raiders',
#               TRUE ~ draft_team
#             ),
#             division = factor(
#               division,
#               levels = c(
#                 'AFC East',
#                 'NFC East',
#                 'AFC South',
#                 'NFC South',
#                 'AFC North',
#                 'NFC North',
#                 'AFC West',
#                 'NFC West'
#               )
#             )
#           ),
#         by = 'draft_team'
#       ) -> dat
#
#   } else {
#     getDCOE_Players() %>%
#       filter(!is.na(draft_team),
#              draft_year == year) %>%
#       group_by(draft_team) %>%
#       mutate(team_dcoe = sum(log_dcoe)) %>%
#       group_by(draft_team) %>%
#       summarize(team_dcoe = sum(team_dcoe)) %>%
#       ungroup %>%
#       inner_join(
#         teamcolors %>%
#           filter(league == 'nfl') %>%
#           rename(draft_team = name) %>%
#           mutate(
#             draft_team = case_when(
#               draft_team == 'Washington Redskins' ~ 'Washington Commanders',
#               draft_team == 'Oakland Raiders' ~ 'Las Vegas Raiders',
#               TRUE ~ draft_team
#             ),
#             division = factor(
#               division,
#               levels = c(
#                 'AFC East',
#                 'NFC East',
#                 'AFC South',
#                 'NFC South',
#                 'AFC North',
#                 'NFC North',
#                 'AFC West',
#                 'NFC West'
#               )
#             )
#           ),
#         by = 'draft_team'
#       ) -> dat
#   }
#
#   if (chart == 'ggridges') {
#     dat %>%
#       ggplot() +
#       geom_density_ridges(
#         aes(
#           x = team_dcoe,
#           y = draft_team,
#           fill = primary,
#           group = draft_team
#         ),
#         show.legend = FALSE,
#         alpha = .5
#       ) +
#       geom_vline(xintercept = 0,
#                  linewidth = 1,
#                  linetype = 'dotted') +
#       facet_wrap( ~ division, scale = 'free_y', nrow = 4) +
#       theme_gtm() +
#       scale_fill_identity() +
#       labs(
#         x = 'Draft Capital Over Expected',
#         y = '',
#         title = paste0(
#           "DCOE by Team, ",
#           ifelse(
#             year == 'All',
#             getActual() %>%
#               filter(!is.na(name)) %>%
#               summarize(paste0(
#                 min(draft_year), "-", max(draft_year)
#               )) %>%
#               pull,
#             year
#           )
#         ),
#         caption = gtm_caption()
#       )
#   } else {
#     dat %>%
#       ggplot() +
#       geom_bar(
#         aes(
#           x = team_dcoe,
#           y = fct_reorder(draft_team, team_dcoe),
#           fill = primary,
#           group = draft_team
#         ),
#         show.legend = FALSE,
#         stat = 'identity'
#       ) +
#       geom_vline(xintercept = 0,
#                  linewidth = 1,
#                  linetype = 'dotted') +
#       theme_gtm() +
#       scale_fill_identity() +
#       labs(
#         x = 'Draft Capital Over Expected',
#         y = '',
#         title = paste0(
#           "DCOE by Team, ",
#           ifelse(
#             year == 'All',
#             getActual() %>%
#               filter(!is.na(name)) %>%
#               summarize(paste0(
#                 min(draft_year), "-", max(draft_year)
#               )) %>%
#               pull,
#             year
#           )
#         ),
#         caption = gtm_caption()
#       )
#   }
# }

bind_rows(
  data.frame(
    draft_year = 2022,
    agent = 'Eugene Lee',
    agency = 'Vanguard Sports Group',
    name = c('Myron Tagovailoa-Amosa')
  ),
  data.frame(
    draft_year = 2021,
    agent = 'Eugene Lee',
    agency = 'Vanguard Sports Group',
    name = c('Baron Browning')
  ),
  data.frame(
    draft_year = 2020,
    agent = 'Eugene Lee',
    agency = 'Vanguard Sports Group',
    name = c('Robert Windsor',
             'Yosuah Nijman')
  ),
  data.frame(
    draft_year = 2024,
    agent = 'Ron Slavin',
    agency = 'Sportstars',
    name = c("Rashee Rice",
             "JL Skinner",
             "Keeanu Benton",
             "Aidan O'Connell",
             "Dylan Horton",
             "Cade Stover",
             "Isiah McGuire",
             "Connor Galvin")
  ),
  data.frame(
    draft_year = 2022,
    agent = 'Ron Slavin',
    agency = 'Sportstars',
    name = c(
      'John Ridgeway',
      'Akayleb Evans',
      'Terrel Bernard',
      'Trestan Ebner',
      'Kellen Diesch'
    )
  ),
  data.frame(
    draft_year = 2021,
    agent = 'Ron Slavin',
    agency = 'Sportstars',
    name = c("Carson Green",
             "Christian Uphoff",
             "Quinn Meinerz")
  ),
  data.frame(
    draft_year = 2021,
    agent = 'Lindsay Crook',
    agency = 'ASCEND ATHLETICS',
    name = c("James Wiggins",
             "Tuf Borland")
  ),
  data.frame(
    draft_year = 2020,
    agent = 'Ron Slavin',
    agency = 'Sportstars',
    name = c(
      "Curtis Weaver",
      "James Lynch",
      "J.R. Reed",
      "Denzel Mims",
      "Ezra Cleveland"
    )
  ),
  data.frame(
    draft_year = 2020,
    agent = 'Lindsay Crook',
    agency = 'ASCEND ATHLETICS',
    name = c(
      "Darnell Mooney",
      "Netane Muti",
      "Scottie Phillips",
      "Josh Avery",
      "Matt McCann",
      "Nasir Player"
    )
  ),
  data.frame(
    draft_year = 2018,
    agent = 'Ron Slavin',
    agency = 'Sportstars',
    name = "Leighton Vander Esch"
  ),
  data.frame(
    draft_year = 2020,
    agent = 'AJ Vaynerchuk',
    agency = 'VaynerSports',
    name = c('Darnay Holmes',
             'Steven Montez')
  ),
  data.frame(
    draft_year = 2022,
    agent = 'AJ Vaynerchuk',
    agency = 'VaynerSports',
    name = c(
      'Desmond Ridder',
      'David Bell'
    )
  ),
  data.frame(
    draft_year = 2023,
    agent = 'AJ Vaynerchuk',
    agency = 'VaynerSports',
    name = c(
      'Jayson Ademilola',
      'Justin Ademilola'
    )
  ),
  data.frame(
    draft_year = 2022,
    agent = 'Ian Greengross',
    agency = 'Greengross Athletic Management Enterprises',
    name = c("Marcus Jones")
  ),
  data.frame(
    draft_year = 2022,
    agent = 'Jared Fox',
    agency = 'Sportstars',
    name = c(
      'Nick Zakelj',
      'Olakunle Fatukasi',
      'Travis Jones',
      'Zion Johnson',
      'Micah McFadden',
      'Esezi Otomewo',
      'Bryan Cook',
      'Chigoziem Okonkwo',
      'Eyioma Uwazurike',
      'Mike Rose',
      'Jordan Jackson',
      'Joshua Ezeudu'
    )
  )
) %>%
  arrange(desc(draft_year), agent, agency, name) -> agent_targets

getPlayerStock <-
  function(yr = getUndraftable() %>% pull(draft_year) %>% max) {
    map_dfr(yr,
            function(year) {
              getMocks() %>%
                filter(draft_year == year) %>%
                distinct(draft_year, draft_weight, date) %>%
                left_join(data.frame(
                  draft_year = 2018:2023,
                  date = c(
                    as.Date("2018-02-05"),
                    as.Date("2019-02-04"),
                    as.Date("2020-02-03"),
                    as.Date("2021-02-08"),
                    as.Date('2022-02-14'),
                    as.Date('2023-02-13')
                  ),
                  sb = 1
                ),
                by = c('date', 'draft_year')) %>%
                left_join(data.frame(
                  draft_year = c(2018:2023),
                  date = c(
                    as.Date("2018-03-05"),
                    as.Date("2019-03-04"),
                    as.Date("2020-03-02"),
                    as.Date("2021-03-08"),
                    as.Date('2022-03-07'),
                    as.Date('2023-03-06')
                  ),
                  cb = 1
                ),
                by = c('date', 'draft_year')) -> weight_date
              
              getDraftData('All') %>%
                filter(draft_year == year) %>%
                group_by(draft_year, name, position, school) %>%
                ungroup %>%
                inner_join(
                  getEDP() %>%
                    filter(type == 'All', draft_year == year) %>%
                    select(-type, -n, -n_total),
                  by = c('draft_year', 'name', 'position', 'school')
                ) %>%
                group_by(draft_year, name, position, school) %>%
                nest %>%
                ungroup %>%
                mutate(
                  model = map(
                    .$data,
                    ~ loess(
                      formula = pick ~ draft_weight,
                      weight = log_mse_norm,
                      control = loess.control(surface = "direct"),
                      data = .
                    )
                  ),
                  today = map2_dbl(
                    model,
                    data.frame(draft_weight = weight_date[weight_date$date == max(weight_date$date), ]$draft_weight),
                    predict
                  ),
                  earliest = map2_dbl(
                    model,
                    data.frame(draft_weight = weight_date[weight_date$date == min(weight_date$date), ]$draft_weight),
                    predict
                  ),
                  yesterday = map2_dbl(
                    model,
                    data.frame(draft_weight = weight_date[weight_date$date == (max(weight_date$date) -
                                                                                 1),]$draft_weight),
                    predict
                  ),
                  sb = map2_dbl(
                    model,
                    data.frame(draft_weight = max(weight_date[weight_date$sb == 1,]$draft_weight, na.rm = TRUE)),
                    predict
                  ),
                  cb = map2_dbl(
                    model,
                    data.frame(draft_weight = max(weight_date[weight_date$cb == 1,]$draft_weight, na.rm = TRUE)),
                    predict
                  ),
                  week = map2_dbl(
                    model,
                    data.frame(draft_weight = weight_date[weight_date$date == (max(weight_date$date) - weeks(1)), ]$draft_weight),
                    predict
                  ),
                  week2 = map2_dbl(
                    model,
                    data.frame(draft_weight = weight_date[weight_date$date == (max(weight_date$date) - weeks(2)), ]$draft_weight),
                    predict
                  ),
                  month = map2_dbl(
                    model,
                    data.frame(draft_weight = weight_date[weight_date$date == (max(weight_date$date) - months(1)), ]$draft_weight),
                    predict
                  ),
                  across(where(is.double), ~ ifelse(. < 1, 1, .)),
                  data = NULL,
                  model = NULL,
                ) %>%
                arrange(today) %>%
                left_join(
                  getActual() %>%
                    group_by(draft_year) %>%
                    summarize(max_pick = max(draft_pick),
                              .groups = 'drop'),
                  by = 'draft_year'
                ) %>% 
                mutate(
                  rank_today = dense_rank(today),
                  rank_earliest = dense_rank(earliest),
                  delta_earliest = earliest - today,
                  log_earliest = log10(earliest) - log10(today),
                  stock_earliest = case_when(
                    round(today, 1) > round(earliest, 1) ~ 'Down',
                    round(today, 1) < round(earliest, 1) ~ 'Up',
                    TRUE ~ 'Holding Steady'
                  ),
                  rank_yesterday = dense_rank(yesterday),
                  delta_yesterday = yesterday - today,
                  log_yesterday = log10(yesterday) - log10(today),
                  stock_yesterday = case_when(
                    round(today, 1) > round(yesterday, 1) ~ 'Down',
                    round(today, 1) < round(yesterday, 1) ~ 'Up',
                    TRUE ~ 'Holding Steady'
                  ),
                  rank_week = dense_rank(week),
                  delta_week = week - today,
                  log_week = log10(week) - log10(today),
                  stock_week = case_when(
                    round(today, 1) > round(week, 1) ~ 'Down',
                    round(today, 1) < round(week, 1) ~ 'Up',
                    TRUE ~ 'Holding Steady'
                  ),
                  rank_week2 = dense_rank(week2),
                  delta_week2 = week2 - today,
                  log_week2 = log10(week2) - log10(today),
                  stock_week2 = case_when(
                    round(today, 1) > round(week2, 1) ~ 'Down',
                    round(today, 1) < round(week2, 1) ~ 'Up',
                    TRUE ~ 'Holding Steady'
                  ),
                  rank_month = dense_rank(month),
                  delta_month = month - today,
                  log_month = log10(month) - log10(today),
                  stock_month = case_when(
                    round(today, 1) > round(month, 1) ~ 'Down',
                    round(today, 1) < round(month, 1) ~ 'Up',
                    TRUE ~ 'Holding Steady'
                  ),
                  rank_sb = dense_rank(sb),
                  delta_sb = sb - today,
                  log_sb = log10(sb) - log10(today),
                  stock_sb = case_when(
                    round(today, 1) > round(sb, 1) ~ 'Down',
                    round(today, 1) < round(sb, 1) ~ 'Up',
                    TRUE ~ 'Holding Steady'
                  ),
                  rank_cb = dense_rank(cb),
                  delta_cb = cb - today,
                  log_cb = log10(cb) - log10(today),
                  stock_cb = case_when(
                    round(today, 1) > round(cb, 1) ~ 'Down',
                    round(today, 1) < round(cb, 1) ~ 'Up',
                    TRUE ~ 'Holding Steady'
                  )
                ) %>%
                ungroup
            }) %>%
      mutate(
        across(contains('rank'), ~ ifelse(. > max_pick, max_pick + 1, .)),
        max_pick = NULL
      )
  }

getStockList <- function(x = 2023) {
  getPlayerStock(x) %>%
    inner_join(
      getEDP() %>%
        # filter(draft_year == x, type == 'Expert') %>%
        filter(draft_year == x, type == 'All') %>%
        mutate(perc = n / n_total) %>%
        filter(perc > .15) %>%
        select(draft_year, name, position, school),
      by = c("draft_year", "name", "position", "school")
    )
}

getDCOE_Heatmap <- function(edp_flag = TRUE,
                            mock_flag = 'All',
                            year_draft = 'All') {
  getDCOE_Players(edp = edp_flag,
                  mock_type = mock_flag,
                  year = year_draft) %>%
    # filter(draft_year > min(draft_year)) %>%
    left_join(
      getActual() %>%
        distinct(draft_year, draft_pick, draft_round),
      by = c('draft_year', 'draft_pick')
    ) %>%
    left_join(
      getActual() %>%
        distinct(draft_year, edp_rank = draft_pick, edp_round = draft_round),
      by = c('draft_year', 'edp_rank')
    ) %>%
    # rowwise %>%
    # mutate(
    #   edp_round = round_clean(edp_rank, year = draft_year),
    #   draft_round = round_clean(draft_pick, year = draft_year)
    # ) %>%
    count(edp_round, draft_round) %>%
    complete(edp_round, draft_round) %>%
    mutate(across(contains("_round"),
                  ~ ifelse(
                    !is.na(.), paste('Round', .), 'Undrafted'
                  )),
           across(contains("_round"),
                  ~ factor(.)),
           n = coalesce(n, 0)) %>%
    group_by(draft_round) %>%
    mutate(perc = n / sum(n)) %>%
    ungroup -> tmp
  
  ggplot(data = tmp,
         aes(
           x = edp_round,
           y = fct_rev(draft_round),
           fill = perc,
           label = paste0(percent(perc, accuracy = .1),
                          "\n(",
                          comma(n, accuracy = 1), ")"),
           fontface = ifelse(edp_round == draft_round, "bold", "plain")
         )) +
    geom_tile(color = 'black', show.legend = FALSE) +
    scale_fill_gradient(low = '#FFFFFF', high = astro_orange()) +
    scale_x_discrete(position = "top") +
    geom_text() +
    theme_gtm() +
    labs(
      x = "Expected Draft Round",
      y = "Actual Draft Round",
      caption = gtm_caption(),
      title = "Signal in Mock Draft Data",
      # subtitle = "Correlation Between Expected and Actual Draft Round"
    )
}

# getESPNHeadshots <- function() {
#   c((getMocks() %>% summarize(min(draft_year)) %>% pull %>% -5):(getMocks() %>% summarize(max(draft_year)) %>% pull %>% -1)) %>%
#     map_dfr(function(x) {
#       cfbd_team_roster(x, verbose = FALSE) %>%
#         select(athlete_id,
#                first_name,
#                last_name,
#                position,
#                school = team,
#                headshot_url) %>%
#         mutate(
#           draft_year = x + 1,
#           name = paste(first_name, last_name),
#           first_name = NULL,
#           last_name = NULL,
#           school = school_clean(school),
#           position = position_clean(position),
#           name = name_special(name, school),
#           name = name_clean(name)
#         )
#     }) %>%
#     group_by(athlete_id) %>%
#     filter(draft_year == max(draft_year)) %>%
#     select(-draft_year) %>%
#     ungroup %>%
#     select(athlete_id,
#            name,
#            position,
#            school,
#            headshot_url) %>%
#     mutate(across(everything(), ~ str_squish(.))) %>%
#     filter(substring(name, 0, 1) %in% LETTERS) %>%
#     mutate(
#       position = case_when(
#         name == 'Andrew Brown' & school == 'Virginia' ~ 'DT',
#         name == 'Akeem Davis-Gaither' ~ 'LB',
#         name == 'Brandon Jones' & school == 'Texas' ~ 'S',
#         name == 'Josh Jones' & school == 'Houston' ~ 'OT',
#         name == 'Reggie Robinson' & school == 'Tulsa' ~ 'CB',
#         name == 'Damon Arnette' & school == 'Ohio State' ~ 'CB',
#         name == 'Benny Snell' & school == 'Kentucky' ~ 'RB',
#         name == 'Terrell Lewis' & school == 'Alabama' ~ 'EDGE',
#         name == 'Austin Watkins' & school == 'UAB' ~ 'WR',
#         name == 'Jordan Smith' & school == 'UAB' ~ 'EDGE',
#         name == "D'Ante Smith" & school == 'East Carolina' ~ 'OT',
#         name == "Patrick Jones" & school == 'Pittsburgh' ~ 'EDGE',
#         name == 'Robert Rochell' &
#           school == 'Central Arkansas' ~ 'CB',
#         name == 'Shawn Davis' & school == 'Florida' ~ 'S',
#         name == 'Tony Poljan' & school == 'Virginia' ~ 'TE',
#         name == 'Adam Anderson' & school == 'Georgia' ~ 'EDGE',
#         name == 'Kingsley Enagbare' &
#           school == 'South Carolina' ~ "EDGE",
#         TRUE ~ position
#       ),
#       school = case_when(
#         name == 'Kenny Robinson' ~ 'St. Louis Battlehawks',
#         name == 'Tommy Doyle' ~ 'Miami (OH)',
#         name == "Henry To'o To'o" ~ 'Alabama',
#         TRUE ~ school
#       )
#     ) -> rost
#
#   getEDP() %>%
#     filter(type == 'All') %>%
#     select(draft_year,
#            name,
#            position,
#            school) %>%
#     left_join(rost, by = c("name", "school", "position")) -> tmp
#
#   tmp %>%
#     anti_join(
#       tmp %>%
#         semi_join(
#           tmp %>%
#             count(draft_year, name, position, school) %>%
#             filter(n > 1),
#           by = c("draft_year", "name", "position", "school")
#         ) %>%
#         rowwise %>%
#         filter(GET(headshot_url)$status_code != 200) %>%
#         ungroup,
#       by = c(
#         "draft_year",
#         "name",
#         "position",
#         "school",
#         "athlete_id",
#         "headshot_url"
#       )
#     ) -> tmp
#
#   bind_rows(
#     tmp %>%
#       filter(!is.na(athlete_id)),
#     tmp %>%
#       filter(is.na(athlete_id)) %>%
#       select(-athlete_id, -headshot_url) %>%
#       left_join(rost %>% select(-position),
#                 by = c('name', 'school'))
#   ) -> dat
#
#   return(dat)
#
# }

changePlayerRecord <- function(old, new) {
  db <- dbConnect(SQLite(), "data/gtm_db.sqlite")
  
  #### MOCKS ####
  read_rds("../GrindingtheMocks-data/data/Mocks.rds") %>%
    mutate(name = case_when(name == old ~ new,
                            TRUE ~ name)) %>%
    write_rds("../GrindingtheMocks-data/data/Mocks.rds")
  
  dbWriteTable(db,
               "mocks",
               read_rds("../GrindingtheMocks-data/data/Mocks.rds"),
               overwrite = TRUE)
  
  #### UNDRAFTABLE ####
  read_rds("../GrindingtheMocks-data/data/Undraftable.rds") %>%
    mutate(name = case_when(name == old ~ new,
                            TRUE ~ name)) %>%
    write_rds("../GrindingtheMocks-data/data/Undraftable.rds")
  
  dbWriteTable(
    db,
    "undraftable",
    read_rds("../GrindingtheMocks-data/data/Undraftable.rds"),
    overwrite = TRUE
  )
  
  #### ACTUAL ####
  read_rds("../GrindingtheMocks-data/data/Actual.rds") %>%
    mutate(name = case_when(name == old ~ new,
                            TRUE ~ name)) %>%
    write_rds("../GrindingtheMocks-data/data/Actual.rds")
  
  dbWriteTable(db,
               "actual",
               read_rds("../GrindingtheMocks-data/data/Actual.rds"),
               overwrite = TRUE)
  
  #### EDP ####
  read_rds("../GrindingtheMocks-data/data/EDP.rds") %>%
    mutate(name = case_when(name == old ~ new,
                            TRUE ~ name)) %>%
    write_rds("../GrindingtheMocks-data/data/EDP.rds")
  
  dbWriteTable(db,
               "edp",
               read_rds("../GrindingtheMocks-data/data/EDP.rds"),
               overwrite = TRUE)
  
  #### POSTERIORS ####
  read_rds("../GrindingtheMocks-data/data/Posteriors.rds") %>%
    mutate(name = case_when(name == old ~ new,
                            TRUE ~ name)) %>%
    write_rds("../GrindingtheMocks-data/data/Posteriors.rds")
  
  dbWriteTable(
    db,
    "posteriors",
    read_rds("../GrindingtheMocks-data/data/Posteriors.rds"),
    overwrite = TRUE
  )
  
  #### PREDICTIONS ####
  read_rds("../GrindingtheMocks-data/data/Predictions.rds") %>%
    mutate(name = case_when(name == old ~ new,
                            TRUE ~ name)) %>%
    write_rds("../GrindingtheMocks-data/data/Predictions.rds")
  
  dbWriteTable(
    db,
    "predictions",
    read_rds("../GrindingtheMocks-data/data/Predictions.rds"),
    overwrite = TRUE
  )
  
  #### PROBABILITIES ####
  read_rds("../GrindingtheMocks-data/data/Probabilities.rds") %>%
    mutate(name = case_when(name == old ~ new,
                            TRUE ~ name)) %>%
    write_rds("../GrindingtheMocks-data/data/Probabilities.rds")
  
  dbWriteTable(
    db,
    "probabilities",
    read_rds("../GrindingtheMocks-data/data/Probabilities.rds"),
    overwrite = TRUE
  )
  
  dbDisconnect(db)
}

# pad_fn <- function(x, nsmall = 2){
#
#   # round and format values as text with specific number of decimals
#   round_x <- round(x, digits = nsmall)
#   fmt_x <- format(round_x, nsmall = nsmall)
#
#   # calc number of trailing zeros
#   nbsp_len <- nchar(fmt_x) - nchar(sub("0*$", "", fmt_x))
#
#   # create string of non-breaking spaces
#   rep_nbsp <- strrep("&nbsp", nbsp_len)
#
#   # remove traililng zeros by position
#   fmt_out <- substr(fmt_x, 1, nchar(fmt_x) - nbsp_len)
#
#   # add the non-breaking spaces to the formatted values
#   filled_out <- paste0(fmt_out, rep_nbsp)
#
#   filled_out
#
# }

# gt_gtm_col_numeric <-
#   function(gt_object,
#            columns = NULL,
#            domain = NULL,
#            ...,
#            trim = FALSE) {
#     stopifnot("Input must be a gt table" = "gt_tbl" %in% class(gt_object))    # pal_hex <- c(
#     #   '#1e90ff',
#     #   '#64a1ff',
#     #   '#8cb3ff',
#     #   '#acc5ff',
#     #   '#c9d8ff',
#     #   '#e5ebff',
#     #   '#ffffff'
#     # )
#
#     pal_hex <- c('#eb6e1f',
#                  '#f48747',
#                  '#fc9f6b',
#                  '#ffb78f',
#                  '#ffcfb3',
#                  '#ffe7d9',
#                  '#ffffff')
#
#     if (isTRUE(trim))
#       pal_hex <- pal_hex[2:6]
#
#     hulk_pal <- function(x) {
#       scales::col_numeric(pal_hex,
#                           domain = domain,
#                           ...)(x)
#     }
#
#     gt::data_color(gt_object,
#                    columns = {
#                      {
#                        columns
#                      }
#                    },
#                    colors = hulk_pal)
#
#   }

probTable <- function(nm = "Drake London",
                      img = "www/gtm_logo_transparent.png",
                      gt = TRUE,
                      save = FALSE) {
  getProbabilities(nm) %>%
    rowwise %>%
    mutate(round = round_clean(pick, year = draft_year),
           round = coalesce(round, 8)) -> tmp
  
  suppressWarnings(try(local_image(filename = img, height = px(80)), silent = TRUE)
  ) -> loc_test
  
  head_text <- paste0(
    "<div'>
    <div style='float:right;'>
      <h3>",
    unique(tmp$name),
    ", '",
    substring(unique(tmp$draft_year), 3, 4),
    "<br>(",
    getPredictions() %>%
      filter(
        draft_year == unique(tmp$draft_year),
        position == unique(tmp$position)
      ) %>%
      arrange(avg_rank) %>%
      mutate(pos_rank = paste0(position, row_number())) %>%
      filter(name == unique(tmp$name)) %>%
      pull(pos_rank),
    ", ",
    unique(tmp$school),
    ")</h3>
    </div>
    <div style='float:left;'><br>",
    ifelse(
      class(loc_test) == 'character',
      loc_test,
      web_image(url = img, heigh = px(80))
    ),
    "</div>
  </div>"
  )
  
  suppressWarnings(
    tmp %>%
      group_by(draft_year, name, position, school) %>%
      summarize(
        top_1 = sum(probability[pick == 1]),
        top_5 = sum(probability[pick <= 5]),
        top_10 = sum(probability[pick <= 10]),
        top_16 = sum(probability[pick <= 16]),
        round_1 = sum(probability[round <= 1], na.rm = TRUE),
        round_2 = sum(probability[round <= 2], na.rm = TRUE),
        round_3 = sum(probability[round <= 3], na.rm = TRUE),
        round_4 = sum(probability[round <= 4], na.rm = TRUE),
        round_5 = sum(probability[round <= 5], na.rm = TRUE),
        round_6 = sum(probability[round <= 6], na.rm = TRUE),
        round_7 = sum(probability[round <= 7], na.rm = TRUE),
        undrafted = sum(probability[round <= 7], na.rm = TRUE),
        `50th_%ile` = min(cumulative[round(cumulative, 2) >= .5]),
        fiftieth_pick = min(pick[cumulative == min(cumulative[round(cumulative, 2) >= .5])]),
        adp_pick = getPredictions() %>%
          filter(name == nm) %>%
          pull(avg_rank),
        adp_pick = ifelse(
          adp_pick > getActual() %>%
            filter(draft_year %in% tmp$draft_year) %>%
            pull(draft_pick) %>%
            max,
          (
            getActual() %>%
              filter(draft_year %in% tmp$draft_year) %>%
              pull(draft_pick) %>%
              max
          ) + 1,
          adp_pick
        ),
        ceiling_pick = getPredictions() %>%
          filter(name == nm) %>%
          pull(hdi_upper),
        ceiling_pick = ifelse(
          ceiling_pick > getActual() %>%
            filter(draft_year %in% tmp$draft_year) %>%
            pull(draft_pick) %>%
            max,
          (
            getActual() %>%
              filter(draft_year %in% tmp$draft_year) %>%
              pull(draft_pick) %>%
              max
          ) + 1,
          ceiling_pick
        ),
        floor_pick = getPredictions() %>%
          filter(name == nm) %>%
          pull(hdi_lower),
        floor_pick = ifelse(
          floor_pick > getActual() %>%
            filter(draft_year %in% tmp$draft_year) %>%
            pull(draft_pick) %>%
            max,
          (
            getActual() %>%
              filter(draft_year %in% tmp$draft_year) %>%
              pull(draft_pick) %>%
              max
          ) + 1,
          floor_pick
        ),
        actual_pick = ifelse(
          unique(tmp$draft_year) %in% c(
            getActual() %>% filter(!is.na(name)) %>% distinct(draft_year) %>% pull
          ),
          getActual() %>%
            filter(name == nm) %>%
            pull(draft_pick),
          NA
        ),
        actual_pick = ifelse(length(actual_pick) == 0, NA, actual_pick),
        `avg._draft_position_%ile` = max(cumulative[pick <= getPredictions() %>%
                                                      filter(name == nm) %>%
                                                      pull(avg_rank)], na.rm = TRUE),
        `ceiling_%ile` = max(cumulative[pick <= getPredictions() %>%
                                          filter(name == nm) %>%
                                          pull(hdi_upper)], na.rm = TRUE),
        `floor_%ile` = max(cumulative[pick <= getPredictions() %>%
                                        filter(name == nm) %>%
                                        pull(hdi_lower)], na.rm = TRUE),
        `actual_draft_position_%ile` = ifelse(
          unique(tmp$draft_year) %in% c(
            getActual() %>% filter(!is.na(name)) %>% distinct(draft_year) %>% pull
          ),
          max(cumulative[pick <= getActual() %>%
                           filter(name == nm) %>%
                           pull(draft_pick)], na.rm = TRUE),
          NA
        ),
        `actual_draft_position_%ile` = ifelse(
          `actual_draft_position_%ile` == -Inf,
          NA,
          `actual_draft_position_%ile`
        )
      ) %>%
      ungroup %>%
      gather(
        draft_bucket,
        draft_probability,-draft_year,-name,-position,-school,-contains("_pick")
      ) %>%
      mutate(
        draft_bucket = gsub("_", " ", draft_bucket) %>% tools::toTitleCase(),
        draft_bucket = case_when(
          draft_bucket == '50th %ile' ~ paste0(
            draft_bucket,
            " - Pick ",
            fiftieth_pick,
            " (Round ",
            round_clean(fiftieth_pick, draft_year),
            ")"
          ),
          
          draft_bucket == 'Avg. Draft Position %ile' ~ paste0(
            draft_bucket,
            " - Pick ",
            adp_pick,
            " (Round ",
            ifelse(
              is.na(round_clean(adp_pick, draft_year)),
              'Undrafted',
              round_clean(adp_pick, draft_year)
            ),
            ")"
          ),
          draft_bucket == 'Actual Draft Position %ile' ~ ifelse(
            !is.na(actual_pick),
            paste0(
              draft_bucket,
              " - Pick ",
              actual_pick,
              " (Round ",
              ifelse(
                is.na(round_clean(actual_pick, draft_year)),
                'Undrafted',
                round_clean(actual_pick, draft_year)
              ),
              ")"
            ),
            'Actual Draft Position %ile'
          ),
          draft_bucket == 'Ceiling %ile' ~ paste0(
            draft_bucket,
            " - Pick ",
            ceiling_pick,
            " (Round ",
            ifelse(
              is.na(round_clean(ceiling_pick, draft_year)),
              'Undrafted',
              round_clean(ceiling_pick, draft_year)
            ),
            ")"
          ),
          draft_bucket == 'Floor %ile' ~ paste0(
            draft_bucket,
            " - Pick ",
            floor_pick,
            " (Round ",
            ifelse(
              is.na(round_clean(floor_pick, draft_year)),
              'Undrafted',
              round_clean(floor_pick, draft_year)
            ),
            ")"
          ),
          TRUE ~ draft_bucket
        ),
        floor_pick = NULL,
        ceiling_pick = NULL,
        fiftieth_pick = NULL,
        adp_pick = NULL,
        actual_pick = NULL
      ) %>%
      arrange(draft_probability) %>%
      mutate(
        draft_probability = ifelse(
          draft_bucket == "Undrafted",
          1 - draft_probability,
          draft_probability
        )
      ) %>%
      select(-draft_year:-school) %>%
      filter(!is.na(draft_probability)) %>%
      filter(
        round(draft_probability, 2) <= .95 |
          grepl("Actual|Avg.", draft_bucket)
      ) %>%
      filter(
        round(draft_probability, 2) >= .05 |
          grepl("Actual|Avg.|Ceiling|Floor", draft_bucket)
      ) %>%
      distinct %>%
      setNames(c("Draft Pick Bucket", "Draft Probability"))
  ) %>%
    mutate(
      # check = sub(".*[-] ", "", `Draft Pick Bucket`),
      section = ifelse(
        grepl("Ceiling|Floor|Actual|Avg.|50th", `Draft Pick Bucket`),
        'Range of Outcomes',
        'Draft Milestones'
      ),
      section = factor(section, levels = c('Range of Outcomes',
                                           'Draft Milestones'))
    ) %>%
    arrange(section) %>%
    mutate(
      `Draft Pick Bucket` = sub(" [-] ", "<br /> &nbsp;&nbsp;", `Draft Pick Bucket`)
    ) -> dat
  
  # group_by(check) %>%
  # filter(`Draft Pick Bucket` == min(`Draft Pick Bucket`)) %>%
  # group_by(`Draft Probability`) %>%
  # filter(`Draft Pick Bucket` == max(`Draft Pick Bucket`)) %>%
  # ungroup %>%
  # select(-check) -> dat
  
  if (gt == TRUE) {
    dat %>%
      group_by(section) %>%
      gt %>%
      tab_header(title = html(head_text)) %>%
      data_color(2, colors = c("white", 'dodgerblue')) %>%
      fmt_percent(2) %>%
      tab_options(heading.padding = px(0),
                  table.font.names = 'Tahoma') %>%
      tab_source_note(source_note = md(
        paste0(
          '**<center>',
          "Chart: Ben Robinson (@benj_robinson)",
          '<br>',
          "Data: 'Grinding the Mocks', ",
          format(Sys.Date(), "%Y"),
          ".",
          "</center>**"
        )
      )) %>%
      fmt_percent(columns = `Draft Probability`,
                  decimals = 1) %>%
      cols_label(
        `Draft Pick Bucket` = md("**Draft Pick Bucket**"),
        `Draft Probability` = md("")
      ) %>%
      cols_width(`Draft Pick Bucket` ~ px(300),
                 `Draft Probability` ~ px(75)) %>%
      tab_style(
        style = cell_text(weight = "bold"),
        locations = cells_body(columns = `Draft Pick Bucket`)
      ) %>%
      tab_style(
        style = cell_text(color = astro_orange()),
        locations = cells_body(
          columns = `Draft Pick Bucket`,
          rows = grepl("Avg.|50th", `Draft Pick Bucket`)
        )
      ) %>%
      tab_style(
        style = cell_text(color = '#C6011F'),
        locations = cells_body(
          columns = `Draft Pick Bucket`,
          rows = grepl("Actual", `Draft Pick Bucket`)
        )
      ) %>%
      tab_style(
        style = cell_text(color = '#003594'),
        locations = cells_body(
          columns = `Draft Pick Bucket`,
          rows = grepl("Ceiling|Floor", `Draft Pick Bucket`)
        )
      ) %>%
      tab_style(
        style = cell_text(indent = pct(2.5)),
        locations = cells_body(columns = `Draft Pick Bucket`)
      ) %>%
      fmt_markdown(columns = `Draft Pick Bucket`) -> gtm_gt
    
    
  } else {
    dat %>%
      group_by(section) %>%
      gt %>%
      tab_header(title = html(head_text)) %>%
      data_color(2, colors = c("white", 'dodgerblue')) %>%
      fmt_percent(2) %>%
      tab_options(heading.padding = px(0),
                  table.font.names = 'Tahoma') %>%
      tab_source_note(source_note = md(
        paste0(
          '**<center>',
          "Chart: Ben Robinson (@benj_robinson)",
          '<br>',
          "Data: 'Grinding the Mocks', ",
          format(Sys.Date(), "%Y"),
          ".",
          "</center>**"
        )
      )) %>%
      fmt_percent(columns = `Draft Probability`,
                  decimals = 1) %>%
      cols_label(
        `Draft Pick Bucket` = md("**Draft Pick Bucket**"),
        `Draft Probability` = md("")
      ) %>%
      cols_width(`Draft Pick Bucket` ~ px(300),
                 `Draft Probability` ~ px(75)) %>%
      tab_style(
        style = cell_text(weight = "bold"),
        locations = cells_body(columns = `Draft Pick Bucket`)
      ) %>%
      tab_style(
        style = cell_text(color = astro_orange()),
        locations = cells_body(
          columns = `Draft Pick Bucket`,
          rows = grepl("Avg.|50th", `Draft Pick Bucket`)
        )
      ) %>%
      tab_style(
        style = cell_text(color = '#C6011F'),
        locations = cells_body(
          columns = `Draft Pick Bucket`,
          rows = grepl("Actual", `Draft Pick Bucket`)
        )
      ) %>%
      tab_style(
        style = cell_text(color = '#003594'),
        locations = cells_body(
          columns = `Draft Pick Bucket`,
          rows = grepl("Ceiling|Floor", `Draft Pick Bucket`)
        )
      ) %>%
      tab_style(
        style = cell_text(indent = pct(2.5)),
        locations = cells_body(columns = `Draft Pick Bucket`)
      ) %>%
      fmt_markdown(columns = `Draft Pick Bucket`) %>%
      as_ggplot -> gtm_gt
  }
  
  if (save == TRUE) {
    gtsave(gtm_gt,
           filename = paste0(
             "C:/Users/benjr/Desktop/",
             gsub(" ", "_", nm),
             "_PROB_TABLE.PNG"
           ))
  } else {
    return(gtm_gt)
  }
  closeAllConnections()
}

getBadWeights <- function(x) {
  getMocks() %>%
    distinct(draft_year, date, draft_weight) %>%
    count(draft_year, date, sort = TRUE) %>%
    filter(n > 1) -> wt
  if (nrow(wt) == 0) {
    message("Dates and weights aligned.")
  } else {
    return(wt)
  }
}

getWithinDupes <- function(x = 2024){
  getMocks() %>%
    filter(draft_year == x, !is.na(round)) %>%
    select(-draft_weight) %>%
    left_join(
      getPFF_GTM() %>%
        select(-pff_headshot, -draft_year) %>%
        distinct,
      by = c("name", "position", "school")
    ) %>%
    select(1:8,
           13,
           9:12) %>%
    add_count(draft_year, site, date, pff_id,
              name = "num_year_site_date_pff_id") %>%
    filter(!is.na(pff_id), num_year_site_date_pff_id != 1) %>%
    arrange(desc(date), site, pff_id, name)
}

getPlayerCard <- function(player,
                          save = TRUE,
                          path = 'C:/Users/benjr/Desktop/',
                          stock = TRUE,
                          scl = 'linear',
                          add_logo = TRUE) {
  if (stock == TRUE) {
    getEDP() %>%
      filter(type == "All", name %in% player) %>%
      left_join(getPFF_GTM(),
                by = c("draft_year", "name", "position", "school")) %>%
      left_join(getESPN_GTM(),
                by = c("draft_year", "name", "position", "school")) %>%
      rowwise %>%
      mutate(
        pff_test = ifelse(
          is.na(pff_id),
          404,
          GET(pff_headshot)$status_code %>% as.double
        ),
        pff_test = ifelse(pff_test == 404, 404,
                          ifelse(
                            pff_test == 200 &
                              (nrow(
                                pff_headshot %>% image_read %>% image_info
                              ) == 0), 404,
                            pff_test
                          )),
        cfb_test = ifelse(
          is.na(espn_id),
          404,
          GET(cfb_headshot)$status_code %>% as.double
        ),
        cfb_test = ifelse(cfb_test == 404, 404,
                          ifelse(
                            cfb_test == 200 &
                              (nrow(
                                cfb_headshot %>% image_read %>% image_info
                              ) == 0), 404,
                            cfb_test
                          )),
        nfl_test = ifelse(
          is.na(espn_id),
          404,
          GET(nfl_headshot)$status_code %>% as.double
        ),
        nfl_test = ifelse(nfl_test == 404, 404,
                          ifelse(
                            nfl_test == 200 &
                              (nrow(
                                nfl_headshot %>% image_read %>% image_info
                              ) == 0), 404,
                            nfl_test
                          )),
        pro_flag = case_when(year(Sys.Date()) %in% c(draft_year, draft_year - 1) ~ 'College',
                             TRUE ~ 'NFL'), 
        headshot_url = case_when(
          pro_flag == 'College' &
            cfb_test == 200 ~ cfb_headshot,
          pro_flag == 'College' &
            pff_test == 200 ~ pff_headshot,
          pro_flag == 'College' &
            nfl_test == 200 ~ nfl_headshot,
          pro_flag == 'NFL' &
            nfl_test == 200 ~ nfl_headshot,
          pro_flag == 'NFL' &
            pff_test == 200 ~ pff_headshot,
          pro_flag == 'NFL' &
            cfb_test == 200 ~ cfb_headshot,
          TRUE ~ 'https://static.www.nfl.com/image/private/t_player_profile_landscape_2x/f_auto/league/slvzehvr2gajjwng5uj9'
        )
      ) %>%
      left_join(logo_df %>% select(-type),
                by = 'school',) %>% ungroup -> edp
    
    stockChart(x = player, scale = scl) +
      labs(
        title = paste(player, "| Draft Stock"),
        caption = sub("Benjamin", "Ben", gtm_caption())
      ) -> p1
    
    if ((Sys.Date() >= (
      getMocks() %>%
      filter(draft_year == edp$draft_year) %>%
      distinct(draft_date) %>%
      pull
    ))) {
      p1$labels$subtitle <- sub(" [|].*", "", p1$labels$subtitle)
    } else {
      p1$labels$subtitle <- NULL
    }
    
  } else {
    getEDP() %>%
      filter(type == "All", name %in% player) %>%
      select(-edp,-edp_rank,-pos_rank,-type) %>%
      left_join(
        getPredictions() %>%
          group_by(draft_year, position) %>%
          mutate(pos_rank = paste0(position, dense_rank(avg_rank))) %>%
          ungroup %>%
          filter(name %in% player) %>%
          select(
            draft_year,
            name,
            position,
            school,
            edp = avg,
            edp_rank = avg_rank,
            pos_rank
          ),
        by = c('draft_year', 'name', 'position', 'school')
      ) %>%
      left_join(getPFF_GTM(),
                by = c("draft_year", "name", "position", "school")) %>%
      left_join(getESPN_GTM(),
                by = c("draft_year", "name", "position", "school")) %>%
      rowwise %>%
      mutate(
        pff_test = ifelse(
          is.na(pff_id),
          404,
          GET(pff_headshot)$status_code %>% as.double
        ),
        pff_test = ifelse(pff_test == 404, 404,
                          ifelse(
                            pff_test == 200 &
                              (nrow(
                                pff_headshot %>% image_read %>% image_info
                              ) == 0), 404,
                            pff_test
                          )),
        cfb_test = ifelse(
          is.na(espn_id),
          404,
          GET(cfb_headshot)$status_code %>% as.double
        ),
        cfb_test = ifelse(cfb_test == 404, 404,
                          ifelse(
                            cfb_test == 200 &
                              (nrow(
                                cfb_headshot %>% image_read %>% image_info
                              ) == 0), 404,
                            cfb_test
                          )),
        nfl_test = ifelse(
          is.na(espn_id),
          404,
          GET(nfl_headshot)$status_code %>% as.double
        ),
        nfl_test = ifelse(nfl_test == 404, 404,
                          ifelse(
                            nfl_test == 200 &
                              (nrow(
                                nfl_headshot %>% image_read %>% image_info
                              ) == 0), 404,
                            nfl_test
                          )),
        pro_flag = case_when(year(Sys.Date()) %in% c(draft_year, draft_year - 1) ~ 'College',
                             TRUE ~ 'NFL'),
        headshot_url = case_when(
          pro_flag == 'College' &
            cfb_test == 200 ~ cfb_headshot,
          pro_flag == 'College' &
            pff_test == 200 ~ pff_headshot,
          pro_flag == 'College' &
            nfl_test == 200 ~ nfl_headshot,
          pro_flag == 'NFL' &
            nfl_test == 200 ~ nfl_headshot,
          pro_flag == 'NFL' &
            pff_test == 200 ~ pff_headshot,
          pro_flag == 'NFL' &
            cfb_test == 200 ~ cfb_headshot,
          TRUE ~ 'https://static.www.nfl.com/image/private/t_player_profile_landscape_2x/f_auto/league/slvzehvr2gajjwng5uj9'
        )
      ) %>%
      left_join(logo_df,
                by = 'school',) %>% ungroup -> edp
    
    if ((Sys.Date() >= (
      getMocks() %>%
      filter(draft_year %in% edp$draft_year) %>%
      distinct(draft_date) %>%
      pull
    )) & ((getActual() %>%
           filter(name == player) %>%
           nrow) == 1)) {
      getActual() %>%
        filter(name == player) %>%
        summarize(
          paste0(
            draft_team,
            ": Rd. ",
            draft_round,
            ", Pick ",
            draft_pick,
            " (",
            draft_rank,
            ")"
          )
        ) %>%
        pull -> table_sub
    } else if ((Sys.Date() >= (
      getMocks() %>%
      filter(draft_year %in% edp$draft_year) %>%
      distinct(draft_date) %>%
      pull
    )) & ((getActual() %>%
           filter(name == player) %>%
           nrow) == 0)) {
      table_sub = 'Undrafted'
    } else {
      table_sub = NULL
    }
    
    probTable(nm = player,
              gt = TRUE,
              img = '') %>%
      tab_header(title = html(
        paste0(
          '<div>
            <h4 style="text-align: center;">',
          player,
          ' | Draft Probability</h4>
            <h5 style="text-align: center;"><span style="font-weight: normal;">',
          table_sub,
          '</span></h5>
            </div>'
        )
      )) %>%
      as_ggplot -> p1
    
    # web_image(url = ifelse(
    #   length(getActual() %>%
    #            filter(name %in% player) %>%
    #            pull(draft_team)) == 1,
    #   teams_colors_logos %>%
    #     mutate(
    #       team_name = ifelse(
    #         team_name == 'Washington Football Team',
    #         'Washington Commanders',
    #         team_name
    #       )
    #     ) %>%
    #     filter(
    #       team_name == getActual() %>%
    #         filter(name %in% player) %>%
    #         pull(draft_team)
    #     ) %>%
    #     pull(team_logo_espn),
    #   logo_ref %>%
    #     filter(school %in% edp$school) %>%
    #     pull(logo)
    # ), height = px(80))
    
    # probChart(x = player)  +
    #   labs(
    #     title = paste0(edp$draft_year, ' Draft Class | Mock Draft Stock Chart'),
    #     caption = paste0(
    #       "Chart: Ben Robinson (@benj_robinson) | ",
    #       "Data: 'Grinding the Mocks', ",
    #       format(Sys.Date(), "%Y"),
    #       "."
    #     )
    #   ) -> p1
  }
  
  edp$headshot_url %>%
    image_read %>%
    image_ggplot -> p3
  
  edp %>%
    mutate(
      mock_share = paste0(percent(n / n_total, accuracy = .1),
                          " (",
                          comma(n),
                          ")"),
      edp_rank = ifelse(edp_rank == (max_pick + 1),
                        'Undrafted',
                        edp_rank),
      latest_mock = format(latest_date, '%b. %d, %Y')
    ) %>%
    select(name,
           position,
           school,
           draft_year,
           mock_share,
           latest_mock,
           edp,
           edp_rank,
           position_rank = pos_rank) %>%
    gather(key, value) %>%
    mutate(
      key = tools::toTitleCase(gsub("_", " ", key)),
      key = case_when(
        key == 'Edp' ~ 'EDP',
        key == 'Edp Rank' ~ 'EDP Rank',
        key == 'Position Rank' ~ 'Pos. Rank',
        TRUE ~ key
      )
      # key = paste0(key, ":")
    ) %>%
    gt %>%
    # tab_header(title = "", subtitle = md("**Mock Draft Profile**")) %>%
    tab_options(
      table.width = px(1000),
      heading.padding = px(0),
      table.font.names = 'Tahoma',
      table.font.size = 70,
      column_labels.hidden = TRUE
    ) %>%
    text_transform(
      locations = cells_body(columns = value, rows = 3),
      fn = function(x) {
        ifelse(
          stock == TRUE,
          glue::glue(
            "<div style=\"display: inline-block;\">
                                <img src=\"{edp$logo}\" style=\"height:100px;\">
                              </div>
                              <div style=\"display: inline-block;\">
                                <div style='line-height:100px'>
                                  <span style='font-weight:bold;font-variant:small-caps;color:black'>
            {sub('Northern ', 'N. ', x) %>%
  sub('North ', 'N. ', .) %>%
  sub('Central ', 'C. ', .) %>%
  sub('Southern ', 'S. ', .) %>%
  sub('Southeastern ', 'S.E. ', .) %>%
  sub('South ', 'S. ', .) %>%
  sub('Western ', 'W. ', .) %>%
  sub('West ', 'W. ', .) %>%
  sub('Virginia ', 'Va. ', .) %>%
  sub('Eastern ', 'E. ', .) %>%
  sub('East ', 'E. ', .) %>%
  sub(' State', ' St.', .) %>%
  sub('Middle ', 'M. ', .) %>%
  sub('Mississippi ', 'Miss. ', .) %>%
  sub('Missouri ', 'Mo. ', .) %>%
  sub('College', 'Coll.', .) %>%
  sub('International', 'Int.', .) %>%
  sub('Washington ', 'Wash. ', .) %>%
  sub('Appalachian ', 'App. ', .) %>%
  sub('Fayetteville ', 'Fay. ', .) %>%
  sub('Coastal Carolina', 'Coastal Car.', .) %>%
  sub('Carolina ', 'Car. ', .) %>%
  sub('Sam Houston', 'Sam Hou.', .) %>%
  sub('Michigan ', 'Mich. ', .) %>%
  sub('Illinois ', 'Ill. ', .) %>%
  sub('Louisiana ', 'La. ', .) %>%
  sub(' Louisiana', ' La.', .) %>%
  sub(' Arkansas', ' Ark. ', .) %>%
  sub(' Atlantic', ' Atl. ', .) %>%
  sub(' Southern', ' South. ', .) %>%
  sub('Baptist', 'Bapt.', .) %>%
  sub('Ouachita', 'Ouach.', .) %>%
  sub('New Mexico ', 'NM ', .) %>%
  sub('Humboldt', 'Humb.', .) %>%
  sub('Georgia ', 'Ga. ', .) %>%
  ifelse(. == 'UW-Whitewater', 'UW-W', .) %>%
  ifelse(. == 'Northwestern', 'NW', .) %>%
  ifelse(. == 'Bowling Green', 'BGSU', .) %>%
  ifelse(. == 'Old Dominion', 'ODU', .) %>%
  ifelse(. == 'James Madison', 'JMU', .) %>%
  sub('St. Johns ', 'SJU ', .)}
                                  </span>
                                </div>
                                <div style='line-height:40px'>
                                  <span style ='font-weight:bold;color:{case_when(edp$color == '#000000' &
            edp$alt_color == '#ffffff' ~ edp$color,
          edp$color == '#000000' &
            edp$alt_color != '#ffffff' ~ edp$alt_color,
          TRUE ~ edp$color)}'>
            {case_when(
  edp$mascot == 'Commodores' ~ '',
  nchar(coalesce(edp$mascot, '')) >= 11 ~ '',
  TRUE ~ coalesce(edp$mascot, '')
)}
                                  </span>
                                </div>
                              </div>"
          ),
          glue::glue(
            "<div style=\"display: inline-block;\">
                                <img src=\"{edp$logo}\" style=\"height:100px;\">
                              </div>
                              <div style=\"display: inline-block;\">
                                <div style='line-height:100px'>
                                  <span style='font-weight:bold;font-variant:small-caps;color:black'>
            {sub('Northern ', 'N. ', x) %>%
  sub('North ', 'N. ', .) %>%
  sub('Central ', 'C. ', .) %>%
  sub('Southern ', 'S. ', .) %>%
  sub('Southeastern ', 'S.E. ', .) %>%
  sub('South ', 'S. ', .) %>%
  sub('Western ', 'W. ', .) %>%
  sub('West ', 'W. ', .) %>%
  sub('Virginia ', 'Va. ', .) %>%
  sub('Eastern ', 'E. ', .) %>%
  sub('East ', 'E. ', .) %>%
  sub(' State', ' St.', .) %>%
  sub('Middle ', 'M. ', .) %>%
  sub('Mississippi ', 'Miss. ', .) %>%
  sub('Missouri ', 'Mo. ', .) %>%
  sub('College', 'Coll.', .) %>%
  sub('International', 'Int.', .) %>%
  sub('Washington ', 'Wash. ', .) %>%
  sub('Appalachian ', 'App. ', .) %>%
  sub('Fayetteville ', 'Fay. ', .) %>%
  sub('Coastal Carolina', 'Coastal Car.', .) %>%
  sub('Carolina ', 'Car. ', .) %>%
  sub('Sam Houston', 'Sam Hou.', .) %>%
  sub('Michigan ', 'Mich. ', .) %>%
  sub('Illinois ', 'Ill. ', .) %>%
  sub('Louisiana ', 'La. ', .) %>%
  sub(' Louisiana', ' La.', .) %>%
  sub(' Arkansas', ' Ark. ', .) %>%
  sub(' Atlantic', ' Atl. ', .) %>%
  sub(' Southern', ' South. ', .) %>%
  sub('Baptist', 'Bapt.', .) %>%
  sub('Ouachita', 'Ouach.', .) %>%
  sub('New Mexico ', 'NM ', .) %>%
  sub('Humboldt', 'Humb.', .) %>%
  sub('Georgia ', 'Ga. ', .) %>%
  ifelse(. == 'UW-Whitewater', 'UW-W', .) %>%
  ifelse(. == 'Northwestern', 'NW', .) %>%
  ifelse(. == 'Bowling Green', 'BGSU', .) %>%
  ifelse(. == 'James Madison', 'JMU', .) %>%
  ifelse(. == 'Old Dominion', 'ODU', .)  %>%
  sub('St. Johns ', 'SJU ', .)}
                                  </span>
                                </div>
                                <div style='line-height:40px'>
                                  <span style ='font-weight:bold;color:{case_when(edp$color == '#000000' &
            edp$alt_color == '#ffffff' ~ edp$color,
          edp$color == '#000000' &
            edp$alt_color != '#ffffff' ~ edp$alt_color,
          TRUE ~ edp$color)}'>
            {case_when(
  edp$mascot == 'Commodores' ~ '',
  nchar(coalesce(edp$mascot, '')) >= 11 ~ '',
  TRUE ~ coalesce(edp$mascot, '')
)}
                                  </span>
                                </div>
                              </div>"
          )
        )
      }
    ) %>%
    tab_style(style = cell_text(weight = 'bold'),
              locations = cells_body(columns = 1)) %>%
    # tab_style(style = cell_text(weight = 'bold'),
    #           locations = cells_body(columns = 2, rows = 1)) %>%
    # fmt(columns = 2,
    #     rows = 9,
    #     fns = html) %>%
    # fmt(
    #   columns = 2,
    #   rows = 3,
    #   fns = function(x) {
    #     paste0(
    #       web_image(url = x, height = 75)
  #       # , " (",
  #       # edp$abbreviation,
  #       # ")"
  #     )
  #   }
  # ) %>%
  # fmt(columns = 2, rows = 4, function(x) {
  #   percent(as.numeric(x), accuracy = .1)
  # }) %>%
  fmt(columns = 2, rows = 7, fns = function(x) {
    round(as.numeric(x), 1)
  }) %>%
    as_ggplot -> p4
  
  if (save == FALSE) {
    (p3 / p4) - (p1) + plot_layout(widths = c(1, 2))
  } else {
    (p3 / p4) - (p1) + plot_layout(widths = c(1, 2))
    
    # ggsave(
    #   paste0(
    #     path,
    #     # edp$edp_rank[edp$name == player],
    #     # "_",
    #     gsub(" ", "_", paste0(player, collapse = "_")),
    #     "_CARD.PNG"
    #   ),
    #   width = 9,
    #   height = 7,
    #   units = 'in',
    #   dpi = 'retina'
    # )
    
    ggsave(
      paste0(
        path,
        # edp$edp_rank[edp$name == player],
        # "_",
        gsub(" ", "_", paste0(player, collapse = "_")),
        ifelse(stock == TRUE, "_STOCK", "_PROB"),
        "_CARD.PNG"
      ),
      width = ifelse(stock == TRUE, 9, 7.5),
      height = 7,
      units = 'in',
      dpi = 'retina'
    )
    
    if (add_logo == TRUE) {
      add_logo(
        plot_path = paste0(
          path,
          # edp$edp_rank[edp$name == player],
          # "_",
          gsub(" ", "_", paste0(player, collapse = "_")),
          ifelse(stock == TRUE, "_STOCK", "_PROB"),
          "_CARD.PNG"
        ),
        save = TRUE,
        logo_scale = ifelse(stock == TRUE, 4.5, 3)
      )
    }
    
    image_read(paste0(
      path,
      # edp$edp_rank[edp$name == player],
      # "_",
      gsub(" ", "_", paste0(player, collapse = "_")),
      ifelse(stock == TRUE, "_STOCK", "_PROB"),
      "_CARD.PNG"
    )) %>%
      image_trim %>%
      image_write(paste0(
        path,
        # edp$edp_rank[edp$name == player],
        # "_",
        gsub(" ", "_", paste0(player, collapse = "_")),
        ifelse(stock == TRUE, "_STOCK", "_PROB"),
        "_CARD.PNG"
      ))
    
    closeAllConnections()
  }
}

getOdds <- function() {
  read_rds("../GrindingtheMocks-data/data/Draft_Odds.rds")
}

getOdds_GTM <- function() {
  read_rds("../GrindingtheMocks-data/data/Draft_Odds_GTM.rds")
}

# getDK_Odds <- function() {
#   "https://sportsbook.draftkings.com//sites/US-SB/api/v4/eventgroups/88670561/categories/669/subcategories/6444?format=json" %>%
#     jsonlite::fromJSON(url) %>%
#     pluck(
#       "eventGroup",
#       "offerCategories",
#       1,
#       "offerSubcategoryDescriptors",
#       2,
#       "offerSubcategory",
#       "offers"
#     ) %>%
#     bind_rows() %>%
#     select(player = label, outcomes) %>%
#     unnest_wider(outcomes) %>%
#     mutate(odds = as.numeric(oddsAmerican),
#            under = ifelse(stringr::str_detect(label, "Under"), 1, 0)) %>%
#     select(player, pick = label, odds, under) %>%
#     mutate(
#       player = stringr::str_remove(player, " Draft Position"),
#       pick = stringr::str_remove(pick, "(Under )|(Over )"),
#       pick = as.numeric(pick),
#       pct = ifelse(odds > 0,
#                    100 / (odds + 100),
#                    abs(odds) / (abs(odds) + 100))
#     ) -> dk
#   
#   # remove vig using power method: https://www.researchgate.net/publication/326510904_Adjusting_Bookmaker's_Odds_to_Allow_for_Overround
#   
#   walk(1:10, ~ {
#     dk <<- dk %>%
#       group_by(player) %>%
#       mutate(tot_pct = sum(pct)) %>%
#       mutate(k = log(2) / log(2 / tot_pct),
#              pct = pct ^ k) %>%
#       select(-tot_pct, -k) %>%
#       ungroup()
#   })
#   
#   dk <- dk %>%
#     filter(under == 1) %>%
#     arrange(pick) %>%
#     select(-under, -odds, pick_dk = pick)
#   
#   return(dk)
# }

getBadSiteType <- function() {
  getMocks() %>%
    distinct(draft_year, site, type) %>%
    mutate(
      site_name = gsub("-.*", "", site) %>% str_squish,
      site_author = gsub(".*-", "", site) %>% str_squish
    ) -> ste
  
  ste %>%
    semi_join(
      ste %>%
        distinct(site_author, type) %>%
        count(site_author, sort = TRUE) %>%
        filter(n > 1),
      by = c('site_author')
    ) %>%
    arrange(site_author, type) -> ste
  
  if (nrow(ste) == 0) {
    message("No values returned")
  } else {
    return(ste)
  }
}

getRandomCards <- function(num = 5,
                           year = 'All',
                           stk = TRUE,
                           scale = 'linear') {
  if (year == 'All') {
    sample_n(tbl = getEDP() %>% filter(type == 'All'),
             size = num)$name -> tmp
    walk(tmp, function(x) {
      print(x)
      if (stk == TRUE) {
        getPlayerCard(x, stock = TRUE, scl = scale)
      } else {
        getPlayerCard(x, stock = FALSE)
      }
    })
  } else {
    sample_n(tbl = getEDP() %>% filter(type == 'All', draft_year == year),
             size = num)$name -> tmp
    walk(tmp, function(x) {
      print(x)
      if (stk == TRUE) {
        getPlayerCard(x, scl = scale)
      } else {
        getPlayerCard(x, stock = FALSE)
      }
    })
  }
}

getAllNeeds <- function(draft_year = getMaxDraftYear(),
                        type = 'name',
                        draft_type = 'All') {
  map(na.omit(unique(getActual()$draft_team)), function(x) {
    getTeamCharts(
      team_name = x,
      var_type = type,
      year = draft_year,
      mock_type = draft_type
    )
  })
}

getPositionTopCard <- function(year = 2023,
                               pos = 'QB',
                               save = TRUE,
                               path = 'C:/Users/benjr/Desktop/',
                               scl = 'linear',
                               add_logo = TRUE) {
  read.csv("../gtm_dashboard/data/GTM_Data.csv") %>%
    select(-max_date) %>%
    inner_join(
      read.csv("../gtm_dashboard/data/Top_5_Positional.csv") %>%
        select(draft_year, position, max_date),
      by = c('draft_year', 'position')
    ) %>%
    filter(draft_year == year,
           position == pos) %>%
    filter(dense_rank(edp_rank) <= 5) %>%
    select(name, max_date) -> tmp
  
  stockChart(x = tmp$name,
             scale = scl) +
    theme(legend.position = 'none') +
    labs(title = paste0(year, " NFL Draft | Top ", nrow(tmp), " ", pos, "s"),
         subtitle = paste('Data as of', tmp$max_date)) -> p1
  
  if (save == FALSE) {
    p1
  } else {
    ggsave(
      p1,
      filename = paste0(path,
                        year,
                        "_TOP_5_",
                        pos,
                        ".PNG"),
      height = 8,
      width = 8,
      units = 'in',
      dpi = 'retina'
    )
    
    if (add_logo == TRUE) {
      add_logo(
        plot_path = paste0(path,
                           year,
                           "_TOP_5_",
                           pos,
                           ".PNG"),
        save = TRUE,
        logo_scale = 5
      )
    }
    
    image_read(path = paste0(path,
                             year,
                             "_TOP_5_",
                             pos,
                             ".PNG")) %>%
      # image_trim %>%
      image_write(path = paste0(path,
                                year,
                                "_TOP_5_",
                                pos,
                                ".PNG"))
    
    closeAllConnections()
    
  }
}

getAllPositionTopCards <- function(year = 'All') {
  if (year == 'All') {
    read.csv("../gtm_dashboard/data/GTM_Data.csv") %>%
      count(draft_year, position) %>%
      filter(n > 1) %>%
      select(-n) -> tmp
    
    walk2(tmp$draft_year, tmp$position, function(x, y) {
      print(paste(x, y, sep = " | "))
      getPositionTopCard(
        year = x,
        pos = y,
        path = paste0(
          "G:/My Drive/GTM_Draft_Cards/Position_Top/"
        )
      )
    })
    
  } else {
    read.csv("../gtm_dashboard/data/GTM_Data.csv") %>%
      filter(draft_year == year) %>%
      count(draft_year, position) %>%
      filter(n > 1) -> tmp
    
    walk2(tmp$draft_year, tmp$position, function(x, y) {
      print(paste(x, y, sep = " | "))
      getPositionTopCard(
        year = x,
        pos = y,
        path = paste0(
          "G:/My Drive/GTM_Draft_Cards/Position_Top/"
        )
      )
    })
  }
}

getAllPlayerCards <- function(year = getMaxDraftYear(), stk = TRUE) {
  if (year == 'All') {
    getEDP() %>%
      filter(type == 'All') %>%
      distinct(draft_year, name) -> tmp
    
    walk(tmp$name, function(x) {
      print(paste0(x, " (", tmp[tmp$name == x, ]$draft_year, ")"))
      if (stk == TRUE) {
        getPlayerCard(
          player = x,
          path = paste0(
            "G:/My Drive/GTM_Draft_Cards/Stock/",
            unique(tmp[tmp$name == x,]$draft_year),
            "/"
          )
        )
        # suppressMessages(file.copy(
        #   from = paste0(
        #     "C:/Users/benjr/Desktop/",
        #     dir("C:/Users/benjr/Desktop/")[grepl(gsub(" ", "_", x), dir("C:/Users/benjr/Desktop/"), fixed = TRUE)]
        #   ),
        #   to = paste0(
        #     "G:/My Drive/GTM_Draft_Cards/Stock/",
        #     unique(tmp[tmp$name == x, ]$draft_year),
        #     "/",
        #     dir("G:/My Drive/GTM_Draft_Cards/Stock/")[grepl(gsub(" ", "_", x),                                                  dir("G:/My Drive/GTM_Draft_Cards/Stock/"), fixed = TRUE)]
        #   ),
        #   overwrite = TRUE
        # ))
        # suppressMessages(file.remove(paste0(
        #   "C:/Users/benjr/Desktop/",
        #   dir("C:/Users/benjr/Desktop/")[grepl(gsub(" ", "_", x), dir("C:/Users/benjr/Desktop/"), fixed = TRUE)]
        # )))
      } else {
        getPlayerCard(
          x,
          stock = FALSE,
          path = paste0(
            "G:/My Drive/GTM_Draft_Cards/Probability/",
            unique(tmp[tmp$name == x,]$draft_year),
            "/"
          )
        )
        # file.copy(
        #   from = paste0(
        #     "C:/Users/benjr/Desktop/",
        #     dir("C:/Users/benjr/Desktop/")[grepl(gsub(" ", "_", x), dir("C:/Users/benjr/Desktop/"), fixed = TRUE)]
        #   ),
        #   to = paste0(
        #     "G:/My Drive/GTM_Draft_Cards/Probability/",
        #     unique(tmp[tmp$name == x, ]$draft_year),
        #     "/",
        #     dir("G:/My Drive/GTM_Draft_Cards/Probability/")[grepl(gsub(" ", "_", x),                                     dir("G:/My Drive/GTM_Draft_Cards/Probability/"), fixed = TRUE)]
        #   ),
        #   overwrite = TRUE
        # )
        # file.remove(paste0("C:/Users/benjr/Desktop/",
        #                    dir("C:/Users/benjr/Desktop/")[grepl(gsub(" ", "_", x), dir("C:/Users/benjr/Desktop/"), fixed = TRUE)]))
      }
    })
  } else {
    getEDP() %>%
      filter(type == 'All', draft_year == year) %>%
      pull(name) -> tmp
    
    walk(tmp, function(x) {
      print(paste0(x, " (", year, ")"))
      if (stk == TRUE) {
        getPlayerCard(
          player = x,
          path = paste0(
            "G:/My Drive/GTM_Draft_Cards/Stock/",
            year,
            "/"
          )
        )
        # suppressMessages(file.copy(
        #   from = paste0(
        #     "C:/Users/benjr/Desktop/",
        #     dir("C:/Users/benjr/Desktop/")[grepl(gsub(" ", "_", x), dir("C:/Users/benjr/Desktop/"), fixed = TRUE)]
        #   ),
        #   to = paste0(
        #     "G:/My Drive/GTM_Draft_Cards/Stock/",
        #     year,
        #     "/",
        #     dir("G:/My Drive/GTM_Draft_Cards/Stock/")[grepl(gsub(" ", "_", x),
        #     dir("G:/My Drive/GTM_Draft_Cards/Stock/"), fixed = TRUE)]
        #   ),
        #   overwrite = TRUE
        # ))
        # suppressMessages(file.remove(paste0(
        #   "C:/Users/benjr/Desktop/",
        #   dir("C:/Users/benjr/Desktop/")[grepl(gsub(" ", "_", x), dir("C:/Users/benjr/Desktop/"), fixed = TRUE)]
        # )))
      } else {
        getPlayerCard(
          player = x,
          stock = FALSE,
          path = paste0(
            "G:/My Drive/GTM_Draft_Cards/Probability/",
            year,
            "/"
          )
        )
        # file.copy(
        #   from = paste0(
        #     "C:/Users/benjr/Desktop/",
        #     dir("C:/Users/benjr/Desktop/")[grepl(gsub(" ", "_", x), dir("C:/Users/benjr/Desktop/"), fixed = TRUE)]
        #   ),
        #   to = paste0(
        #     "G:/My Drive/GTM_Draft_Cards/Probability/",
        #     year,
        #     "/",
        #     dir("G:/My Drive/GTM_Draft_Cards/Probability/")[grepl(gsub(" ", "_", x),
        #                                                                dir("G:/My Drive/GTM_Draft_Cards/Probability/"), fixed = TRUE)]
        #   ),
        #   overwrite = TRUE
        # )
        # file.remove(paste0(
        #   "C:/Users/benjr/Desktop/",
        #   dir("C:/Users/benjr/Desktop/")[grepl(gsub(" ", "_", x), dir("C:/Users/benjr/Desktop/"), fixed = TRUE)]
        # ))
      }
    })
  }
}

# getSpotracRookieContracts <- function() {
#   map_dfr(2020:(getActual() %>%
#                   filter(!is.na(name)) %>%
#                   pull(draft_year) %>%
#                   max),
#           function(x) {
#             paste0('https://www.spotrac.com/nfl/draft/', x, '/') %>%
#               read_html %>%
#               html_nodes('td') %>%
#               html_text %>%
#               str_squish %>%
#               detect_str("[$][0-9]") %>%
#               detect_chr(20) -> tmp
#
#             map_dfr(seq(1, length(tmp), 3), function(x) {
#               data.frame(
#                 contract_total_value = tmp[x],
#                 contract_signing_bonus = tmp[x + 1],
#                 contract_draft_year_cap = tmp[x + 2]
#               )
#             }) %>%
#               mutate(draft_year = x,
#                      draft_pick = row_number()) %>%
#               left_join(
#                 getActual() %>%
#                   filter(draft_year == x) %>%
#                   select(-draft_rank),
#                 by = c('draft_year', 'draft_pick')
#               )
#           }) %>%
#     select(
#       draft_year,
#       name,
#       position,
#       school,
#       draft_team,
#       draft_round,
#       draft_pick,
#       contract_total_value,
#       contract_signing_bonus,
#       contract_draft_year_cap
#     ) %>%
#     mutate(across(contains("contract"), ~ as.numeric(gsub("[\\$,]", "", .)))) %>%
#     tibble -> dat
#   return(dat)
# }

getTradeCompDiff <- function(x1, x2) {
  load_contracts() %>%
    filter(year_signed == draft_year) %>%
    filter(draft_year >= 2018) %>%
    filter(draft_overall %in% c(x1, x2)) %>%
    select(
      draft_year,
      draft_round,
      draft_pick = draft_overall,
      years,
      value,
      apy,
      guaranteed,
      apy_cap_pct,
      inflated_value,
      inflated_apy,
      inflated_guaranteed
    ) %>%
    left_join(
      getActual() %>%
        select(-draft_rank),
      by = c('draft_year', 'draft_pick', 'draft_round')
    ) %>%
    select(
      draft_year,
      draft_round,
      draft_pick,
      draft_team,
      name,
      position,
      school,
      years,
      value,
      apy,
      guaranteed,
      apy_cap_pct,
      contains('inflated')
    ) %>%
    group_by(draft_pick) %>%
    summarize(across(years:inflated_guaranteed, ~ mean(.))) %>%
    mutate(pick = draft_pick) %>%
    gather(key, value,-pick) %>%
    spread(pick, value) %>%
    setNames(c('key', 'pick1', 'pick2')) %>%
    mutate(diff = abs(pick1 - pick2))
}

getClassScatter <- function(draft_year = 'All',
                            team = 'All',
                            draft_type = 'All',
                            edp = TRUE,
                            log = TRUE) {
  if (edp == TRUE) {
    getDCOE_Players(mock_type = draft_type,
                    edp = TRUE,
                    year = draft_year) %>%
      left_join(
        team_xwalk %>%
          rename(draft_team = team, team_abbr = value) %>%
          filter(nchar(team_abbr) < 5) %>%
          inner_join(
            team_abbr_mapping %>%
              unname %>%
              unique %>%
              .[!grepl("AFC|NFC", .)] %>%
              as.data.frame %>%
              setNames('team_abbr'),
            by = 'team_abbr'
          ),
        by = 'draft_team'
      ) %>% ungroup -> tmp
  } else {
    getDCOE_Players(mock_type = draft_type,
                    edp = FALSE,
                    year = draft_year) %>%
      left_join(
        team_xwalk %>%
          rename(draft_team = team, team_abbr = value) %>%
          filter(nchar(team_abbr) < 5) %>%
          inner_join(
            team_abbr_mapping %>%
              unname %>%
              unique %>%
              .[!grepl("AFC|NFC", .)] %>%
              as.data.frame %>%
              setNames('team_abbr'),
            by = 'team_abbr'
          ),
        by = 'draft_team'
      ) %>% ungroup -> tmp
  }
  
  brks = c(
    1,
    32,
    64,
    getActual() %>%
      filter(draft_year %in% unique(tmp$draft_year), draft_round == 3) %>%
      pull(draft_pick) %>%
      max,
    getActual() %>%
      filter(draft_year %in% unique(tmp$draft_year), draft_round == 4) %>%
      pull(draft_pick) %>%
      max,
    getActual() %>%
      filter(draft_year %in% unique(tmp$draft_year), draft_round == 5) %>%
      pull(draft_pick) %>%
      max,
    getActual() %>%
      filter(draft_year %in% unique(tmp$draft_year), draft_round == 6) %>%
      pull(draft_pick) %>%
      max,
    getActual() %>%
      filter(draft_year %in% unique(tmp$draft_year), draft_round == 3) %>%
      pull(draft_pick) %>%
      max,
    getActual() %>%
      filter(draft_year %in% unique(tmp$draft_year), draft_round == 4) %>%
      pull(draft_pick) %>%
      max,
    getActual() %>%
      filter(draft_year %in% unique(tmp$draft_year), draft_round == 5) %>%
      pull(draft_pick) %>%
      max,
    getActual() %>%
      filter(draft_year %in% unique(tmp$draft_year), draft_round == 7) %>%
      pull(draft_pick) %>%
      max
  )
  
  lims = c((
    getActual() %>%
      filter(draft_year %in% unique(tmp$draft_year), draft_round == 7) %>%
      pull(draft_pick) %>%
      max
  ) + 1,
  1)
  
  if (log == TRUE) {
    tmp %>%
      filter(!is.na(draft_team)) %>%
      ggplot(aes(
        y = edp_rank,
        x = draft_pick,
        fill = team_abbr,
        color = team_abbr
      )) +
      geom_abline(
        slope = -1,
        intercept = 0,
        linetype = 3,
        linewidth = 1
      ) +
      scale_x_log10(limits = sort(lims),
                    breaks = brks) +
      scale_y_continuous(limits = lims,
                         breaks = brks,
                         trans = reverselog_trans(10)) +
      scale_color_nfl(type = 'primary') +
      scale_fill_nfl(type = 'secondary') +
      geom_point(shape = 21,
                 size = 4) +
      annotate(
        geom = "text",
        x = 6,
        y = 32,
        label = "Negative DCOE",
        color = 'dodgerblue',
        fontface = "bold",
        size = 5
      ) +
      annotate(
        geom = "text",
        x = 48,
        y = 6,
        label = "Positive DCOE",
        color = astro_orange(),
        fontface = "bold",
        size = 5
      ) +
      theme_gtm() +
      theme(
        legend.position = "none",
        legend.title = element_blank(),
        text = element_text(family = "Tahoma"),
        plot.subtitle = element_text(hjust = 0.5),
        axis.text.x = element_text(angle = 45, vjust = .5),
        axis.text.y = element_text(angle = 45, hjust = .5)
      ) +
      labs(
        y = "Expected Draft Rank (Logged)",
        x = "Draft Position (Logged)",
        title = paste(draft_year, "Draft Capital Over Expected Summary"),
        subtitle = paste(team, "Draft Capital Usage"),
        caption = gtm_caption()
      ) -> chrt
  } else {
    tmp %>%
      filter(!is.na(draft_team)) %>%
      ggplot(aes(
        y = edp_rank,
        x = draft_pick,
        fill = team_abbr,
        color = team_abbr
      )) +
      geom_abline(
        slope = -1,
        intercept = 0,
        linetype = 3,
        linewidth = 1
      ) +
      scale_x_continuous(limits = sort(lims),
                         breaks = brks) +
      scale_y_reverse(limits = lims,
                      breaks = brks) +
      scale_color_nfl(type = 'primary') +
      scale_fill_nfl(type = 'secondary') +
      geom_point(shape = 21,
                 size = 4) +
      annotate(
        geom = "text",
        x = 64,
        y = 180,
        label = "Negative DCOE",
        color = 'dodgerblue',
        fontface = "bold",
        size = 5
      ) +
      annotate(
        geom = "text",
        x = 180,
        y = 32,
        label = "Positive DCOE",
        color = astro_orange(),
        fontface = "bold",
        size = 5
      ) +
      theme_gtm() +
      theme(
        legend.position = "none",
        legend.title = element_blank(),
        text = element_text(family = "Tahoma"),
        plot.subtitle = element_text(hjust = 0.5)
      ) +
      labs(
        y = "Expected Draft Rank",
        x = "Draft Position",
        title = paste(draft_year, "Draft Capital Over Expected Summary"),
        subtitle = paste(team, "Draft Capital Usage"),
        caption = gtm_caption()
      ) -> chrt
  }
  
  
  if (team == 'All') {
    return(chrt)
  } else {
    suppressWarnings(
      chrt +
        gghighlight(
          draft_team == team,
          use_direct_label = TRUE,
          use_group_by = FALSE,
          label_key = name,
          unhighlighted_params = list(alpha = .25),
          label_params = list(fill = NA, fontface = 'bold')
        )
    ) -> chrt
    
    return(chrt)
  }
  
}

getClassBar <- function(year = 'All',
                        team = 'Indianapolis Colts',
                        draft_type = 'All',
                        edp = TRUE,
                        log = TRUE) {
  if (edp == TRUE) {
    getDCOE_Players(mock_type = draft_type,
                    edp = TRUE,
                    year = 'All') %>%
      filter(draft_team == team) %>%
      {
        if (year == 'All') {
          filter(., TRUE)
        } else {
          filter(., draft_year == year)
        }
      } %>%
      left_join(
        team_xwalk %>%
          rename(draft_team = team, team_abbr = value) %>%
          filter(nchar(team_abbr) < 5) %>%
          inner_join(
            team_abbr_mapping %>%
              unname %>%
              unique %>%
              .[!grepl("AFC|NFC", .)] %>%
              as.data.frame %>%
              setNames('team_abbr'),
            by = 'team_abbr'
          ),
        by = 'draft_team'
      ) %>% ungroup -> tmp
  } else {
    getDCOE_Players(mock_type = draft_type,
                    edp = FALSE,
                    year = 'All') %>%
      filter(draft_team == team) %>%
      {
        if (year == 'All') {
          filter(., TRUE)
        } else {
          filter(., draft_year == year)
        }
      } %>%
      left_join(
        team_xwalk %>%
          rename(draft_team = team, team_abbr = value) %>%
          filter(nchar(team_abbr) < 5) %>%
          inner_join(
            team_abbr_mapping %>%
              unname %>%
              unique %>%
              .[!grepl("AFC|NFC", .)] %>%
              as.data.frame %>%
              setNames('team_abbr'),
            by = 'team_abbr'
          ),
        by = 'draft_team'
      ) %>% ungroup -> tmp
  }
  
  if (log == TRUE) {
    ggplot(data = tmp,
           aes(
             x = log_dcoe,
             y = fct_reorder(paste0(name, "\n", "(",percent(log_dcoe_type_perc, accuracy = .1), " ", dc_type, ")"), log_dcoe),
             fill = team_abbr,
             color = team_abbr
           )) +
      geom_bar(stat = 'identity') +
      scale_fill_nfl(type = 'primary') +
      scale_color_nfl(type = 'secondary') +
      theme_gtm() +
      labs(
        title = paste(year, "Draft Capital Over Expected Summary"),
        subtitle = paste(team, "Draft Capital Usage"),
        x = 'Draft Capital Over Expected (Pick-Adjusted)',
        y = NULL,
        caption = gtm_caption()
      ) +
      scale_y_discrete(
        labels = function(x){
          paste0(
            "**",
            sub("\n.*", "", x),
            "**",
            "<br>",
            sub(".*\n", "", x)
          ) 
        }
      ) +
      theme(axis.text.y = element_markdown())
    
  } else {
    ggplot(data = tmp,
           aes(
             x = dcoe,
             y = fct_reorder(paste0(name, "\n", "(",percent(dcoe_type_perc, accuracy = .1), " ", dc_type, ")"), dcoe),
             fill = team_abbr,
             color = team_abbr
           )) +
      geom_bar(stat = 'identity') +
      scale_fill_nfl(type = 'primary') +
      scale_color_nfl(type = 'secondary') +
      theme_gtm() +
      labs(
        title = paste(year, "Draft Capital Over Expected Summary"),
        subtitle = paste(team, "Draft Capital Usage"),
        x = 'Draft Capital Over Expected',
        y = NULL,
        caption = gtm_caption()
      ) +
      scale_y_discrete(
        labels = function(x){
          paste0(
            "**",
            sub("\n.*", "", x),
            "**",
            "<br>",
            sub(".*\n", "", x)
          ) 
        }
      ) +
      theme(axis.text.y = element_markdown())
  }
  
}

getClassCharts <- function(year = 2021,
                           team = 'Cincinnati Bengals',
                           stock = TRUE) {
  getActual() %>%
    filter(draft_year == year,
           draft_team == team) %>%
    inner_join(getEDP() %>%
                 filter(type == 'All'),
               by = c('draft_year', 'name', 'position', 'school')) %>%
    pull(name) %>%
    list -> tmp
  
  if (stock == TRUE) {
    pwalk(tmp, function(x) {
      print(x)
      getPlayerCard(player = x, stock = TRUE)
    })
  } else {
    pwalk(tmp, function(x) {
      print(x)
      getPlayerCard(player = x, stock = FALSE)
    })
  }
}

getDCOE_Type_Year <- function(x) {
  getDCOE_Players() %>%
    filter(dc_type != 'Direct Hit') %>%
    group_by(draft_year, dc_type) %>%
    summarize(DCOE = sum(dcoe),
              `Pick-Adjusted DCOE` = sum(log_dcoe)) %>%
    gather(key, value,-draft_year,-dc_type) %>%
    ggplot(aes(draft_year, value, color = dc_type)) +
    geom_line(linewidth = 1.5) +
    geom_point(size = 3, show.legend = FALSE) +
    # scale_color_colorblind() +
    scale_color_tableau('Color Blind') +
    theme_gtm() +
    theme(legend.position = 'top') +
    facet_wrap( ~ key, scales = 'free_y') +
    labs(
      color = "Draft Pick Type",
      x = "Draft Year",
      y = NULL,
      caption = gtm_caption(),
      title = "Draft Capital Over Expected by Pick Type"
    )
}

getDCOE_Type <- function() {
  getDCOE_Players() %>%
    filter(dc_type != 'Direct Hit') %>%
    group_by(dc_type) %>%
    summarize(DCOE = sum(dcoe),
              `Pick-Adjusted DCOE` = sum(log_dcoe)) %>%
    gather(key, value,-dc_type) %>%
    ggplot(aes(key, value, fill = dc_type)) +
    geom_bar(stat = 'identity') +
    scale_fill_tableau('Color Blind') +
    theme_gtm() +
    theme(legend.position = 'top') +
    facet_wrap( ~ key, scales = 'free') +
    labs(
      x = "Draft Year",
      y = NULL,
      caption = gtm_caption(),
      title = "Draft Capital Over Expected by Pick Type",
      fill = 'Pick Type'
    )
}

getDashboardData <- function() {
  getMocks() %>%
    summarize(format(max(date), "%B %d, %Y")) %>%
    pull -> md
  
  getEDP() %>%
    filter(type == 'All') %>%
    distinct(draft_year,
             name,
             position,
             school,
             n_total,
             n,
             edp,
             edp_rank,
             pos_rank) %>%
    mutate(
      n_share = n / n_total,
      n_total = NULL,
      elig = case_when(
        draft_year == max(draft_year) & edp_rank <= 50 ~ 1,
        draft_year == max(draft_year) & edp_rank > 50 ~ 0,
        draft_year != max(draft_year) & edp_rank <= 150 ~ 1,
        TRUE ~ 0
      )
    ) %>%
    filter(elig == 1) %>%
    left_join(
      getActual() %>%
        filter(!is.na(name)) %>%
        select(
          draft_year,
          name,
          position,
          school,
          draft_round,
          draft_pick,
          draft_team
        ),
      by = c('draft_year',
             'name',
             'position',
             'school')
    ) %>%
    left_join(
      suppressMessages(drive_find(pattern = "_CARD.PNG")) %>%
        select(-drive_resource) %>%
        mutate(
          type = ifelse(grepl("STOCK", name), "stock", 'prob'),
          name = sub("_STOCK.*", "", name),
          name = sub("_PROB.*", "", name),
          name = gsub("_", " ", name),
          id = paste0("https://drive.google.com/uc?id=",
                      id,
                      "&export=view/")
        ) %>%
        spread(type, id) %>%
        rename(prob_url = prob, stock_url = stock),
      by = 'name'
    ) %>%
    select(
      stock_url,
      prob_url,
      name,
      position,
      school,
      draft_team,
      draft_year,
      n_share,
      n,
      edp,
      edp_rank,
      pos_rank
    ) %>%
    mutate(max_date = md) %>%
    rowwise %>%
    mutate(edp_round = paste("Round", round_clean(edp_rank, draft_year))) %>%
    ungroup %>%
    arrange(draft_year, edp_rank) %>%
    write_csv("../gtm_dashboard/data/GTM_Data.csv")
  
  getActual() %>%
    select(draft_year,
           round = draft_round,
           pick = draft_pick) %>%
    write_csv("../gtm_dashboard/data/Draft_Order.csv")
  
  read_csv("../gtm_dashboard/data/GTM_Data.csv",
           show_col_types = FALSE) %>% 
    count(draft_year, position) %>%
    filter(n > 1) %>%
    select(-n) %>%
    left_join(
      suppressMessages(drive_find(pattern = "_TOP_5_")) %>%
        select(-drive_resource) %>%
        mutate(
          draft_year = as.numeric(substring(name, 1, 4)),
          position = sub(".*_TOP_5_", "", name) %>%
            sub(".PNG", "", .),
          name = NULL,
          id = paste0("https://drive.google.com/uc?id=",
                      id,
                      "&export=view/")
        ) %>%
        rename(top_5_url = id),
      by = c('draft_year', 'position')
    ) %>%
    left_join(
      data.frame(
        position = c(
          "QB",
          "RB",
          "FB",
          "WR",
          "TE",
          "OT",
          "G",
          "C",
          "EDGE",
          "DT",
          "LB",
          "CB",
          "S",
          "ST"
        )
      ) %>%
        mutate(wt = 1:n()),
      by = 'position'
    ) %>%
    left_join(
      getMocks() %>%
        group_by(draft_year) %>%
        summarize(max_date = format(max(date), "%B %d, %Y")),
      by = 'draft_year'
    ) %>%
    arrange(draft_year, wt) %>%
    write_csv("../gtm_dashboard/data/Top_5_Positional.csv")
  
}

getFunctionizerData <- function() {
  getMocks() %>%
    distinct(draft_year, name, pos = position, sch = school) %>%
    write_csv("../gtm_functionizer/data/Mock_Players.csv")
  
  getActual() %>%
    select(draft_year,
           round = draft_round,
           pick = draft_pick) %>%
    write_csv("../gtm_functionizer/data/Draft_XWalk.csv")
}

getBadPlayerID <- function(src = 'PFF') {
  if (src == 'PFF') {
  getMocks() %>%
    distinct(draft_year, name, position, school) %>%
    left_join(
      getPFF_GTM(),
      by = c('draft_year', 'name', 'position', 'school')
    ) %>%
    filter(is.na(pff_id)) %>%
    split(., .$draft_year) %>%
    lapply(., function(x) x %>% select(draft_year, name, position, school))
  } else if (src == 'ESPN') {
    getMocks() %>%
      distinct(draft_year, name, position, school) %>%
      left_join(
        getESPN_GTM(),
        by = c('draft_year', 'name', 'position', 'school')
      ) %>%
      filter(is.na(espn_id)) %>%
      split(., .$draft_year) %>%
      lapply(., function(x) x %>% select(draft_year, name, position, school))
  }
}

getGTM_AV <- function() {
  getEDP() %>%
    filter(type == 'All',
           draft_year != getUndraftable() %>% pull(draft_year) %>% max) %>%
    select(draft_year:school) %>%
    left_join(
      getPFF_GTM() %>%
        mutate(pff_id = as.character(pff_id)) %>%
        select(-pff_headshot),
      by = c('draft_year', 'name', 'position', 'school')
    ) %>%
    left_join(load_rosters(season = 2018:2022) %>%
                filter(!is.na(pff_id)) %>%
                distinct(pfr_id, pff_id),
              by = 'pff_id') -> tmp
  
  bind_rows(
    tmp %>%
      filter(!is.na(pfr_id)),
    tmp %>%
      filter(is.na(pfr_id)) %>%
      select(-pfr_id) %>%
      left_join(
        bind_rows(
          load_draft_picks(2018:2022) %>%
            distinct(
              pfr_id = pfr_player_id,
              name = pfr_player_name,
              position,
              school = college
            ),
          getAV_Roster() %>%
            distinct(pfr_id, name, position, school)
        ) %>%
          distinct %>%
          clean_draft(year = 'All') %>%
          mutate(
            pfr_id = case_when(
              name == 'Jaylen Watson' ~ 'WatsJa02',
              name == 'Connor McGovern' ~ 'McGoCo01',
              name == 'Josh Jones' ~ 'JoneJo07',
              name == 'A.J. Green' ~ 'GreeAJ00',
              name == 'Marquis Hayes' ~ 'HayeMa00',
              name == 'David Moore' ~ 'MoorDa04',
              TRUE ~ pfr_id
            )
          ) %>%
          distinct(pfr_id, name),
        by = 'name'
      )
  ) -> tmp
  
  tmp %>%
    left_join(getAV_Roster() %>%
                select(-name, -position, -school),
              by = 'pfr_id') %>%
    filter(season <= (draft_year + 3)) %>%
    group_by(draft_year,
             name,
             position,
             school) %>%
    summarize(
      seasons = n_distinct(season[!is.na(g)]),
      g = sum(g, na.rm = TRUE),
      gs = sum(gs, na.rm = TRUE),
      av = sum(av, na.rm = TRUE)
    ) %>%
    group_by(draft_year) %>%
    mutate(av_yr_rank = dense_rank(-av)) %>%
    ungroup
}

getMockScores <- function(x = 'All') {
  getDraftData(add_pick = TRUE) %>%
    {
      if (x == 'All') {
        filter(., TRUE)
      } else {
        filter(., draft_year %in% x)
      }
    } %>%
    anti_join(getUndraftable(),
              by = c('draft_year', 'name', 'position', 'school')) %>%
    filter(round == 1) %>%
    inner_join(
      getActual() %>%
        filter(
          !is.na(name)
        ),
      by = c('draft_year', 'name', 'position', 'school')
    ) %>%
    group_by(draft_year, site, type, date, url) %>%
    summarize(n = n_distinct(name),
              mse = mean(
                (draft_pick - pick)^2,
                na.rm = TRUE),
              log_mse = mean(
                (log10(draft_pick) - log10(pick))^2,
                na.rm = TRUE)) %>%
    ungroup
}

getRPMData_Picks <- function() {
  data.frame(
    stringsAsFactors = FALSE,
    draft_year = c(
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023,
      2023
    ),
    name = c(
      "Trenton Simpson",
      "Jaelyn Duncan",
      "Keeanu Benton",
      "Ricky Stromberg",
      "J.L. Skinner",
      "Clark Phillips",
      "Cedric Tillman",
      "Lukas Van Ness",
      "Marvin Mims",
      "Rashee Rice",
      "Cory Trice",
      "Tucker Kraft",
      "Joe Tippmann",
      "Jayson Ademilola",
      "Matthew Bergeron",
      "Blake Freeland",
      "A.T. Perry",
      "Tyree Wilson",
      "Darnell Wright",
      "Jalen Cropper",
      "Luke Wypler",
      "Nick Broeker",
      "Gabe Hall",
      "Jeremy Banks",
      "Dee Winters",
      "Jacob Slade",
      "Julius Brents",
      "Shaka Heyward",
      "Devon Witherspoon",
      "McClendon Curtis",
      "Ryan Miller",
      "Emil Ekiyor",
      "B.J. Thompson",
      "Dorian Williams",
      "Daiyan Henley"
    ),
    position = c(
      "LB",
      "OT",
      "DT",
      "C",
      "S",
      "CB",
      "WR",
      "EDGE",
      "WR",
      "WR",
      "CB",
      "TE",
      "C",
      "DT",
      "OT",
      "OT",
      "WR",
      "EDGE",
      "OT",
      "WR",
      "C",
      "OT",
      "DT",
      "LB",
      "LB",
      "DT",
      "CB",
      "LB",
      "CB",
      "G",
      "TE",
      "G",
      "EDGE",
      "LB",
      "LB"
    ),
    school = c(
      "Clemson",
      "Maryland",
      "Wisconsin",
      "Arkansas",
      "Boise State",
      "Utah",
      "Tennessee",
      "Iowa",
      "Oklahoma",
      "SMU",
      "Purdue",
      "South Dakota State",
      "Wisconsin",
      "Notre Dame",
      "Syracuse",
      "BYU",
      "Wake Forest",
      "Texas Tech",
      "Tennessee",
      "Fresno State",
      "Ohio State",
      "Ole Miss",
      "Baylor",
      "Tennessee",
      "TCU",
      "Michigan State",
      "Kansas State",
      "Duke",
      "Illinois",
      "Chattanooga",
      "Furman",
      "Alabama",
      "Stephen F. Austin",
      "Tulane",
      "Washington State"
    )
  ) %>%
    left_join(
      getUndraftable() %>% mutate(undraftable = TRUE),
      by = c('draft_year', 'name', 'position', 'school')
    ) %>%
    left_join(getPlayerList(2023) %>%
                bind_rows,
              by = c("name", "position", "school")) %>%
    left_join(
      getEDP() %>%
        filter(draft_year == 2023, type == 'All') %>%
        select(-type, -n, -latest_mock, -max_pick, -n_total),
      by = c('draft_year', 'name', 'position', 'school')
    ) %>%
    left_join(
      getPredictions() %>%
        filter(draft_year == 2023) %>%
        select(draft_year:avg, avg_rank, hdi_upper, hdi_lower),
      by = c('draft_year', 'name', 'position', 'school')
    ) %>%
    mutate(
      across(c(n, sites), ~ coalesce(., 0)),
      edp_eligible = ifelse(n >= 10 &
                              sites >= 10, TRUE, FALSE),
      undraftable = coalesce(undraftable, FALSE)
    ) %>%
    arrange(edp)
}

getConsensusMockData <- function(year = 2023, mock_type = 'All', draft_order = FALSE) {
  getPlayerList(year, split = FALSE) %>%
    inner_join(
      getMocks() %>%
        filter(draft_year == year, !is.na(team)) %>%
        {
          if (mock_type == 'All')
            filter(., TRUE) %>%
            mutate(type = 'All')
          else
            filter(., type == mock_type)
        } %>%
        anti_join(
          getUndraftable(),
          by = c('draft_year', "name", "position", "school")
        ) %>%
        semi_join(
          getEDP() %>%
            filter(draft_year == year, type == mock_type) %>%
            select(name, position, school),
          by = c('name', 'position', 'school')
        ) %>%
        mutate(
          site_name = gsub("-.*", "", site) %>% str_squish,
          site_author = gsub(".*-", "", site) %>% str_squish
        ) %>%
        left_join(
          getActual() %>%
            distinct(draft_year, draft_cat, pick = draft_pick),
          by = c('draft_year', 'pick')
        )  %>%
        mutate(draft_cat = coalesce(draft_cat, 'Day 3')) %>%
        left_join(
          getDraftniks() %>%
            select(-n) %>%
            # group_by(draft_year, draft_cat) %>%
            group_by(draft_year, round) %>%
            mutate_at(vars(contains("norm")), list(med = ~ median(.))) %>%
            ungroup,
            by = c('site_author', 'draft_year', 'round')
          # by = c('site_author', 'draft_year', 'draft_cat')
        ) %>%
        mutate_at(vars(contains('perc')), ~ coalesce(., .5)) %>%
        mutate_at(vars(contains('norm')), ~ ifelse(. < 0, 0, .)) %>%
        mutate(
          mse_norm = coalesce(mse_norm, mse_norm_med),
          log_mse_norm = coalesce(log_mse_norm, log_mse_norm_med),
          mse_norm = coalesce(mse_norm, .5),
          log_mse_norm = coalesce(log_mse_norm, .5),
          log_mse_norm_med = NULL,
          mse_norm_med = NULL
        ) %>%
        mutate(ovr_weight = draft_weight * perc_log_mse) %>%
        left_join(
          getActual() %>%
            filter(draft_year == year) %>%
            select(pick = draft_pick,
                   draft_team),
          by = c('pick')
        ) %>%
        group_by(draft_year,
                 name,
                 position,
                 school,
                 team,
                 draft_team,
                 round,
                 pick,
                 type) %>%
        summarize(mocks = n(),
                  mocks_wt_date = sum(draft_weight),
                  mocks_wt_draftnik = sum(perc_log_mse),
                  mocks_wt_overall = sum(ovr_weight)) %>%
        ungroup,
      by = c('name', 'position', 'school')
    ) %>%
    select(
      draft_year,
      name:school,
      team:mocks_wt_overall
    ) %>%
    arrange(pick, -mocks_wt_overall, -mocks) -> tmp
  
  if (draft_order == TRUE) {
    if (year == 2023) {
      return(
        tmp %>%
          filter(draft_team == team)
      )
    } else {
      return(
        tmp %>%
          group_by(pick, team) %>%
          mutate(team_n = sum(mocks_wt_date)) %>%
          group_by(pick) %>%
          filter(team_n == max(team_n)) %>%
          ungroup
      )
    }
  } else {
    return(tmp)
  }
}

getConsensusMock <-
  function(draft_year = 2023,
           type = 'All',
           rounds = 1,
           metric = 'Overall') {
    case_when(
      metric == 'Overall' ~ 'mocks_wt_overall',
      metric == 'Date' ~ 'mocks_wt_date',
      metric == 'Draftnik' ~ 'mocks_wt_draftnik'
    ) -> met
    
    getConsensusMockData(year = draft_year,
                         mock_type = type,
                         draft_order = TRUE) %>%
      inner_join(
        getEDP() %>%
          # filter(edp_rank <= 50) %>%
          select(draft_year:type, edp, edp_rank),
        by = c('draft_year', 'name', 'position', 'school', 'type')
      ) %>%
      select(draft_year:mocks,
             all_of(met),
             edp:edp_rank) -> tmp
    
    picks = tmp$pick[tmp$round %in% rounds] %>% unique
    
    con_mock <- data.frame()
    for (x in picks) {
      if (x != picks[order(picks) == 1]) {
        tmp %>%
          filter(pick == x) %>%
          anti_join(
            con_mock %>%
              select(draft_year,
                     name,
                     position,
                     school,
                     edp_rank),
            by = c("draft_year",
                   "name",
                   "position",
                   "school",
                   "edp_rank")
          ) %>%
          group_by(team, pick) %>%
          filter(dense_rank(-eval(parse(text = met))) == 1) %>%
          ungroup -> dat2
      } else {
        tmp %>%
          filter(pick == x) %>%
          group_by(team, pick) %>%
          filter(dense_rank(-eval(parse(text = met))) == 1) %>%
          ungroup -> con_mock
        
        dat2 <- con_mock
      }
      
      rbind(con_mock, dat2) %>%
        distinct %>%
        arrange(pick) -> con_mock
    }
    return(con_mock)
  }

getEDP_AV <- function(mock_type = 'All'){
  getGTM_AV() %>%
    full_join(
      getEDP() %>%
        filter(type == mock_type),
      by = c('draft_year', 'name', 'position', 'school')
    ) %>%
    mutate(
      across(c(seasons:av), ~ coalesce(., 0))
    ) %>%
    left_join(
      getActual(),
      by = c('draft_year', 'name', 'position', 'school')
    ) %>%
    semi_join(
      getActual() %>%
        filter(!is.na(name)) %>%
        distinct(draft_year),
      by = 'draft_year'
    ) %>%
    left_join(
      getActual() %>%
        select(
          draft_year,
          edp_round = draft_round,
          edp_rank = draft_pick
        ),
      by = c('draft_year', 'edp_rank')
    ) %>%
    mutate(draft_pick = coalesce(draft_pick, max_pick + 1),
           av_rank = dense_rank(-av)) %>%
    group_by(draft_year) %>%
    mutate(av_yr_rank = dense_rank(-av)) %>%
    filter(edp_rank <= max_pick | !is.na(draft_round)) %>%
    ungroup
}

getAV_Chart <- function(type = 'All',
                        pick = TRUE,
                        metric = 'AV',
                        log = FALSE) {
  getEDP_AV() %>%
    filter(draft_year >= 2019,
           edp_rank <= max_pick) -> tmp
  
  if (pick == TRUE) {
    tmp %>%
      group_by(draft_pick) %>%
      summarize(draft_av = sum(av, na.rm = TRUE)) %>%
      mutate(draft_cum = cumsum(draft_av)) %>%
      left_join(
        tmp %>%
          group_by(edp_rank) %>%
          summarize(edp_av = sum(av, na.rm = TRUE)) %>%
          mutate(edp_cum = cumsum(edp_av)),
        by = c('draft_pick' = 'edp_rank')
      ) %>%
      gather(key, value,-draft_pick) %>%
      mutate(
        type = sub("_.*", "", key),
        metric = sub(".*_", "", key),
        key = NULL
      ) %>%
      filter(metric == 'cum') %>%
      mutate(type = ifelse(
        type == 'draft',
        'NFL Draft',
        'Grinding the Mocks'
        )
      ) %>%
      ggplot() +
      geom_smooth(
        aes(x = draft_pick, y = value, color = type,
            linetype = ifelse(type == 'Grinding the Mocks', 'dashed', 'solid')),
        linewidth = 1.5,
        se = FALSE,
        method = 'loess',
        formula = 'y ~ x'
      ) +
      theme_gtm() +
      labs(color = '',
           linetype = '',
           x = 'Prospect Ranking',
           y = 'Cumulative Approximate Value\n(Rookie Contract)',
           title = "Predicting NFL Future Value",
           subtitle = "The NFL Draft vs Grinding the Mocks",
           caption = paste0(
             "Chart: Benjamin Robinson (@benj_robinson) | ",
             '\n',
             "Data: 'Grinding the Mocks/Pro Football Reference', ",
             "'19-'22."
           )) +
      scale_x_continuous(breaks = c(1, 16, 32, 50, 100, 150, 200, 250)) +
      scale_y_continuous(breaks = seq(0, 8000, 2000),
                         labels = scales::comma) +
      guides(linetype = 'none') +
      scale_color_manual(
        values = c(
          "NFL Draft" = astro_orange(),
          "Grinding the Mocks" = 'dodgerblue'
        )
      ) -> chrt
    
  } else {
    tmp %>%
      group_by(draft_round) %>%
      summarize(draft_av = sum(av, na.rm = TRUE)) %>%
      mutate(draft_cum = cumsum(draft_av)) %>%
      left_join(
        tmp %>%
          group_by(edp_round) %>%
          summarize(edp_av = sum(av, na.rm = TRUE)) %>%
          mutate(edp_cum = cumsum(edp_av)),
        by = c('draft_round' = 'edp_round')
      ) %>%
      mutate(draft_round = factor(
        coalesce(as.character(draft_round), 'Undrafted'),
        levels = c(as.character(1:7), 'Undrafted')
      )) %>%
      # adorn_totals %>%
      gather(key, value,-draft_round) %>%
      mutate(
        type = sub("_.*", "", key),
        metric = sub(".*_", "", key),
        key = NULL
      ) %>%
      filter(metric == 'cum') %>%
      mutate(type = ifelse(
        type == 'draft',
        'NFL Draft',
        'Grinding the Mocks'
        )
      ) %>%
      ggplot() +
      geom_bar(
        aes(x = draft_round, y = value, fill = type),
        size = 1.5,
        stat = 'identity',
        position = 'dodge'
      ) +
      theme_gtm() +
      labs(fill = '',
           x = 'Prospect Round',
           y = 'Rookie Contract Cumulative Approximate Value',
           title = "Predicting NFL Future Value",
           subtitle = "The NFL Draft vs Grinding the Mocks",
           caption = paste0(
             "Chart: Benjamin Robinson (@benj_robinson) | ",
             '\n',
             "Data: 'Grinding the Mocks'/Pro Football Reference, ",
             "'19-'22."
           )) +
      theme(legend.position = 'right',
            legend.direction = 'vertical') +
      scale_y_continuous(breaks = seq(0, 8000, 2000),
                         labels = scales::comma) +
      scale_fill_manual(
        values = c(
          "NFL Draft" = astro_orange(),
          "Grinding the Mocks" = 'dodgerblue'
        )
      ) -> chrt
  }
    
    if (log == TRUE) {
      chrt + scale_x_log10() + labs(x = 'Prospect Ranking (Logged)')
    } else {
      chrt
    }
}

getPlayerMissingMocks <-function(player = 'Bryce Young') {
    getMocks() %>%
      filter(draft_year == (getEDP() %>% filter(type == 'All', name == player) %>%
               distinct(draft_year) %>% pull)) %>%
      anti_join(getUndraftable(),
                by = c('draft_year', "name", "position", "school")) %>%
      distinct(draft_year, date, site, type, url) %>%
      anti_join(
        getMocks(player) %>%
          anti_join(
            getUndraftable(),
            by = c('draft_year', "name", "position", "school")
          ) %>%
          distinct(draft_year, date, site, type, url),
        by = c("draft_year", "site", "date", "type", "url")
      )
  }
